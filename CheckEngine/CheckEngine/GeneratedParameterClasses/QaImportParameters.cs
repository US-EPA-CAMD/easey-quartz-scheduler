//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ECMPS.Checks.QaImport.Parameters
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using ECMPS.Checks.CheckEngine;
    using ECMPS.Checks.CheckEngine.SpecialParameterClasses;
    using ECMPS.Checks.TypeUtilities;
    
    
    /// Parameter class for the QaImport process
    public sealed class QaImportParameters
    {
        
        // Storage field for property 'Process'
        private static cProcess _process;
        
        // Storage field for property 'Category'
        private static cCategory _category;
        
        /// The process object for the current evaluation process.  Set by the actual process during initialization.
        public static cProcess Process
        {
            get
            {
                return _process;
            }
        }
        
        /// The current category object set at the beginning of the category's processing of checks and nulled at the end of the processing.
        public static cCategory Category
        {
            get
            {
                return _category;
            }
            set
            {
                _category = value;
            }
        }
        
        /// <summary>
        /// Component Records at location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwComponentRow> ComponentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Component_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwComponentRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Component_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Component_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The current RATA Summary record in the workspace.
        /// </summary>
        public static ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaRatasummaryRow CurrentWorkspaceRataSummary
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaImportParameters.GetCheckParameter("Current_Workspace_RATA_Summary")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaRatasummaryRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Current_Workspace_RATA_Summary", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Current_Workspace_RATA_Summary", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current Test Summary record in the workspace.
        /// </summary>
        public static ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaTestsummaryRow CurrentWorkspaceTestSummary
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaImportParameters.GetCheckParameter("Current_Workspace_Test_Summary")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaTestsummaryRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Current_Workspace_Test_Summary", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Current_Workspace_Test_Summary", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// A list of fields reported in the RATA summary record not appropriate for the system type.
        /// </summary>
        public static string ExtraneousRataSummaryFields
        {
            get
            {
                return ((string)(QaImportParameters.GetCheckParameter("Extraneous_RATA_Summary_Fields")));
            }
            set
            {
                QaImportParameters.SetCheckParameter("Extraneous_RATA_Summary_Fields", value);
            }
        }
        
        /// <summary>
        /// A list of fields reported in the test summary record not appropriate for the test type.
        /// </summary>
        public static string ExtraneousTestSummaryFields
        {
            get
            {
                return ((string)(QaImportParameters.GetCheckParameter("Extraneous_Test_Summary_Fields")));
            }
            set
            {
                QaImportParameters.SetCheckParameter("Extraneous_Test_Summary_Fields", value);
            }
        }
        
        /// <summary>
        /// A list of children tables that are not appropriate for the test type in the current test summary record in the workspace.
        /// </summary>
        public static string InappropriateQaChildren
        {
            get
            {
                return ((string)(QaImportParameters.GetCheckParameter("Inappropriate_QA_Children")));
            }
            set
            {
                QaImportParameters.SetCheckParameter("Inappropriate_QA_Children", value);
            }
        }
        
        /// <summary>
        /// A list of locations in the QA file that are incorrectly identified as a unit or stack/pipe.
        /// </summary>
        public static string InvalidQaLocations
        {
            get
            {
                return ((string)(QaImportParameters.GetCheckParameter("Invalid_QA_Locations")));
            }
            set
            {
                QaImportParameters.SetCheckParameter("Invalid_QA_Locations", value);
            }
        }
        
        /// <summary>
        /// The monitor locations in the monitor plan including linked stack information (active/retire date) and unit information (non load based indicator).
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckImp.Function.Locations> LocationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Location_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckImp.Function.Locations>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Location_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Location_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// A list of identifying fields whose values in the incoming test record that are not equal to the values in the existing test record for the same location, test type, and test number.
        /// </summary>
        public static string MismatchedTestFields
        {
            get
            {
                return ((string)(QaImportParameters.GetCheckParameter("Mismatched_Test_Fields")));
            }
            set
            {
                QaImportParameters.SetCheckParameter("Mismatched_Test_Fields", value);
            }
        }
        
        /// <summary>
        /// A list of ComponentIDs in the workspace that are not present in the production database.
        /// </summary>
        public static string MissingQaComponents
        {
            get
            {
                return ((string)(QaImportParameters.GetCheckParameter("Missing_QA_Components")));
            }
            set
            {
                QaImportParameters.SetCheckParameter("Missing_QA_Components", value);
            }
        }
        
        /// <summary>
        /// A list of UnitStackPipeIDs in the workspace that are not present in the production database.
        /// </summary>
        public static string MissingQaLocations
        {
            get
            {
                return ((string)(QaImportParameters.GetCheckParameter("Missing_QA_Locations")));
            }
            set
            {
                QaImportParameters.SetCheckParameter("Missing_QA_Locations", value);
            }
        }
        
        /// <summary>
        /// A list of SystemIDs in the workspace that are not present in the production database.
        /// </summary>
        public static string MissingQaSystems
        {
            get
            {
                return ((string)(QaImportParameters.GetCheckParameter("Missing_QA_Systems")));
            }
            set
            {
                QaImportParameters.SetCheckParameter("Missing_QA_Systems", value);
            }
        }
        
        /// <summary>
        /// System Records at location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemRow> MonitorSystemRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Monitor_System_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Monitor_System_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Monitor_System_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The component records in the ECMPS database.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckImp.Function.Components> ProductionComponentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Production_Component_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckImp.Function.Components>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Production_Component_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Production_Component_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The monitor method records in the ECMPS database.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckImp.Function.Methods> ProductionMonitorMethodRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Production_Monitor_Method_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckImp.Function.Methods>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Production_Monitor_Method_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Production_Monitor_Method_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The monitor system records in the ECMPS database.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckImp.Function.Systems> ProductionMonitorSystemRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Production_Monitor_System_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckImp.Function.Systems>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Production_Monitor_System_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Production_Monitor_System_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Test Summary records in ECMPS database
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckImp.Function.Tests> ProductionTestSummaryRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Production_Test_Summary_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckImp.Function.Tests>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Production_Test_Summary_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Production_Test_Summary_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The QA Supplemental Data records for the location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataRow> QaSupplementalDataRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("QA_Supplemental_Data_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("QA_Supplemental_Data_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("QA_Supplemental_Data_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The location type associated with the current workspace test.
        /// </summary>
        public static string TestLocationType
        {
            get
            {
                return ((string)(QaImportParameters.GetCheckParameter("Test_Location_Type")));
            }
            set
            {
                QaImportParameters.SetCheckParameter("Test_Location_Type", value);
            }
        }
        
        /// <summary>
        /// All Appendix E Correlation Summary records in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaAecorrtestsummaryRow> WorkspaceAeCorrSummaryRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_AE_Corr_Summary_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaAecorrtestsummaryRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_AE_Corr_Summary_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_AE_Corr_Summary_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Air Emission Testing records in the workspace
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaAiremissiontestingRow> WorkspaceAiremissiontestingRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_AirEmissionTesting_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaAiremissiontestingRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_AirEmissionTesting_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_AirEmissionTesting_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Appendix E Heat Input from Gas records in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaAeHiGasRow> WorkspaceAppendixEHeatInputFromGasRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_Appendix_E_Heat_Input_From_Gas_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaAeHiGasRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_Appendix_E_Heat_Input_From_Gas_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_Appendix_E_Heat_Input_From_Gas_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Appendix E Heat Input from Oil records in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaAeHiOilRow> WorkspaceAppendixEHeatInputFromOilRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_Appendix_E_Heat_Input_From_Oil_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaAeHiOilRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_Appendix_E_Heat_Input_From_Oil_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_Appendix_E_Heat_Input_From_Oil_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Calibration Injection records in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaCalibrationinjectionRow> WorkspaceCalibrationInjectionRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_Calibration_Injection_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaCalibrationinjectionRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_Calibration_Injection_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_Calibration_Injection_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The component records and associated data in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaComponentsRow> WorkspaceComponentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_Component_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaComponentsRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_Component_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_Component_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Cycle Time Summary records in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaCycletimesummaryRow> WorkspaceCycleTimeSummaryRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_Cycle_Time_Summary_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaCycletimesummaryRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_Cycle_Time_Summary_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_Cycle_Time_Summary_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Flow RATA Run records in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaFlowratarunRow> WorkspaceFlowRataRunRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_Flow_RATA_Run_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaFlowratarunRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_Flow_RATA_Run_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_Flow_RATA_Run_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Flow to Load Check records in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaFlowtoloadcheckRow> WorkspaceFlowToLoadCheckRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_Flow_to_Load_Check_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaFlowtoloadcheckRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_Flow_to_Load_Check_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_Flow_to_Load_Check_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Flow to Load Reference records in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaFlowtoloadreferenceRow> WorkspaceFlowToLoadReferenceRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_Flow_to_Load_Reference_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaFlowtoloadreferenceRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_Flow_to_Load_Reference_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_Flow_to_Load_Reference_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Fuel Flowmeter Accuracy records in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaFuelflowmeteraccuracyRow> WorkspaceFuelFlowmeterAccuracyRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_Fuel_Flowmeter_Accuracy_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaFuelflowmeteraccuracyRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_Fuel_Flowmeter_Accuracy_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_Fuel_Flowmeter_Accuracy_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Fuelflow to Load Baseline records in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaFuelflowtoloadbaselineRow> WorkspaceFuelflowToLoadBaselineRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_Fuelflow_to_Load_Baseline_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaFuelflowtoloadbaselineRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_Fuelflow_to_Load_Baseline_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_Fuelflow_to_Load_Baseline_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Fuelflow to Load Test records in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaFuelflowtoloadtestRow> WorkspaceFuelflowToLoadTestRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_Fuelflow_to_Load_Test_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaFuelflowtoloadtestRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_Fuelflow_to_Load_Test_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_Fuelflow_to_Load_Test_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Linearity Summary records associated with Test Type Codes of HGLINE and HGSI3
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaHgtestsummaryRow> WorkspaceHgSummaryRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_Hg_Summary_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaHgtestsummaryRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_Hg_Summary_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_Hg_Summary_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Linearity Summary records in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaLinearitysummaryRow> WorkspaceLinearitySummaryRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_Linearity_Summary_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaLinearitysummaryRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_Linearity_Summary_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_Linearity_Summary_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Location records in the workspace tables
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaLocationsRow> WorkspaceLocationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_Location_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaLocationsRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_Location_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_Location_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Online Offline Calibration records in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaOnoffcalibrationRow> WorkspaceOnlineOfflineCalibrationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_Online_Offline_Calibration_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaOnoffcalibrationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_Online_Offline_Calibration_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_Online_Offline_Calibration_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Protocol Gas records in the workspace tables
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaProtocolgasRow> WorkspaceProtocolgasRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_ProtocolGas_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaProtocolgasRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_ProtocolGas_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_ProtocolGas_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All RATA records in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaRataRow> WorkspaceRataRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_RATA_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaRataRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_RATA_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_RATA_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All system identifiers in workspace TestSummary and QACertEvent tables or Emissions tables
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaSystemsRow> WorkspaceSystemRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_System_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaSystemsRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_System_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_System_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Test Qualification records in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaTestqualificationRow> WorkspaceTestQualificationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_Test_Qualification_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaTestqualificationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_Test_Qualification_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_Test_Qualification_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Test Summary records in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaTestsummaryRow> WorkspaceTestSummaryRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_Test_Summary_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaTestsummaryRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_Test_Summary_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_Test_Summary_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Transmitter Transducer records in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaTransaccuracyRow> WorkspaceTransmitterTransducerRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_Transmitter_Transducer_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaTransaccuracyRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_Transmitter_Transducer_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_Transmitter_Transducer_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Unit Default Test records in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaUnitdefaulttestRow> WorkspaceUnitDefaultTestRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaImportParameters.GetCheckParameter("Workspace_Unit_Default_Test_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.QaUnitdefaulttestRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaImportParameters.SetCheckParameter("Workspace_Unit_Default_Test_Records", null);
                }
                else
                {
                    QaImportParameters.SetCheckParameter("Workspace_Unit_Default_Test_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Gets the parameter value using the category property if it is not null, otherwise using the Process object if it is not null, and otherwise returning null.
        /// </summary>
        /// <param name="parameterId">The string id used to access the parameter in the check parameter collection.</param>
        /// <returns>Returns the requested check parameter as an object if it exists, and as a null if it does not.</returns>
        public static object GetCheckParameter(string parameterId)
        {
            cLegacyCheckParameter checkParameter;
            if (((QaImportParameters.Category == null) 
                        == false))
            {
                checkParameter = QaImportParameters.Category.GetCheckParameter(parameterId);
            }
            else
            {
                if (((QaImportParameters.Process == null) 
                            == false))
                {
                    checkParameter = QaImportParameters.Process.GetCheckParameter(parameterId);
                }
                else
                {
                    checkParameter = null;
                }
            }
            if ((checkParameter == null))
            {
                return null;
            }
            else
            {
                return checkParameter.ParameterValue;
            }
        }
        
        /// <summary>
        /// Sets the parameter value using the category property if it is not null, otherwise using the Process object if it is not null, and otherwise does nothing.
        /// </summary>
        /// <param name="parameterId">The string id used to access the parameter in the check parameter collection.</param>
        /// <param name="parameterValue">The value to which to set the parameter.</param>
        public static void SetCheckParameter(string parameterId, object parameterValue)
        {
            if (((QaImportParameters.Category == null) 
                        == false))
            {
                QaImportParameters.Category.SetCheckParameter(parameterId, parameterValue);
            }
            else
            {
                if (((QaImportParameters.Process == null) 
                            == false))
                {
                    QaImportParameters.Process.SetCheckParameter(parameterId, parameterValue);
                }
            }
        }
        
        /// <summary>
        /// Initializes the values in the check parameter object.
        /// </summary>
        public static void Init(cProcess process)
        {
            QaImportParameters._process = process;
            QaImportParameters.Category = null;
            QaImportParameters.RegisterParameters();
        }
        
        /// <summary>
        /// Registers each check parameter.
        /// </summary>
        public static void RegisterParameters()
        {
            if (((QaImportParameters.Process == null) 
                        || (QaImportParameters.Process.ProcessParameters == null)))
            {
                return;
            }
            Process.ProcessParameters.RegisterParameter(539, "Component_Records");
            Process.ProcessParameters.RegisterParameter(1474, "Current_Workspace_RATA_Summary");
            Process.ProcessParameters.RegisterParameter(1437, "Current_Workspace_Test_Summary");
            Process.ProcessParameters.RegisterParameter(1475, "Extraneous_RATA_Summary_Fields");
            Process.ProcessParameters.RegisterParameter(1455, "Extraneous_Test_Summary_Fields");
            Process.ProcessParameters.RegisterParameter(1438, "Inappropriate_QA_Children");
            Process.ProcessParameters.RegisterParameter(3181, "Invalid_QA_Locations");
            Process.ProcessParameters.RegisterParameter(626, "Location_Records");
            Process.ProcessParameters.RegisterParameter(1748, "Mismatched_Test_Fields");
            Process.ProcessParameters.RegisterParameter(1436, "Missing_QA_Components");
            Process.ProcessParameters.RegisterParameter(2315, "Missing_QA_Locations");
            Process.ProcessParameters.RegisterParameter(1435, "Missing_QA_Systems");
            Process.ProcessParameters.RegisterParameter(345, "Monitor_System_Records");
            Process.ProcessParameters.RegisterParameter(1931, "Production_Component_Records");
            Process.ProcessParameters.RegisterParameter(2427, "Production_Monitor_Method_Records");
            Process.ProcessParameters.RegisterParameter(1930, "Production_Monitor_System_Records");
            Process.ProcessParameters.RegisterParameter(1577, "Production_Test_Summary_Records");
            Process.ProcessParameters.RegisterParameter(1331, "QA_Supplemental_Data_Records");
            Process.ProcessParameters.RegisterParameter(1803, "Test_Location_Type");
            Process.ProcessParameters.RegisterParameter(1453, "Workspace_AE_Corr_Summary_Records");
            Process.ProcessParameters.RegisterParameter(3232, "Workspace_AirEmissionTesting_Records");
            Process.ProcessParameters.RegisterParameter(2091, "Workspace_Appendix_E_Heat_Input_From_Gas_Records");
            Process.ProcessParameters.RegisterParameter(2092, "Workspace_Appendix_E_Heat_Input_From_Oil_Records");
            Process.ProcessParameters.RegisterParameter(1443, "Workspace_Calibration_Injection_Records");
            Process.ProcessParameters.RegisterParameter(1424, "Workspace_Component_Records");
            Process.ProcessParameters.RegisterParameter(1445, "Workspace_Cycle_Time_Summary_Records");
            Process.ProcessParameters.RegisterParameter(1457, "Workspace_Flow_RATA_Run_Records");
            Process.ProcessParameters.RegisterParameter(1448, "Workspace_Flow_to_Load_Check_Records");
            Process.ProcessParameters.RegisterParameter(1447, "Workspace_Flow_to_Load_Reference_Records");
            Process.ProcessParameters.RegisterParameter(1451, "Workspace_Fuel_Flowmeter_Accuracy_Records");
            Process.ProcessParameters.RegisterParameter(1449, "Workspace_Fuelflow_to_Load_Baseline_Records");
            Process.ProcessParameters.RegisterParameter(1450, "Workspace_Fuelflow_to_Load_Test_Records");
            Process.ProcessParameters.RegisterParameter(3431, "Workspace_Hg_Summary_Records");
            Process.ProcessParameters.RegisterParameter(1444, "Workspace_Linearity_Summary_Records");
            Process.ProcessParameters.RegisterParameter(2216, "Workspace_Location_Records");
            Process.ProcessParameters.RegisterParameter(1446, "Workspace_Online_Offline_Calibration_Records");
            Process.ProcessParameters.RegisterParameter(3230, "Workspace_ProtocolGas_Records");
            Process.ProcessParameters.RegisterParameter(1442, "Workspace_RATA_Records");
            Process.ProcessParameters.RegisterParameter(1571, "Workspace_System_Records");
            Process.ProcessParameters.RegisterParameter(1456, "Workspace_Test_Qualification_Records");
            Process.ProcessParameters.RegisterParameter(1432, "Workspace_Test_Summary_Records");
            Process.ProcessParameters.RegisterParameter(1452, "Workspace_Transmitter_Transducer_Records");
            Process.ProcessParameters.RegisterParameter(1454, "Workspace_Unit_Default_Test_Records");
        }
    }
}
