//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ECMPS.Checks.EmImport.Parameters
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using ECMPS.Checks.CheckEngine;
    using ECMPS.Checks.CheckEngine.SpecialParameterClasses;
    using ECMPS.Checks.TypeUtilities;
    
    
    /// Parameter class for the EmImport process
    public sealed class EmImportParameters
    {
        
        // Storage field for property 'Process'
        private  cProcess _process;
        
        // Storage field for property 'Category'
        private  cCategory _category;
        
        /// The process object for the current evaluation process.  Set by the actual process during initialization.
        public  cProcess Process
        {
            get
            {
                return _process;
            }
        }
        
        /// The current category object set at the beginning of the category's processing of checks and nulled at the end of the processing.
        public  cCategory Category
        {
            get
            {
                return _category;
            }
            set
            {
                _category = value;
            }
        }
        
        /// <summary>
        /// Component Records at location.
        /// </summary>
        public  CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwComponentRow> ComponentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(GetCheckParameter("Component_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwComponentRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    SetCheckParameter("Component_Records", null);
                }
                else
                {
                    SetCheckParameter("Component_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The current Daily Test Summary record in the workspace.
        /// </summary>
        public  ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckEmDailytestsummaryRow CurrentWorkspaceDailyTestSummary
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(GetCheckParameter("Current_Workspace_Daily_Test_Summary")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckEmDailytestsummaryRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    SetCheckParameter("Current_Workspace_Daily_Test_Summary", null);
                }
                else
                {
                    SetCheckParameter("Current_Workspace_Daily_Test_Summary", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current WeeklyTest Summary record in the workspace.
        /// </summary>
        public  ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckEmWeeklytestsummaryRow CurrentWorkspaceWeeklyTestSummary
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(GetCheckParameter("Current_Workspace_Weekly_Test_Summary")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckEmWeeklytestsummaryRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    SetCheckParameter("Current_Workspace_Weekly_Test_Summary", null);
                }
                else
                {
                    SetCheckParameter("Current_Workspace_Weekly_Test_Summary", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Formula records with formula info included
        /// </summary>
        public  CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorFormulaRow> FormulaRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(GetCheckParameter("Formula_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorFormulaRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    SetCheckParameter("Formula_Records", null);
                }
                else
                {
                    SetCheckParameter("Formula_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// An invalid UnitID StackPipeID combination
        /// </summary>
        public  string InvalidImportLocation
        {
            get
            {
                return ((string)(GetCheckParameter("Invalid_Import_Location")));
            }
            set
            {
                SetCheckParameter("Invalid_Import_Location", value);
            }
        }
        
        /// <summary>
        /// A list of SystemIDs in the workspace LTFF table that are not valid LTFF systems.
        /// </summary>
        public  string InvalidLtffSystems
        {
            get
            {
                return ((string)(GetCheckParameter("Invalid_LTFF_Systems")));
            }
            set
            {
                SetCheckParameter("Invalid_LTFF_Systems", value);
            }
        }
        
        /// <summary>
        /// A list of ComponentIDs in the workspace that are not present in the production database.
        /// </summary>
        public  string MissingEmComponents
        {
            get
            {
                return ((string)(GetCheckParameter("Missing_EM_Components")));
            }
            set
            {
                SetCheckParameter("Missing_EM_Components", value);
            }
        }
        
        /// <summary>
        /// A list of FormulaIDs in the workspace that are not present in the production database.
        /// </summary>
        public  string MissingEmFormulas
        {
            get
            {
                return ((string)(GetCheckParameter("Missing_EM_Formulas")));
            }
            set
            {
                SetCheckParameter("Missing_EM_Formulas", value);
            }
        }
        
        /// <summary>
        /// A list of SystemIDs in the workspace that are not present in the production database.
        /// </summary>
        public  string MissingEmSystems
        {
            get
            {
                return ((string)(GetCheckParameter("Missing_EM_Systems")));
            }
            set
            {
                SetCheckParameter("Missing_EM_Systems", value);
            }
        }
        
        /// <summary>
        /// System Records at location.
        /// </summary>
        public  CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemRow> MonitorSystemRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(GetCheckParameter("Monitor_System_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    SetCheckParameter("Monitor_System_Records", null);
                }
                else
                {
                    SetCheckParameter("Monitor_System_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The component records and associated data in the workspace.
        /// </summary>
        public  CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaComponentsRow> WorkspaceComponentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(GetCheckParameter("Workspace_Component_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaComponentsRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    SetCheckParameter("Workspace_Component_Records", null);
                }
                else
                {
                    SetCheckParameter("Workspace_Component_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Daily Calibration records in the workspace.
        /// </summary>
        public  CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.EmDailycalibrationRow> WorkspaceDailyCalibrationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(GetCheckParameter("Workspace_Daily_Calibration_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.EmDailycalibrationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    SetCheckParameter("Workspace_Daily_Calibration_Records", null);
                }
                else
                {
                    SetCheckParameter("Workspace_Daily_Calibration_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The min and max date values from the workspace DailyEmission, DailyTestSummary, and HourlyOperating tables
        /// </summary>
        public  CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckEmDatesRow> WorkspaceDateRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(GetCheckParameter("Workspace_Date_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckEmDatesRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    SetCheckParameter("Workspace_Date_Records", null);
                }
                else
                {
                    SetCheckParameter("Workspace_Date_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All UnitIDs and StackPipeIDs in the emissions file
        /// </summary>
        public  CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckEmLocationsRow> WorkspaceEmLocationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(GetCheckParameter("Workspace_EM_Location_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckEmLocationsRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    SetCheckParameter("Workspace_EM_Location_Records", null);
                }
                else
                {
                    SetCheckParameter("Workspace_EM_Location_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Formula records in the workspace tables
        /// </summary>
        public  CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckEmFormulasRow> WorkspaceFormulaRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(GetCheckParameter("Workspace_Formula_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckEmFormulasRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    SetCheckParameter("Workspace_Formula_Records", null);
                }
                else
                {
                    SetCheckParameter("Workspace_Formula_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Location records in the workspace tables
        /// </summary>
        public  CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaLocationsRow> WorkspaceLocationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(GetCheckParameter("Workspace_Location_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaLocationsRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    SetCheckParameter("Workspace_Location_Records", null);
                }
                else
                {
                    SetCheckParameter("Workspace_Location_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Long Term Fuel Flow Records in the workspace.
        /// </summary>
        public  CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckEmLongtermfuelflowRow> WorkspaceLongTermFuelFlowRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(GetCheckParameter("Workspace_Long_Term_Fuel_Flow_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckEmLongtermfuelflowRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    SetCheckParameter("Workspace_Long_Term_Fuel_Flow_Records", null);
                }
                else
                {
                    SetCheckParameter("Workspace_Long_Term_Fuel_Flow_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All system identifiers in workspace TestSummary and QACertEvent tables or Emissions tables
        /// </summary>
        public  CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaSystemsRow> WorkspaceSystemRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(GetCheckParameter("Workspace_System_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaSystemsRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    SetCheckParameter("Workspace_System_Records", null);
                }
                else
                {
                    SetCheckParameter("Workspace_System_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The records in the Unit table in the Workspace.
        /// </summary>
        public  CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckEmLocationsRow> WorkspaceUnitRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(GetCheckParameter("Workspace_Unit_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckEmLocationsRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    SetCheckParameter("Workspace_Unit_Records", null);
                }
                else
                {
                    SetCheckParameter("Workspace_Unit_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Weekly System Integrity records in the workspace.
        /// </summary>
        public  CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.EmWeeklysystemintegrityRow> WorkspaceWeeklySystemIntegrityRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(GetCheckParameter("Workspace_Weekly_System_Integrity_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.Table.EmWeeklysystemintegrityRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    SetCheckParameter("Workspace_Weekly_System_Integrity_Records", null);
                }
                else
                {
                    SetCheckParameter("Workspace_Weekly_System_Integrity_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Gets the parameter value using the category property if it is not null, otherwise using the Process object if it is not null, and otherwise returning null.
        /// </summary>
        /// <param name="parameterId">The string id used to access the parameter in the check parameter collection.</param>
        /// <returns>Returns the requested check parameter as an object if it exists, and as a null if it does not.</returns>
        public  object GetCheckParameter(string parameterId)
        {
            cLegacyCheckParameter checkParameter;
            if (((Category == null) 
                        == false))
            {
                checkParameter = Category.GetCheckParameter(parameterId);
            }
            else
            {
                if (((Process == null) 
                            == false))
                {
                    checkParameter = Process.GetCheckParameter(parameterId);
                }
                else
                {
                    checkParameter = null;
                }
            }
            if ((checkParameter == null))
            {
                return null;
            }
            else
            {
                return checkParameter.ParameterValue;
            }
        }
        
        /// <summary>
        /// Sets the parameter value using the category property if it is not null, otherwise using the Process object if it is not null, and otherwise does nothing.
        /// </summary>
        /// <param name="parameterId">The string id used to access the parameter in the check parameter collection.</param>
        /// <param name="parameterValue">The value to which to set the parameter.</param>
        public  void SetCheckParameter(string parameterId, object parameterValue)
        {
            if (((Category == null) 
                        == false))
            {
                Category.SetCheckParameter(parameterId, parameterValue);
            }
            else
            {
                if (((Process == null) 
                            == false))
                {
                    Process.SetCheckParameter(parameterId, parameterValue);
                }
            }
        }
        
        /// <summary>
        /// Initializes the values in the check parameter object.
        /// </summary>
        public  void Init(cProcess process)
        {
            _process = process;
            Category = null;
            RegisterParameters();
        }
        
        /// <summary>
        /// Registers each check parameter.
        /// </summary>
        public  void RegisterParameters()
        {
            if (((Process == null) 
                        || (Process.ProcessParameters == null)))
            {
                return;
            }
            Process.ProcessParameters.RegisterParameter(539, "Component_Records");
            Process.ProcessParameters.RegisterParameter(1471, "Current_Workspace_Daily_Test_Summary");
            Process.ProcessParameters.RegisterParameter(3509, "Current_Workspace_Weekly_Test_Summary");
            Process.ProcessParameters.RegisterParameter(348, "Formula_Records");
            Process.ProcessParameters.RegisterParameter(1759, "Invalid_Import_Location");
            Process.ProcessParameters.RegisterParameter(2846, "Invalid_LTFF_Systems");
            Process.ProcessParameters.RegisterParameter(1468, "Missing_EM_Components");
            Process.ProcessParameters.RegisterParameter(1469, "Missing_EM_Formulas");
            Process.ProcessParameters.RegisterParameter(1467, "Missing_EM_Systems");
            Process.ProcessParameters.RegisterParameter(345, "Monitor_System_Records");
            Process.ProcessParameters.RegisterParameter(1424, "Workspace_Component_Records");
            Process.ProcessParameters.RegisterParameter(1472, "Workspace_Daily_Calibration_Records");
            Process.ProcessParameters.RegisterParameter(1580, "Workspace_Date_Records");
            Process.ProcessParameters.RegisterParameter(1585, "Workspace_EM_Location_Records");
            Process.ProcessParameters.RegisterParameter(1586, "Workspace_Formula_Records");
            Process.ProcessParameters.RegisterParameter(2216, "Workspace_Location_Records");
            Process.ProcessParameters.RegisterParameter(2845, "Workspace_Long_Term_Fuel_Flow_Records");
            Process.ProcessParameters.RegisterParameter(1571, "Workspace_System_Records");
            Process.ProcessParameters.RegisterParameter(1422, "Workspace_Unit_Records");
            Process.ProcessParameters.RegisterParameter(3510, "Workspace_Weekly_System_Integrity_Records");
        }
    }
}
