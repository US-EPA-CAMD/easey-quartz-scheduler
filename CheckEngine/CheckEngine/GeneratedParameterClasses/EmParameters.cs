//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ECMPS.Checks.Em.Parameters
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using ECMPS.Checks.CheckEngine;
    using ECMPS.Checks.CheckEngine.SpecialParameterClasses;
    using ECMPS.Checks.TypeUtilities;
    
    
    /// Parameter class for the Em process
    public sealed class EmParameters
    {
        
        // Storage field for property 'Process'
        private static cProcess _process;
        
        // Storage field for property 'Category'
        private static cCategory _category;
        
        /// The process object for the current evaluation process.  Set by the actual process during initialization.
        public static cProcess Process
        {
            get
            {
                return _process;
            }
        }
        
        /// The current category object set at the beginning of the category's processing of checks and nulled at the end of the processing.
        public static cCategory Category
        {
            get
            {
                return _category;
            }
            set
            {
                _category = value;
            }
        }
        
        /// <summary>
        /// Normally false, this boolean variable is set to true if the hourly checks process needs to be aborted, e.g. monitoring plan is not active during the current period
        /// </summary>
        public static bool? AbortHourlyChecks
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Abort_Hourly_Checks")));
            }
            set
            {
                EmParameters.SetCheckParameter("Abort_Hourly_Checks", value);
            }
        }
        
        /// <summary>
        /// Contains the year/qtr information when Missing Op data is the result for Accuracy Status.
        /// </summary>
        public static string AccuracyMissingOpDataInfo
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Accuracy_Missing_Op_Data_Info")));
            }
            set
            {
                EmParameters.SetCheckParameter("Accuracy_Missing_Op_Data_Info", value);
            }
        }
        
        /// <summary>
        /// All accuracy test summary records for the location.  Used by the QA Status evaluation.
        ///
        ///FFACC or FFACCTT tests.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow> AccuracyTestRecordsByLocationForQaStatus
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Accuracy_Test_Records_By_Location_For_QA_Status")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Accuracy_Test_Records_By_Location_For_QA_Status", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Accuracy_Test_Records_By_Location_For_QA_Status", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not all values are available for performing the current Heat Input Calculation
        /// </summary>
        public static bool? AllRequiredHeatInputCalculationElements
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("All_Required_Heat_Input_Calculation_Elements")));
            }
            set
            {
                EmParameters.SetCheckParameter("All_Required_Heat_Input_Calculation_Elements", value);
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the test record that is the Invalid Prior linearity test for the alternate range.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow AlternateInvalidLinearityRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Alternate_Invalid_Linearity_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Alternate_Invalid_Linearity_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Alternate_Invalid_Linearity_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the test record that is the Invalid Prior RATA test for the alternate system.
        /// </summary>
        public static bool? AlternateInvalidRataRecord
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Alternate_Invalid_RATA_Record")));
            }
            set
            {
                EmParameters.SetCheckParameter("Alternate_Invalid_RATA_Record", value);
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the test record that is the Prior linearity test for the alternate range.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow AlternateLinearityRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Alternate_Linearity_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Alternate_Linearity_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Alternate_Linearity_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the test record that is the Prior RATA test for the alternate system.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow AlternateRataRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Alternate_RATA_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Alternate_RATA_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Alternate_RATA_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Contains the analyzer range records for a monitoring plan, filter to a particular component id.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpAnalyzerRangeRow> AnalyzerRangeRecordsByComponent
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Analyzer_Range_Records_by_Component")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpAnalyzerRangeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Analyzer_Range_Records_by_Component", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Analyzer_Range_Records_by_Component", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Analyzer Range Records By Hour and Location
        ///
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpAnalyzerRangeRow> AnalyzerRangeRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Analyzer_Range_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpAnalyzerRangeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Analyzer_Range_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Analyzer_Range_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The recalculate YTD value for BCO2.
        /// </summary>
        public static decimal? AnnualBco2CalculatedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Annual_BCO2_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Annual_BCO2_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// The recalculated year-to-date value for CO2 Mass.
        /// </summary>
        public static decimal? AnnualCo2mCalculatedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Annual_CO2M_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Annual_CO2M_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// The recalculated year-to-date value for total heat input.
        /// </summary>
        public static decimal? AnnualHitCalculatedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Annual_HIT_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Annual_HIT_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// The recalculated year-to-date value for NOx Mass.
        /// </summary>
        public static decimal? AnnualNoxmCalculatedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Annual_NOXM_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Annual_NOXM_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// The recalculated year-to-date value for NOx Rate.
        /// </summary>
        public static decimal? AnnualNoxrCalculatedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Annual_NOXR_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Annual_NOXR_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// The recalculated year-to-date value for total operating hours.
        /// </summary>
        public static int? AnnualOphoursCalculatedValue
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Annual_OPHOURS_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Annual_OPHOURS_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// The recalculated year-to-date value for total operating time.
        /// </summary>
        public static decimal? AnnualOptimeCalculatedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Annual_OPTIME_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Annual_OPTIME_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// Indicates if the units in the configuration report annually (as opposed to the ozone season only).
        /// </summary>
        public static bool? AnnualReportingRequirement
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Annual_Reporting_Requirement")));
            }
            set
            {
                EmParameters.SetCheckParameter("Annual_Reporting_Requirement", value);
            }
        }
        
        /// <summary>
        /// The recalculated year-to-date value for SO2 Mass.
        /// </summary>
        public static decimal? AnnualSo2MassCalculatedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Annual_SO2_Mass_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Annual_SO2_Mass_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// Heat Input value calculated using Appendix D, wheter from a gas source or oil source
        /// </summary>
        public static decimal? AppECalcHi
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("App_E_Calc_Hi")));
            }
            set
            {
                EmParameters.SetCheckParameter("App_E_Calc_Hi", value);
            }
        }
        
        /// <summary>
        /// Indicates which segment number should have been reported in the NOx Rate record for the current fuel source
        /// </summary>
        public static int? AppECalcSegmentNum
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("App_E_Calc_Segment_Num")));
            }
            set
            {
                EmParameters.SetCheckParameter("App_E_Calc_Segment_Num", value);
            }
        }
        
        /// <summary>
        /// The calculated value for NOx Rate  from a single Fuel Flow Record using the specified formula
        /// </summary>
        public static bool? AppECalculatedNoxRateForSource
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("App_E_Calculated_Nox_Rate_For_Source")));
            }
            set
            {
                EmParameters.SetCheckParameter("App_E_Calculated_Nox_Rate_For_Source", value);
            }
        }
        
        /// <summary>
        /// Indicates if Appendix E NOx emissions rate needs to be calculated for unit with apportioned heat input.
        /// </summary>
        public static bool? AppEChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("App_E_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("App_E_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the constant fuel mix method of reporting is in effect for an Appendix E Site
        /// </summary>
        public static bool? AppEConstantFuelMix
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("App_E_Constant_Fuel_Mix")));
            }
            set
            {
                EmParameters.SetCheckParameter("App_E_Constant_Fuel_Mix", value);
            }
        }
        
        /// <summary>
        /// Contains the four values for heat input from the most recent Appendix E Correlation tests. This array contains four decimal values
        /// </summary>
        public static decimal? AppECorrelationHeatInputArray
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("App_E_Correlation_Heat_Input_Array")));
            }
            set
            {
                EmParameters.SetCheckParameter("App_E_Correlation_Heat_Input_Array", value);
            }
        }
        
        /// <summary>
        /// Contains the four values for NOx Rate from the most recent Appendix E Correlation tests. This array contains four decimal values
        /// </summary>
        public static decimal? AppECorrelationNoxRateArray
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("App_E_Correlation_Nox_Rate_Array")));
            }
            set
            {
                EmParameters.SetCheckParameter("App_E_Correlation_Nox_Rate_Array", value);
            }
        }
        
        /// <summary>
        /// FuelCode associated with the DHV or HPFF record for NOX rate
        /// </summary>
        public static string AppEFuelCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("App_E_Fuel_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("App_E_Fuel_Code", value);
            }
        }
        
        /// <summary>
        /// Indicates whether an active Appendix D Method for either Heat Input, SO2, or CO2 is active during the current hour
        /// </summary>
        public static bool? AppendixDMethodActive
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Appendix_D_Method_Active")));
            }
            set
            {
                EmParameters.SetCheckParameter("Appendix_D_Method_Active", value);
            }
        }
        
        /// <summary>
        /// Contains the year/qtr information when Missing Op data is the result for Appendix E Status.
        /// </summary>
        public static string AppendixEMissingOpDataInfo
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Appendix_E_Missing_Op_Data_Info")));
            }
            set
            {
                EmParameters.SetCheckParameter("Appendix_E_Missing_Op_Data_Info", value);
            }
        }
        
        /// <summary>
        /// Indicates if a record requires the Appendix E Status Evaluation.
        /// </summary>
        public static bool? AppendixEStatusRequired
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Appendix_E_Status_Required")));
            }
            set
            {
                EmParameters.SetCheckParameter("Appendix_E_Status_Required", value);
            }
        }
        
        /// <summary>
        /// All appendix E test summary records for the location.  Used by the QA Status evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow> AppendixETestRecordsByLocationForQaStatus
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Appendix_E_Test_Records_By_Location_For_QA_Status")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Appendix_E_Test_Records_By_Location_For_QA_Status", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Appendix_E_Test_Records_By_Location_For_QA_Status", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// NOXE Monitoring System ID reported in the NOXR DHV or HPFF record.
        /// </summary>
        public static string AppENoxeSystemId
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("App_E_NOXE_System_ID")));
            }
            set
            {
                EmParameters.SetCheckParameter("App_E_NOXE_System_ID", value);
            }
        }
        
        /// <summary>
        /// The MonitoringSystemID of the NOXE system reported in the NOXR DHV or HPFF record.
        /// </summary>
        public static string AppENoxeSystemIdentifier
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("App_E_NOXE_System_Identifier")));
            }
            set
            {
                EmParameters.SetCheckParameter("App_E_NOXE_System_Identifier", value);
            }
        }
        
        /// <summary>
        /// The NOx maximum emission rate for the fuel in the NOXR DHV or HPFF record.
        /// </summary>
        public static decimal? AppENoxMer
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("App_E_NOx_MER")));
            }
            set
            {
                EmParameters.SetCheckParameter("App_E_NOx_MER", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the Monitoring System reported in the gas fuel source HourlyParamFuelFlow record for Appendix E NOX Rate is valid
        /// </summary>
        public static bool? AppENoxrMonSysIsValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("App_E_Noxr_Mon_Sys_Is_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("App_E_Noxr_Mon_Sys_Is_Valid", value);
            }
        }
        
        /// <summary>
        /// OperatingConditionCode reported in the DHV or HPFF record for NOX rate
        /// </summary>
        public static string AppEOpCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("App_E_Op_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("App_E_Op_Code", value);
            }
        }
        
        /// <summary>
        /// AdjustedHourlyValue reported in the DHV or HPFF record for NOX rate
        /// </summary>
        public static decimal? AppEReportedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("App_E_Reported_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("App_E_Reported_Value", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the methodology for determining NOXR under Appendix E is from a single fuel source, multiple fuel sources, or a constant mix
        /// </summary>
        public static string AppEReportingMethod
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("App_E_Reporting_Method")));
            }
            set
            {
                EmParameters.SetCheckParameter("App_E_Reporting_Method", value);
            }
        }
        
        /// <summary>
        /// SegmentNumber value reported in the DHV or HPFF record for NOX rate
        /// </summary>
        public static int? AppESegmentNumber
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("App_E_Segment_Number")));
            }
            set
            {
                EmParameters.SetCheckParameter("App_E_Segment_Number", value);
            }
        }
        
        /// <summary>
        /// The total number of segments in the relevant Appendix E Correlation Test used for evaluating Appendix E NOx rate
        /// </summary>
        public static int? AppESegmentTotal
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("App_E_Segment_Total")));
            }
            set
            {
                EmParameters.SetCheckParameter("App_E_Segment_Total", value);
            }
        }
        
        /// <summary>
        /// The Component ID that will be evaluated during the Linearity and Daily Calibration QA Status evaluations.
        /// </summary>
        public static string ApplicableComponentId
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Applicable_Component_ID")));
            }
            set
            {
                EmParameters.SetCheckParameter("Applicable_Component_ID", value);
            }
        }
        
        /// <summary>
        /// The comma delimited list of System IDs being evaluated in the RATA Status evaluation.
        /// </summary>
        public static string ApplicableSystemIdList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Applicable_System_ID_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("Applicable_System_ID_List", value);
            }
        }
        
        /// <summary>
        /// The System IDs that will be evaluated during the Linearity QA Status evaluation.
        /// </summary>
        public static string ApplicableSystemIds
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Applicable_System_IDs")));
            }
            set
            {
                EmParameters.SetCheckParameter("Applicable_System_IDs", value);
            }
        }
        
        /// <summary>
        /// The CurrentReportingPeriodTotal in the BCO2 Summary Value record.
        /// </summary>
        public static decimal? Bco2QuarterlyReportedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("BCO2_Quarterly_Reported_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("BCO2_Quarterly_Reported_Value", value);
            }
        }
        
        /// <summary>
        /// The unadjusted CO2 mass emissions that was recalculated by the software.
        /// </summary>
        public static decimal? CalcCo2Unadj
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calc_CO2_Unadj")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calc_CO2_Unadj", value);
            }
        }
        
        /// <summary>
        /// The amount of carbon burned during the day for the fuel as recalculated by the software.
        /// </summary>
        public static decimal? CalcFuelCarbonBurned
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calc_Fuel_Carbon_Burned")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calc_Fuel_Carbon_Burned", value);
            }
        }
        
        /// <summary>
        /// The total daily emissions for CO2M determined by FSA as recalculated by the software.
        /// </summary>
        public static decimal? CalcTde
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calc_TDE")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calc_TDE", value);
            }
        }
        
        /// <summary>
        /// The amount of carbon burned during the day for the location as recalculated by the software.
        /// </summary>
        public static decimal? CalcTotalCarbonBurned
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calc_Total_Carbon_Burned")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calc_Total_Carbon_Burned", value);
            }
        }
        
        /// <summary>
        /// Indicates if the apportioned or summed HI can be recalculated.
        /// </summary>
        public static bool? CalculateApportionedHi
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Calculate_Apportioned_HI")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculate_Apportioned_HI", value);
            }
        }
        
        /// <summary>
        /// Indicates if CO2M TDE should be calculated.  Used for levelling.
        /// </summary>
        public static bool? CalculateCo2mTde
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Calculate_CO2M_TDE")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculate_CO2M_TDE", value);
            }
        }
        
        /// <summary>
        /// Contains the Common Stack Load Range calculated using the hourly load and the active maximum load.
        /// </summary>
        public static int? CalculatedCsLoadRange
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Calculated_CS_Load_Range")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_CS_Load_Range", value);
            }
        }
        
        /// <summary>
        /// The diluent value used in the recalculation of CO2.
        ///
        ///Field to be updated: Current DHV Record.CalcPctDiluent
        ///
        /// </summary>
        public static decimal? CalculatedDiluentForCo2
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calculated_Diluent_for_CO2")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_Diluent_for_CO2", value);
            }
        }
        
        /// <summary>
        /// The diluent value used in the recalculation of CO2C.
        ///
        ///Field to be updated: Current DHV Record.CalcPctDiluent
        /// </summary>
        public static decimal? CalculatedDiluentForCo2c
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calculated_Diluent_for_CO2C")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_Diluent_for_CO2C", value);
            }
        }
        
        /// <summary>
        /// The diluent value used in the recalculation of HI.
        ///
        ///Field to be updated: Current DHV Record.CalcPctDiluent
        /// </summary>
        public static decimal? CalculatedDiluentForHi
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calculated_Diluent_for_HI")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_Diluent_for_HI", value);
            }
        }
        
        /// <summary>
        /// The diluent value used in the recalculation of NOXR.
        ///
        ///Field to be updated: Current DHV Record.CalcPctDiluent
        /// </summary>
        public static decimal? CalculatedDiluentForNoxr
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calculated_Diluent_for_NOXR")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_Diluent_for_NOXR", value);
            }
        }
        
        /// <summary>
        /// Used as the result of the MS-1 calculation.
        /// </summary>
        public static string CalculatedFlowWeightedHcl
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Calculated_Flow_Weighted_HCL")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_Flow_Weighted_HCL", value);
            }
        }
        
        /// <summary>
        /// Used as the result of the MS-1 calculation.
        /// </summary>
        public static string CalculatedFlowWeightedHf
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Calculated_Flow_Weighted_HF")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_Flow_Weighted_HF", value);
            }
        }
        
        /// <summary>
        /// Used as the result of the MS-1 calculation.
        /// </summary>
        public static string CalculatedFlowWeightedHg
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Calculated_Flow_Weighted_Hg")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_Flow_Weighted_Hg", value);
            }
        }
        
        /// <summary>
        /// Used as the result of the MS-1 calculation.
        /// </summary>
        public static string CalculatedFlowWeightedSo2
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Calculated_Flow_Weighted_SO2")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_Flow_Weighted_SO2", value);
            }
        }
        
        /// <summary>
        /// Contains the Load Range calculated using the hourly load and the active maximum load.
        /// </summary>
        public static int? CalculatedLoadRange
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Calculated_Load_Range")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_Load_Range", value);
            }
        }
        
        /// <summary>
        /// Contains the MATS MS Load calculated and used to check the reported value.
        /// </summary>
        public static int? CalculatedMatsMsLoad
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Calculated_MATS_MS_Load")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_MATS_MS_Load", value);
            }
        }
        
        /// <summary>
        /// The moisture value used in the recalculation of CO2.
        ///
        ///Field to be updated: Current DHV Record.CalcPctMoisture
        /// </summary>
        public static decimal? CalculatedMoistureForCo2
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calculated_Moisture_for_CO2")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_Moisture_for_CO2", value);
            }
        }
        
        /// <summary>
        /// The moisture value used in the recalculation of CO2C.
        ///
        ///Field to be updated: Current DHV Record.CalcPctMoisture
        /// </summary>
        public static decimal? CalculatedMoistureForCo2c
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calculated_Moisture_for_CO2C")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_Moisture_for_CO2C", value);
            }
        }
        
        /// <summary>
        /// The moisture value used in the recalculation of HI.
        ///
        ///Field to be updated: Current DHV Record.CalcPctMoisture
        /// </summary>
        public static decimal? CalculatedMoistureForHi
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calculated_Moisture_for_HI")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_Moisture_for_HI", value);
            }
        }
        
        /// <summary>
        /// The moisture value used in the recalculation of NOX.
        ///
        ///Field to be updated: Current DHV Record.CalcPctMoisture
        /// </summary>
        public static decimal? CalculatedMoistureForNox
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calculated_Moisture_for_NOX")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_Moisture_for_NOX", value);
            }
        }
        
        /// <summary>
        /// The moisture value used in the recalculation of NOXR.
        ///
        ///Field to be updated: Current DHV Record.CalcPctMoisture
        /// </summary>
        public static decimal? CalculatedMoistureForNoxr
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calculated_Moisture_for_NOXR")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_Moisture_for_NOXR", value);
            }
        }
        
        /// <summary>
        /// The moisture value used in the recalculation of SO2.
        ///
        ///Field to be updated: Current DHV Record.CalcPctMoisture
        /// </summary>
        public static decimal? CalculatedMoistureForSo2
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calculated_Moisture_for_SO2")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_Moisture_for_SO2", value);
            }
        }
        
        /// <summary>
        /// Contains the calculated System Integrity APS indicator.
        ///
        ///Used in the emission report evaluation, and also used to store calculated values.
        /// </summary>
        public static int? CalculatedSystemIntegrityApsIndicator
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Calculated_System_Integrity_APS_Indicator")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_System_Integrity_APS_Indicator", value);
            }
        }
        
        /// <summary>
        /// Contains the calculate System Integrity Error.
        ///
        ///Used in emission report evaluation and in the saving of calculated values.
        /// </summary>
        public static decimal? CalculatedSystemIntegrityError
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calculated_System_Integrity_Error")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_System_Integrity_Error", value);
            }
        }
        
        /// <summary>
        /// Primarily used within the calculation category of the Emission Report Evaluation.
        ///
        ///The calculated adjusted value resulting from the use of an equation.
        ///
        /// </summary>
        public static decimal? CalculatedUnadjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calculated_Unadjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_Unadjusted_Value", value);
            }
        }
        
        /// <summary>
        /// Contains the calculated Test Result Code for the Weekly Test Summary table.
        ///
        ///The value is initialized to null and updated by subsequent checks.
        /// </summary>
        public static string CalculatedWeeklyTestSummaryResult
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Calculated_Weekly_Test_Summary_Result")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculated_Weekly_Test_Summary_Result", value);
            }
        }
        
        /// <summary>
        /// Indicates if NOx Mass should be calculated from apportioned (or summed) heat input.
        /// </summary>
        public static bool? CalculateNoxmFromApportionedHi
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Calculate_NOXM_From_Apportioned_HI")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculate_NOXM_From_Apportioned_HI", value);
            }
        }
        
        /// <summary>
        /// Primarily used within the calculation category of the Emission Report Evaluation.
        ///
        ///The concentration to use in an equation.
        ///
        /// </summary>
        public static decimal? CalculationConcentration
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calculation_Concentration")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculation_Concentration", value);
            }
        }
        
        /// <summary>
        /// Primarily used within the calculation category of the Emission Report Evaluation.
        ///
        ///Indicates whether the concentration to use in an equation was substituted.
        ///
        /// </summary>
        public static bool? CalculationConcentrationSubstituted
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Calculation_Concentration_Substituted")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculation_Concentration_Substituted", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///The conversion factor (K) to use in an equation.
        /// </summary>
        public static decimal? CalculationConversionFactor
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calculation_Conversion_Factor")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculation_Conversion_Factor", value);
            }
        }
        
        /// <summary>
        /// Primarily used within the calculation category of the Emission Report Evaluation.
        ///
        ///The diluent to use in an equation.
        ///
        /// </summary>
        public static decimal? CalculationDiluent
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calculation_Diluent")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculation_Diluent", value);
            }
        }
        
        /// <summary>
        /// Primarily used within the calculation category of the Emission Report Evaluation.
        ///
        ///Indicates whether the concentration to use in an equation was substituted.
        ///
        /// </summary>
        public static bool? CalculationDiluentSubstituted
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Calculation_Diluent_Substituted")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculation_Diluent_Substituted", value);
            }
        }
        
        /// <summary>
        /// Primarily used within the calculation category of the Emission Report Evaluation.
        ///
        ///The flow to use in an equation.
        ///
        /// </summary>
        public static decimal? CalculationFlow
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calculation_Flow")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculation_Flow", value);
            }
        }
        
        /// <summary>
        /// Primarily used within the calculation category of the Emission Report Evaluation.
        ///
        ///Indicates whether the flow to use in an equation was substituted.
        /// </summary>
        public static bool? CalculationFlowSubstituted
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Calculation_Flow_Substituted")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculation_Flow_Substituted", value);
            }
        }
        
        /// <summary>
        /// Primarily used within the calculation category of the Emission Report Evaluation.
        ///
        ///The moisture to use in an equation.
        ///
        /// </summary>
        public static decimal? CalculationMoisture
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Calculation_Moisture")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculation_Moisture", value);
            }
        }
        
        /// <summary>
        /// Primarily used within the calculation category of the Emission Report Evaluation.
        ///
        ///Indicates whether the concentration to use in an equation was substituted.
        ///
        /// </summary>
        public static bool? CalculationMoistureSubstituted
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Calculation_Moisture_Substituted")));
            }
            set
            {
                EmParameters.SetCheckParameter("Calculation_Moisture_Substituted", value);
            }
        }
        
        /// <summary>
        /// Indicates that Common Stack Load Range value checking should occur.
        /// </summary>
        public static bool? CheckCsLoadRangeValue
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Check_CS_Load_Range_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Check_CS_Load_Range_Value", value);
            }
        }
        
        /// <summary>
        /// Dummy parameter used by the Hourly QA Status checks to cause the Ignored test checks to fire last.
        /// </summary>
        public static bool? CheckForIgnoredFlowRata
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Check_For_Ignored_FLOW_RATA")));
            }
            set
            {
                EmParameters.SetCheckParameter("Check_For_Ignored_FLOW_RATA", value);
            }
        }
        
        /// <summary>
        /// Dummy parameter used by the Hourly QA Status checks to cause the Ignored test checks to fire last.
        /// </summary>
        public static bool? CheckForIgnoredLinearity
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Check_For_Ignored_Linearity")));
            }
            set
            {
                EmParameters.SetCheckParameter("Check_For_Ignored_Linearity", value);
            }
        }
        
        /// <summary>
        /// Indicates that Load Range value checking should occur.
        /// </summary>
        public static bool? CheckLoadRangeValue
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Check_Load_Range_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Check_Load_Range_Value", value);
            }
        }
        
        /// <summary>
        /// This variable sums the Appendix D CO2 Mass calculations from all fuel sources
        /// </summary>
        public static decimal? Co2AppDAccumulator
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Co2_App_D_Accumulator")));
            }
            set
            {
                EmParameters.SetCheckParameter("Co2_App_D_Accumulator", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the active method at the current location for CO2 is Appendix D
        /// </summary>
        public static bool? Co2AppDMethodActiveForHour
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2_App_D_Method_Active_For_Hour")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_App_D_Method_Active_For_Hour", value);
            }
        }
        
        /// <summary>
        /// Resulting value when the CO2 Mass Rate is calculated.
        ///
        ///Field to be updated: Current DHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? Co2CalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("CO2_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// The CO2 Concentration Derived Hourly Records By Hour and Location
        ///
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueCo2cRow> Co2cDerivedHourlyRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Co2c_Derived_Hourly_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueCo2cRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Co2c_Derived_Hourly_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Co2c_Derived_Hourly_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Flag to indicate whether all CO2 Conc Derived Hourly checks passed or failed
        /// </summary>
        public static bool? Co2cDerivedHourlyStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2C_Derived_Hourly_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2C_Derived_Hourly_Status", value);
            }
        }
        
        /// <summary>
        /// Resulting value when the CO2 Concentration is calculated from O2.
        ///
        ///Field to be updated: Current DHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? Co2cDhvCalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("CO2C_DHV_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2C_DHV_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// Indicates whether there is a CO2 Mass Method for the current hour identifed as a CEMs Method
        /// </summary>
        public static bool? Co2CemMethodActiveForHour
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2_CEM_Method_Active_For_Hour")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_CEM_Method_Active_For_Hour", value);
            }
        }
        
        /// <summary>
        /// Indicates whether an CO2C DHV record has a measured MODC.
        /// </summary>
        public static bool? Co2cHasMeasuredDhvModc
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2C_Has_Measured_DHV_MODC")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2C_Has_Measured_DHV_MODC", value);
            }
        }
        
        /// <summary>
        /// Contains the CO2 Concentration value to be used by subsequent calculations if CO2 Conc is reported in a MonitorHourlyValueData record (could be either the Unadjusted Value or the Adjusted Value, depending on MODC)
        ///
        ///Field to be updated: Current MHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? Co2cMhvCalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("CO2C_MHV_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2C_MHV_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the MHV CO2C MODC value used in calcultion checks to determine whether CO2C was substituted and is set in the CO2C section of HOURMHV-8.
        /// </summary>
        public static string Co2cMhvModc
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("CO2C_MHV_MODC")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2C_MHV_MODC", value);
            }
        }
        
        /// <summary>
        /// The CO2 Concentration Monitor Hourly Records By Hour and Location
        ///
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueCo2cRow> Co2cMonitorHourlyRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Co2c_Monitor_Hourly_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueCo2cRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Co2c_Monitor_Hourly_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Co2c_Monitor_Hourly_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// A code that references an equation in MonitoringFormulaData that will be used for calculations for the current record (specific to Parameter CO2)
        /// </summary>
        public static bool? Co2ConcCemEquationCode
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2_Conc_Cem_Equation_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_Conc_Cem_Equation_Code", value);
            }
        }
        
        /// <summary>
        /// Indicates the need to perform CO2 concentration checks in suppor of CO2 Mass Calculations
        /// </summary>
        public static bool? Co2ConcChecksNeededForCo2MassCalc
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2_Conc_Checks_Needed_For_CO2_Mass_Calc")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_Conc_Checks_Needed_For_CO2_Mass_Calc", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the CO2 Concentration Checks must be run in support of the current Heat Input Calculation
        /// </summary>
        public static bool? Co2ConcChecksNeededForHeatInput
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2_Conc_Checks_Needed_for_Heat_Input")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_Conc_Checks_Needed_for_Heat_Input", value);
            }
        }
        
        /// <summary>
        /// Flag to indicate whether or not it is necessary to perform SO2 Derived Hourly checks at this location for the current hour
        /// </summary>
        public static bool? Co2ConcDerivedChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2_Conc_Derived_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_Conc_Derived_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// The number of CO2 Concentration DerivedHourlyValueData records reported during the current hour
        /// </summary>
        public static int? Co2ConcDerivedHourlyCount
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("CO2_Conc_Derived_Hourly_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_Conc_Derived_Hourly_Count", value);
            }
        }
        
        /// <summary>
        /// Flag to indicate whether or not it is necessary to perform CO2 Conc Monitor Hourly checks at this location for the current hour
        /// </summary>
        public static bool? Co2ConcMonitorChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2_Conc_Monitor_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_Conc_Monitor_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// The number of CO2 Concentration MonitorHourlyValueData records reported during the current hour
        /// </summary>
        public static int? Co2ConcMonitorHourlyCount
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("CO2_Conc_Monitor_Hourly_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_Conc_Monitor_Hourly_Count", value);
            }
        }
        
        /// <summary>
        /// The CO2 concentration used in CO2 Mass and/or Heat Input calculations for the current location during the current hour
        ///
        ///Field to be updated: Current MHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? Co2cSdCalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("CO2C_SD_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2C_SD_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// The CO2 and CO2M Derived Hourly Records By Hour and Location
        ///
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueCo2Row> Co2DerivedHourlyRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("CO2_Derived_Hourly_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueCo2Row>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("CO2_Derived_Hourly_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("CO2_Derived_Hourly_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// indicates whether or not the CO2 Derived Hourly Value checks were all run successfully
        /// </summary>
        public static bool? Co2DerivedHourlyStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2_Derived_Hourly_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_Derived_Hourly_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not CO2 Diluent Checks must be run in support of the NOx Rate Calculation
        /// </summary>
        public static bool? Co2DiluentChecksNeededForNoxRateCalc
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2_Diluent_Checks_Needed_For_Nox_Rate_Calc")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_Diluent_Checks_Needed_For_Nox_Rate_Calc", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Indicates whether CO2 Diluent values are needed to support the reporting of MATS parameters.
        /// </summary>
        public static bool? Co2DiluentNeededForMats
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2_Diluent_Needed_for_MATS")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_Diluent_Needed_for_MATS", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Indicates whether CO2 Diluent values are needed to support the calculation of MATS parameters.
        /// </summary>
        public static bool? Co2DiluentNeededForMatsCalculation
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2_Diluent_Needed_for_MATS_Calculation")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_Diluent_Needed_for_MATS_Calculation", value);
            }
        }
        
        /// <summary>
        /// Indicates if active CO2 Monitor Method entries for the current configuration during the current hour uses fuel-specific missing data approach
        /// </summary>
        public static bool? Co2FuelSpecificMissingData
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2_Fuel_Specific_Missing_Data")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_Fuel_Specific_Missing_Data", value);
            }
        }
        
        /// <summary>
        /// Indicates whether an CO2 HPFF record exists for the current hour.
        ///
        ///This parameter is initialized to false in HOUROP-3 and set to true in HOURAD-37.
        /// </summary>
        public static bool? Co2HpffExists
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2_HPFF_Exists")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_HPFF_Exists", value);
            }
        }
        
        /// <summary>
        /// A code that references an equation in MonitoringFormulaData that will be used for calculations for the current record (specific to Parameter CO2)
        /// </summary>
        public static bool? Co2MassCemEquationCode
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2_Mass_CEM_Equation_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_Mass_CEM_Equation_Code", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the CO2 Mass Rate Derived Hourly Value Checks must be run for the current hour
        /// </summary>
        public static bool? Co2MassDerivedChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2_Mass_Derived_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_Mass_Derived_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// The number of records returned in the CO2 Mass record
        /// </summary>
        public static bool? Co2MassDerivedHourlyCount
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2_Mass_Derived_Hourly_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_Mass_Derived_Hourly_Count", value);
            }
        }
        
        /// <summary>
        /// Resulting value when the CO2 Mass is calculated for LME
        ///
        ///Field to be updated: Current DHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? Co2mCalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("CO2M_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2M_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// Daily Emission Records for Day and Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDailyEmissionRow> Co2mDailyEmissionRecordsForDayLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("CO2M_Daily_Emission_Records_For_Day_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDailyEmissionRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("CO2M_Daily_Emission_Records_For_Day_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("CO2M_Daily_Emission_Records_For_Day_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the CO2M Derived Hourly Value Checks must be run for the current hour
        /// </summary>
        public static bool? Co2mDerivedChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2M_Derived_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2M_Derived_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// indicates whether or not the CO2M Derived Hourly Value checks were all run successfully
        /// </summary>
        public static bool? Co2mDerivedHourlyStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2M_Derived_Hourly_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2M_Derived_Hourly_Status", value);
            }
        }
        
        /// <summary>
        /// Method Code of active CO2 Monitor Method entries for the current configuration during the current hour
        /// </summary>
        public static string Co2MethodCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("CO2_Method_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_Method_Code", value);
            }
        }
        
        /// <summary>
        /// The CO2 Monitor Method Records By Hour Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodCo2Row> Co2MonitorMethodRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("CO2_Monitor_Method_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodCo2Row>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("CO2_Monitor_Method_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("CO2_Monitor_Method_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// CO2 Monitor Span Records By Hour and Location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSpanRow> Co2MonitorSpanRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("CO2_Monitor_Span_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSpanRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("CO2_Monitor_Span_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("CO2_Monitor_Span_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// CO2N Monitor Default Records for NFS fuel By Hour and Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorDefaultCo2nNfsRow> Co2nMonitorDefaultRecordsForNfsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Co2n_Monitor_Default_Records_For_Nfs_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorDefaultCo2nNfsRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Co2n_Monitor_Default_Records_For_Nfs_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Co2n_Monitor_Default_Records_For_Nfs_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if a CO2 RATA is required.
        /// </summary>
        public static bool? Co2RataRequired
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("CO2_RATA_Required")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_RATA_Required", value);
            }
        }
        
        /// <summary>
        /// The first quarter in the current year of the reporting period when CO2 method was active for the location.
        /// </summary>
        public static int? Co2StartQuarter
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("CO2_Start_Quarter")));
            }
            set
            {
                EmParameters.SetCheckParameter("CO2_Start_Quarter", value);
            }
        }
        
        /// <summary>
        /// Indicates if Missing Data MODCs are allowed in the MHV record.
        /// </summary>
        public static bool? CompleteMhvRecordNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Complete_MHV_Record_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("Complete_MHV_Record_Needed", value);
            }
        }
        
        /// <summary>
        /// Constains the system operating supplemental data for system and reporting period combinations.
        /// </summary>
        public static Dictionary<string, ComponentOperatingSupplementalData>[] ComponentOperatingSuppDataDictionaryArray
        {
            get
            {
                return ((Dictionary<string, ComponentOperatingSupplementalData>[])(EmParameters.GetCheckParameter("Component_Operating_Supp_Data_Dictionary_Array")));
            }
            set
            {
                EmParameters.SetCheckParameter("Component_Operating_Supp_Data_Dictionary_Array", value);
            }
        }
        
        /// <summary>
        /// The Component Operating Supplemental Data records for the current location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.ComponentOpSuppData> ComponentOperatingSuppDataRecordsForMpAndYear
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Component_Operating_Supp_Data_Records_for_MP_and_Year")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.ComponentOpSuppData>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Component_Operating_Supp_Data_Records_for_MP_and_Year", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Component_Operating_Supp_Data_Records_for_MP_and_Year", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The component record currently being audited.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpComponentRow ComponentRecordForAudit
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Component_Record_for_Audit")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpComponentRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Component_Record_for_Audit", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Component_Record_for_Audit", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Component Records By Location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpComponentRow> ComponentRecordsByLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Component_Records_By_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpComponentRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Component_Records_By_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Component_Records_By_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains the sum of recalculated heat input rate for all monitored locations in the monitoring plan during the current hour
        /// </summary>
        public static decimal? ConfigHeatinputAccumulator
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Config_HeatInput_Accumulator")));
            }
            set
            {
                EmParameters.SetCheckParameter("Config_HeatInput_Accumulator", value);
            }
        }
        
        /// <summary>
        /// Contains the sum of recalculated total heat input for all monitored locations in the monitoring plan during the current hour
        /// </summary>
        public static decimal? ConfigHeatinputtimesoptimeAccumulator
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Config_HeatInputTimesOpTime_Accumulator")));
            }
            set
            {
                EmParameters.SetCheckParameter("Config_HeatInputTimesOpTime_Accumulator", value);
            }
        }
        
        /// <summary>
        /// Contains the sum of recalculated NOx Rate times heat input for all monitored locations in the monitoring plan during the current hour
        /// </summary>
        public static decimal? ConfigNoxratetimesheatinputAccumulator
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Config_NOxRateTimesHeatInput_Accumulator")));
            }
            set
            {
                EmParameters.SetCheckParameter("Config_NOxRateTimesHeatInput_Accumulator", value);
            }
        }
        
        /// <summary>
        /// The sum of the NOx emission rate times operating time at all multiple stacks wher the NOx emission rate is measured.
        /// </summary>
        public static decimal? ConfigNoxratetimesoptimeAccumulator
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Config_NOxRateTimesOptime_Accumulator")));
            }
            set
            {
                EmParameters.SetCheckParameter("Config_NOxRateTimesOptime_Accumulator", value);
            }
        }
        
        /// <summary>
        /// The total operating time at all multiple stacks where the NOx emission rate is determined.
        /// </summary>
        public static decimal? ConfigOptimeAccumulator
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Config_Optime_Accumulator")));
            }
            set
            {
                EmParameters.SetCheckParameter("Config_Optime_Accumulator", value);
            }
        }
        
        /// <summary>
        /// Indicates whether a configuration change occured for the current emission report.
        /// </summary>
        public static bool? ConfigurationChangeOccuredDurringQuarter
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Configuration_Change_Occured_Durring_Quarter")));
            }
            set
            {
                EmParameters.SetCheckParameter("Configuration_Change_Occured_Durring_Quarter", value);
            }
        }
        
        /// <summary>
        /// All quarterly emissions file record for any location in the configuration whose emissions file is being evaluated.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemEmissionsRow> ConfigurationEmissionsFile
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Configuration_Emissions_File")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemEmissionsRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Configuration_Emissions_File", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Configuration_Emissions_File", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The number of fuels combusted at the common pipes in the configuration for the hour.
        /// </summary>
        public static int? CpFuelCount
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("CP_Fuel_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("CP_Fuel_Count", value);
            }
        }
        
        /// <summary>
        /// This parameter contains the Test Type to Required Test Code cross check table.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.TestTypeToRequiredTestCodeRow> CrosscheckTesttypetorequiredtestcode
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("CrossCheck_TestTypeToRequiredTestCode")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.TestTypeToRequiredTestCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("CrossCheck_TestTypeToRequiredTestCode", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("CrossCheck_TestTypeToRequiredTestCode", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Stores the current accuracy test status as part of the Appendix D status checks.
        /// </summary>
        public static string CurrentAccuracyStatus
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_Accuracy_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Accuracy_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates what Analyzer Range is being used for a given Monitor Hourly record.  Used by the Linearity Status and Daily Calibration Status checks.
        /// </summary>
        public static string CurrentAnalyzerRangeUsed
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_Analyzer_Range_Used")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Analyzer_Range_Used", value);
            }
        }
        
        /// <summary>
        /// Stores the current appendix d status throughout the Appendix D Status checks.
        ///
        ///Stored in Calc_APPE_Status in HFF record.
        /// </summary>
        public static string CurrentAppendixDStatus
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_Appendix_D_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Appendix_D_Status", value);
            }
        }
        
        /// <summary>
        /// Stores the current appendix e status throughout the Appendix E Status checks.
        ///
        ///Stored in Calc_APPE_Status in DHV or HPFF record.
        /// </summary>
        public static string CurrentAppendixEStatus
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_Appendix_E_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Appendix_E_Status", value);
            }
        }
        
        /// <summary>
        /// The HourlyParamFuelFlow record identifier for checks that are common to both gas and oil fuel sources
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyParamFuelFlowRow CurrentAppENoxrRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_App_E_Noxr_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyParamFuelFlowRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_App_E_Noxr_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_App_E_Noxr_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Summary Value record with Parameter Code BCO2.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemSummaryValueRow CurrentBco2SummaryValueRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_BCO2_Summary_Value_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemSummaryValueRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_BCO2_Summary_Value_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_BCO2_Summary_Value_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The average value of the previous and subsequent measured hour before and measured hour after for CO2C in the DHV records.
        /// </summary>
        public static decimal? CurrentCo2cDhvHbhaValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Current_CO2C_DHV_HBHA_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_CO2C_DHV_HBHA_Value", value);
            }
        }
        
        /// <summary>
        /// The Derived Hourly Value Record associated with CO2 Mass for the current hour
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueCo2Row CurrentCo2ConcDerivedHourlyRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_CO2_Conc_Derived_Hourly_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueCo2Row(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_CO2_Conc_Derived_Hourly_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_CO2_Conc_Derived_Hourly_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Refers to the MonitorHourlyValueData record associated with CO2 Concentration for missing data when there are two CO2C MHV records for the current hour 
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueCo2cRow CurrentCo2ConcMissingDataMonitorHourlyRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_CO2_Conc_Missing_Data_Monitor_Hourly_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueCo2cRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_CO2_Conc_Missing_Data_Monitor_Hourly_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_CO2_Conc_Missing_Data_Monitor_Hourly_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Refers to the MonitorHourlyValueData record associated with CO2 Concentration for the current hour
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueCo2cRow CurrentCo2ConcMonitorHourlyRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_CO2_Conc_Monitor_Hourly_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueCo2cRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_CO2_Conc_Monitor_Hourly_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_CO2_Conc_Monitor_Hourly_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Daily Emission Data record associated with CO2 Mass for the current hour
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDailyEmissionRow CurrentCo2MassDailyRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_CO2_Mass_Daily_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDailyEmissionRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_CO2_Mass_Daily_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_CO2_Mass_Daily_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The CO2M record from SummaryValueData for this location for the reporting period.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemSummaryValueRow CurrentCo2SummaryValueRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_CO2_Summary_Value_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemSummaryValueRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_CO2_Summary_Value_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_CO2_Summary_Value_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Daily Test Summary and Daily Calibration record for the daily calibration test being evaluated and associated location and component data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.DailyCalibrationTestPeriodData CurrentDailyCalibrationTest
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_Daily_Calibration_Test")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.DailyCalibrationTestPeriodData(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_Daily_Calibration_Test", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_Daily_Calibration_Test", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Stores the current daily calibration status throughout the Daily Calibration Status checks.
        /// </summary>
        public static string CurrentDailyCalStatus
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_Daily_Cal_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Daily_Cal_Status", value);
            }
        }
        
        /// <summary>
        /// The Daily Test Summary record for the test being evaluated.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwEmDailyTestSummaryRow CurrentDailyEmissionTest
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_Daily_Emission_Test")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwEmDailyTestSummaryRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_Daily_Emission_Test", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_Daily_Emission_Test", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The DailyFuel record being evaluated.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDailyFuelRow CurrentDailyFuelRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_Daily_Fuel_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDailyFuelRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_Daily_Fuel_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_Daily_Fuel_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current operating date and hour combined.    
        /// </summary>
        public static DateTime? CurrentDateHour
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("Current_Date_Hour")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Date_Hour", value);
            }
        }
        
        /// <summary>
        /// The current HPFF DENSOIL record being evaluated.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyParamFuelFlowRow CurrentDensityRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_Density_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyParamFuelFlowRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_Density_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_Density_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The calculated adjusted value for NOXR based on MODC Code.
        /// </summary>
        public static decimal? CurrentDhvCalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Current_DHV_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_DHV_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// The ParameterCode in the default table for the missing data maximum or minimum default value (as applicable)  associated with the current DHV record being evaluated.
        /// </summary>
        public static decimal? CurrentDhvDefaultParameter
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Current_DHV_Default_Parameter")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_DHV_Default_Parameter", value);
            }
        }
        
        /// <summary>
        /// The Monitor Formula record for the FormulaID in the DHV record being evaluated.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorFormulaRow CurrentDhvFormulaRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_DHV_Formula_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorFormulaRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_DHV_Formula_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_DHV_Formula_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the current DHV being evaluated uses fuel specific missing data.
        /// </summary>
        public static bool? CurrentDhvFuelSpecificHour
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Current_DHV_Fuel_Specific_Hour")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_DHV_Fuel_Specific_Hour", value);
            }
        }
        
        /// <summary>
        /// The average value of the previous and subsequent measured hour before and measured hour after.
        /// </summary>
        public static decimal? CurrentDhvHbhaValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Current_DHV_HBHA_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_DHV_HBHA_Value", value);
            }
        }
        
        /// <summary>
        /// The maximum or minimum value (as applicable) from the span or default table for the parameter for the current DHV record being evaluated.
        /// </summary>
        public static decimal? CurrentDhvMaxMinValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Current_DHV_Max_Min_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_DHV_Max_Min_Value", value);
            }
        }
        
        /// <summary>
        /// The monitoring methodology used to determine the emissions or heat input value.
        /// </summary>
        public static string CurrentDhvMethod
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_DHV_Method")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_DHV_Method", value);
            }
        }
        
        /// <summary>
        /// The FuelCode in the default record which contains the maximum or minimum value of the parameter in the DHV record.
        /// </summary>
        public static string CurrentDhvMissingDataFuel
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_DHV_Missing_Data_Fuel")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_DHV_Missing_Data_Fuel", value);
            }
        }
        
        /// <summary>
        /// The Monitor System record for the MonitoringSystemID in the DHV record being evaluated
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemRow CurrentDhvMonSysRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_DHV_Mon_Sys_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_DHV_Mon_Sys_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_DHV_Mon_Sys_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The equation code to calculate emissions or heat input from multiple fuels for AD or AE.
        /// </summary>
        public static string CurrentDhvMultipleFuelEquationCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_DHV_Multiple_Fuel_Equation_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_DHV_Multiple_Fuel_Equation_Code", value);
            }
        }
        
        /// <summary>
        /// Identifies the parameter and moisture basis of the current DHV record being evaluated.
        /// </summary>
        public static string CurrentDhvParameter
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_DHV_Parameter")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_DHV_Parameter", value);
            }
        }
        
        /// <summary>
        /// The current DHV record being evaluated
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueRow CurrentDhvRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_DHV_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_DHV_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_DHV_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the value in the DHV record can be recalculated.
        /// </summary>
        public static bool? CurrentDhvRecordValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Current_DHV_Record_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_DHV_Record_Valid", value);
            }
        }
        
        /// <summary>
        /// The valid SystemTypeCode associated with the current DHV record being evaluated.
        /// </summary>
        public static string CurrentDhvSystemType
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_DHV_System_Type")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_DHV_System_Type", value);
            }
        }
        
        /// <summary>
        /// Collection of Data Elements for the EmissionComment being evaluated and contained in the Hourly Submission Comment table.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlySubmissionCommentRow CurrentEmissionComment
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_Emission_Comment")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlySubmissionCommentRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_Emission_Comment", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_Emission_Comment", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Stack, Pipe, or Unit
        /// </summary>
        public static string CurrentEntityType
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_Entity_Type")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Entity_Type", value);
            }
        }
        
        /// <summary>
        /// The Stack Flow record being evaluated for the Current Date and Current Hour
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueFlowRow CurrentFlowMonitorHourlyRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_Flow_Monitor_Hourly_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueFlowRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_Flow_Monitor_Hourly_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_Flow_Monitor_Hourly_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current flow-to-load check for the current hour.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow CurrentFlowToLoadStatusCheck
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_Flow_to_Load_Status_Check")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_Flow_to_Load_Status_Check", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_Flow_to_Load_Status_Check", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current HourlyFuelFlowData record.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyFuelFlowRow CurrentFuelFlowRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_Fuel_Flow_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyFuelFlowRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_Fuel_Flow_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_Fuel_Flow_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Fuel Group of the Fuel Flow record being evaluated (OIL or GAS)
        /// </summary>
        public static string CurrentFuelGroup
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_Fuel_Group")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Fuel_Group", value);
            }
        }
        
        /// <summary>
        /// The current HPFF GCV record being evaluated.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyParamFuelFlowRow CurrentGcvRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_GCV_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyParamFuelFlowRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_GCV_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_GCV_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The record in DerivedHourlyValueData with parameter "H2O" currently being evaluated
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueH2oRow CurrentH2oDerivedHourlyRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_H2O_Derived_Hourly_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueH2oRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_H2O_Derived_Hourly_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_H2O_Derived_Hourly_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The average value of the previous and subsequent measured hour before and measured hour after for H2O in the DHV records.
        /// </summary>
        public static decimal? CurrentH2oDhvHbhaValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Current_H2O_DHV_HBHA_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_H2O_DHV_HBHA_Value", value);
            }
        }
        
        /// <summary>
        /// The record in MonitorHourlyValueData with parameter "H2O" currently being evaluated
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueH2oRow CurrentH2oMonitorHourlyRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_H2O_Monitor_Hourly_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueH2oRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_H2O_Monitor_Hourly_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_H2O_Monitor_Hourly_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The DerivedHourlyValue record reported for HI or HIT for the current location during the current hour
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueHiRow CurrentHeatInputDerivedHourlyRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_Heat_Input_Derived_Hourly_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueHiRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_Heat_Input_Derived_Hourly_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_Heat_Input_Derived_Hourly_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The DerivedHourlyValue record reported for the current location during the current hour used to report apportioned or summed heat input.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueRow CurrentHiApportionmentRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_HI_Apportionment_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_HI_Apportionment_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_HI_Apportionment_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Identifies the location type of the location in the MP configuration for which HI is being apportioned or summed.
        /// </summary>
        public static string CurrentHiEntityType
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_HI_Entity_Type")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_HI_Entity_Type", value);
            }
        }
        
        /// <summary>
        /// The HIT record from SummaryValueData for this location for the reporting period.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemSummaryValueRow CurrentHiSummaryValueRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_HI_Summary_Value_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemSummaryValueRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_HI_Summary_Value_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_HI_Summary_Value_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Defines whether H2O Inclusive Checks should work with the MonitorHourlyValueData table or the DerivedHourlyValueData table
        /// </summary>
        public static object CurrentHourlyH2oTableReference
        {
            get
            {
                return ((object)(EmParameters.GetCheckParameter("Current_Hourly_H2O_Table_Reference")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Hourly_H2O_Table_Reference", value);
            }
        }
        
        /// <summary>
        /// The OperatingTime field in the HourlyOperatingData table for the Current Hour
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyOpDataRow CurrentHourlyOpRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_Hourly_Op_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyOpDataRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_Hourly_Op_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_Hourly_Op_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current hourly record (MHV or DHV) record to be used for the RATA Status evaluation.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueRow CurrentHourlyRecordForRataStatus
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_Hourly_Record_for_RATA_Status")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_Hourly_Record_for_RATA_Status", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_Hourly_Record_for_RATA_Status", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Stores the current linearity status throughout the Linearity Status checks.
        ///
        ///Stored in Calc_Line_Status in MHV record.
        /// </summary>
        public static string CurrentLinearityStatus
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_Linearity_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Linearity_Status", value);
            }
        }
        
        /// <summary>
        /// The current record being evaluated in the HourlyOperatingData table for the LME unit.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyOpDataRow CurrentLmeHourlyOpRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_LME_Hourly_Op_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyOpDataRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_LME_Hourly_Op_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_LME_Hourly_Op_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The number of locations associated with the current monitoring plan
        /// </summary>
        public static int? CurrentLocationCount
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Current_Location_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Location_Count", value);
            }
        }
        
        /// <summary>
        /// The current long term fuel flow record being evaluated.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemLongTermFuelFlowRow CurrentLtffRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_LTFF_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemLongTermFuelFlowRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_LTFF_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_LTFF_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Constains the Maximum Load Value for the current hour and locations.
        /// </summary>
        public static int? CurrentMaximumLoadValue
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Current_Maximum_Load_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Maximum_Load_Value", value);
            }
        }
        
        /// <summary>
        /// The Data and Maps hourly measure code for the derived value being calculated.
        /// </summary>
        public static string CurrentMeasureCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_Measure_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Measure_Code", value);
            }
        }
        
        /// <summary>
        /// The calculated adjusted value for SO2C, NOXC, and FLOW based on MODC Code.
        /// </summary>
        public static decimal? CurrentMhvCalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Current_MHV_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_MHV_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// The valid ComponentTypeCode associated with the current MHV record being evaluated.
        /// </summary>
        public static string CurrentMhvComponentType
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_MHV_Component_Type")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_MHV_Component_Type", value);
            }
        }
        
        /// <summary>
        /// The ParameterCode in the default table for the missing data maximum or minimum default value (as applicable)  associated with the current MHV record being evaluated.
        /// </summary>
        public static string CurrentMhvDefaultParameter
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_MHV_Default_Parameter")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_MHV_Default_Parameter", value);
            }
        }
        
        /// <summary>
        /// Contains information about duplicate MHV records.
        /// </summary>
        public static string CurrentMhvDuplicate
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_MHV_Duplicate")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_MHV_Duplicate", value);
            }
        }
        
        /// <summary>
        /// Contains the delimited list of fields that should be empty but contain reported values.
        /// </summary>
        public static string CurrentMhvExtraneousFields
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_MHV_Extraneous_Fields")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_MHV_Extraneous_Fields", value);
            }
        }
        
        /// <summary>
        /// Indicates if the current MHV being evaluated uses fuel specific missing data.
        /// </summary>
        public static bool? CurrentMhvFuelSpecificHour
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Current_MHV_Fuel_Specific_Hour")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_MHV_Fuel_Specific_Hour", value);
            }
        }
        
        /// <summary>
        /// The average value of the previous and subsequent hour before and hour after.
        /// </summary>
        public static decimal? CurrentMhvHbhaValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Current_MHV_HBHA_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_MHV_HBHA_Value", value);
            }
        }
        
        /// <summary>
        /// The maximum or minimum value (as applicable) from the span or default table for the parameter for the current MHV record being evaluated.
        /// </summary>
        public static decimal? CurrentMhvMaxMinValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Current_MHV_Max_Min_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_MHV_Max_Min_Value", value);
            }
        }
        
        /// <summary>
        /// Contains information about missing MHV records.
        /// </summary>
        public static string CurrentMhvMissing
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_MHV_Missing")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_MHV_Missing", value);
            }
        }
        
        /// <summary>
        /// The FuelCode in the default record which contains the maximum or minimum value of the parameter in the MHV record.
        /// </summary>
        public static string CurrentMhvMissingDataFuel
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_MHV_Missing_Data_Fuel")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_MHV_Missing_Data_Fuel", value);
            }
        }
        
        /// <summary>
        /// The Monitor System record for the MonitoringSystemID in the MHV record being evaluated
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemRow CurrentMhvMonSysRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_MHV_Mon_Sys_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_MHV_Mon_Sys_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_MHV_Mon_Sys_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Identifies the parameter and moisture basis of the current MHV record being evaluated.
        /// </summary>
        public static string CurrentMhvParameter
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_MHV_Parameter")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_MHV_Parameter", value);
            }
        }
        
        /// <summary>
        /// Identifies the parameter and moisture basis of the current MHV record being evaluated.
        /// </summary>
        public static string CurrentMhvParameterDescription
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_MHV_Parameter_Description")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_MHV_Parameter_Description", value);
            }
        }
        
        /// <summary>
        /// Inidicates whether the parameter value reported with a record is valid.
        /// </summary>
        public static bool? CurrentMhvParameterStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Current_MHV_Parameter_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_MHV_Parameter_Status", value);
            }
        }
        
        /// <summary>
        /// The current MHV record being evaluated
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueRow CurrentMhvRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_MHV_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_MHV_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_MHV_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The component type and scale of the span record which contains the maximum value of the parameter in the MHV record.
        /// </summary>
        public static string CurrentMhvSpanDescription
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_MHV_Span_Description")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_MHV_Span_Description", value);
            }
        }
        
        /// <summary>
        /// The valid SystemTypeCode associated with the current MHV record being evaluated.
        /// </summary>
        public static string CurrentMhvSystemType
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_MHV_System_Type")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_MHV_System_Type", value);
            }
        }
        
        /// <summary>
        /// The MonitoringPlan record for which hourly data is currently being evaluated
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorPlanRow CurrentMonitoringPlanRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_Monitoring_Plan_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorPlanRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_Monitoring_Plan_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_Monitoring_Plan_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current MON_LOC_ID for the process.
        ///
        ///Used in emission report as set by the main processing loop.
        /// </summary>
        public static string CurrentMonitorLocationId
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_Monitor_Location_Id")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Monitor_Location_Id", value);
            }
        }
        
        /// <summary>
        /// The position of the current Monitor Plan Location record in the list of locations for a monitoring plan.
        /// </summary>
        public static int? CurrentMonitorPlanLocationPostion
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Current_Monitor_Plan_Location_Postion")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Monitor_Plan_Location_Postion", value);
            }
        }
        
        /// <summary>
        /// The current location in the current monitoring plan.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwCeMpMonitorLocationRow CurrentMonitorPlanLocationRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_Monitor_Plan_Location_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwCeMpMonitorLocationRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_Monitor_Plan_Location_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_Monitor_Plan_Location_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The month of the BeginDate in the Hourly Op Data record being evaluated.
        /// </summary>
        public static string CurrentMonth
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_Month")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Month", value);
            }
        }
        
        /// <summary>
        /// The DerivedHourlyValue record associated with NOx Mass for the current location during the current date and hour when NOX Mass is calculated from apportioned or summed heat input.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueRow CurrentNoxApportionmentBasedRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_NOX_Apportionment_Based_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_NOX_Apportionment_Based_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_NOX_Apportionment_Based_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current NOx Concentration record from MonitorHourlyValueData for this location at the Current Hour
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueRow CurrentNoxConcMonitorHourlyRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_Nox_Conc_Monitor_Hourly_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_Nox_Conc_Monitor_Hourly_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_Nox_Conc_Monitor_Hourly_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// the Bias Adjustment Factor associated with the NOx Concentration Monitoring System in use during the current hour
        ///
        ///Field to be updated: Current MHV Record.ApplicableBiasAdjustmentFactor
        ///
        /// </summary>
        public static decimal? CurrentNoxcSystemBaf
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Current_NOXC_System_BAF")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_NOXC_System_BAF", value);
            }
        }
        
        /// <summary>
        /// The DerivedHourlyValue record with parameter NOX or NOXM for the current location during the current date and hour
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueNoxRow CurrentNoxMassDerivedHourlyRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_NOx_Mass_Derived_Hourly_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueNoxRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_NOx_Mass_Derived_Hourly_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_NOx_Mass_Derived_Hourly_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The active Monitor Method record for the Current Facility/Unit during the current date and hour for NOx Mass calculations
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodNoxRow CurrentNoxMassMonitorMethodRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_NOx_Mass_Monitor_Method_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodNoxRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_NOx_Mass_Monitor_Method_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_NOx_Mass_Monitor_Method_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The NOXM record from SummaryValueData for this location for the reporting period.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemSummaryValueRow CurrentNoxMassSummaryValueRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_NOX_Mass_Summary_Value_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemSummaryValueRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_NOX_Mass_Summary_Value_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_NOX_Mass_Summary_Value_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The NOXR record from SummaryValueData for this location for the reporting period.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpSummaryValueRow CurrentNoxRateSummaryValueRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_NOX_Rate_Summary_Value_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpSummaryValueRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_NOX_Rate_Summary_Value_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_NOX_Rate_Summary_Value_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// the DerivedHourlyValueData record currently being evaluated with parameter NOXR
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueNoxrRow CurrentNoxrDerivedHourlyRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_NoxR_Derived_Hourly_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueNoxrRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_NoxR_Derived_Hourly_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_NoxR_Derived_Hourly_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The average value of the  NOx emission rate during the previous and subsequent measured hour before and measured hour after.
        /// </summary>
        public static decimal? CurrentNoxrHbhaValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Current_NOXR_HBHA_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_NOXR_HBHA_Value", value);
            }
        }
        
        /// <summary>
        /// Stores the Method Code for the MonitoringMethod record that is active for NOx Emission Rate during the current time period
        /// </summary>
        public static string CurrentNoxrMethodCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_NOxR_Method_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_NOxR_Method_Code", value);
            }
        }
        
        /// <summary>
        /// Used for HOURMHV-30 result pluging and indicates the problem max value source.
        /// </summary>
        public static string CurrentNoxrPrimaryOrPrimaryBypassMhvMaxValueDescription
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_NOxR_Primary_Or_Primary_Bypass_MHV_Max_Value_Description")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_NOxR_Primary_Or_Primary_Bypass_MHV_Max_Value_Description", value);
            }
        }
        
        /// <summary>
        /// Stores data for MHV records that contain MODC 47 or 48.  The data supports columns used in the Current MHV Record check parameter, but adds additional infomration to support check processing.
        ///
        ///MODC 47 and 48 are used with combined-cycle turbines with primary and primary bypass stacks reported as systems in a single stack.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.NoxrPrimaryAndPrimaryBypassMhv CurrentNoxrPrimaryOrPrimaryBypassMhvRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_NOXR_Primary_Or_Primary_Bypass_MHV_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.NoxrPrimaryAndPrimaryBypassMhv(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_NOXR_Primary_Or_Primary_Bypass_MHV_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_NOXR_Primary_Or_Primary_Bypass_MHV_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Bias Adjustment Factor from the most recent valid RATA test for the NOx Emission Rate System
        ///
        ///Field to be updated: Current DHV Record.ApplicableBiasAdjustmentFactor
        ///
        /// </summary>
        public static decimal? CurrentNoxSystemBaf
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Current_NOX_System_Baf")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_NOX_System_Baf", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the NOX system in the current NOXR DerivedHourlyValueData record is valid.
        /// </summary>
        public static bool? CurrentNoxSystemStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Current_NOX_System_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_NOX_System_Status", value);
            }
        }
        
        /// <summary>
        /// The record in MonitorHourlyValueData with parameter "O2C" and Moisture Basis of "D" or null with a missing data MODC when there is also a measured data record.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueRow CurrentO2DryMissingDataMonitorHourlyRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_O2_Dry_Missing_Data_Monitor_Hourly_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_O2_Dry_Missing_Data_Monitor_Hourly_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_O2_Dry_Missing_Data_Monitor_Hourly_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The record in MonitorHourlyValueData with parameter "O2" and Moisture Basis of "D" currently being evaluated
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueO2DryRow CurrentO2DryMonitorHourlyRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_O2_Dry_Monitor_Hourly_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueO2DryRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_O2_Dry_Monitor_Hourly_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_O2_Dry_Monitor_Hourly_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The record in MonitorHourlyValueData with parameter "O2C" and Moisture Basis of "W" or null with a missing data MODC when there is also a measured data record.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueRow CurrentO2WetMissingDataMonitorHourlyRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_O2_Wet_Missing_Data_Monitor_Hourly_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_O2_Wet_Missing_Data_Monitor_Hourly_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_O2_Wet_Missing_Data_Monitor_Hourly_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The record in MonitorHourlyValueData with parameter "O2" and Moisture Basis of "w" currently being evaluated
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueO2WetRow CurrentO2WetMonitorHourlyRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_O2_Wet_Monitor_Hourly_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueO2WetRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_O2_Wet_Monitor_Hourly_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_O2_Wet_Monitor_Hourly_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current operating date.  This parameter is set by the process and not a check.
        /// </summary>
        public static DateTime? CurrentOperatingDate
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("Current_Operating_Date")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Operating_Date", value);
            }
        }
        
        /// <summary>
        /// The current operating date and hour.
        ///
        ///This parameter is set by the process and not a check.
        /// </summary>
        public static DateTime? CurrentOperatingDatehour
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("Current_Operating_DateHour")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Operating_DateHour", value);
            }
        }
        
        /// <summary>
        /// The current operating hour.  This parameter is set by the process and not a check.
        /// </summary>
        public static int? CurrentOperatingHour
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Current_Operating_Hour")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Operating_Hour", value);
            }
        }
        
        /// <summary>
        /// The portion of the hour (in the range [0.0, 1.0] ) that the current location was operating during the hour currently being evaluated.  The value comes from the Operating Time of the Current Hourly Op Record
        /// </summary>
        public static decimal? CurrentOperatingTime
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Current_Operating_Time")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Operating_Time", value);
            }
        }
        
        /// <summary>
        /// The OPHOURS record from SummaryValueData for this location for the reporting period.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemSummaryValueRow CurrentOpHoursSummaryValueRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_Op_Hours_Summary_Value_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemSummaryValueRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_Op_Hours_Summary_Value_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_Op_Hours_Summary_Value_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The OPTIME record from SummaryValueData for this location for the reporting period.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemSummaryValueRow CurrentOpTimeSummaryValueRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_Op_Time_Summary_Value_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemSummaryValueRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_Op_Time_Summary_Value_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_Op_Time_Summary_Value_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Stores the current PEI test status as part of the Appendix D status checks.
        /// </summary>
        public static string CurrentPeiStatus
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_PEI_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_PEI_Status", value);
            }
        }
        
        /// <summary>
        /// Stores the current RATA status throughout the RATA Status checks.
        /// </summary>
        public static string CurrentRataStatus
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Current_RATA_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_RATA_Status", value);
            }
        }
        
        /// <summary>
        /// The Current Reporting Period (or the reporting period for the first day) being evaluated for emissions.
        /// </summary>
        public static int? CurrentReportingPeriod
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Current_Reporting_Period")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Reporting_Period", value);
            }
        }
        
        /// <summary>
        /// A date value without a time component that indicates the first day of the current quarter
        /// </summary>
        public static DateTime? CurrentReportingPeriodBeginDate
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("Current_Reporting_Period_Begin_Date")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Reporting_Period_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// A date/time value indicating the first hour of the current quarter.
        /// </summary>
        public static DateTime? CurrentReportingPeriodBeginHour
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("Current_Reporting_Period_Begin_Hour")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Reporting_Period_Begin_Hour", value);
            }
        }
        
        /// <summary>
        /// A date value without a time component that indicates the last day of the current quarter.
        /// </summary>
        public static DateTime? CurrentReportingPeriodEndDate
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("Current_Reporting_Period_End_Date")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Reporting_Period_End_Date", value);
            }
        }
        
        /// <summary>
        /// A date/time value indicating the last hour of the current quarter.
        /// </summary>
        public static DateTime? CurrentReportingPeriodEndHour
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("Current_Reporting_Period_End_Hour")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Reporting_Period_End_Hour", value);
            }
        }
        
        /// <summary>
        /// The object representing the current reporting period.
        /// </summary>
        public static cReportingPeriod CurrentReportingPeriodObject
        {
            get
            {
                return ((cReportingPeriod)(EmParameters.GetCheckParameter("Current_Reporting_Period_Object")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Reporting_Period_Object", value);
            }
        }
        
        /// <summary>
        /// The quarter of the Current Reporting Period (or the reporting period for the first day) being evaluated for emissions.
        ///
        ///Set from Category.CheckEngine.RptPeriodBeganQuarter
        /// </summary>
        public static int? CurrentReportingPeriodQuarter
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Current_Reporting_Period_Quarter")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Reporting_Period_Quarter", value);
            }
        }
        
        /// <summary>
        /// The year of the Current Reporting Period (or the reporting period for the first day) being evaluated for emissions.
        /// </summary>
        public static int? CurrentReportingPeriodYear
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Current_Reporting_Period_Year")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Reporting_Period_Year", value);
            }
        }
        
        /// <summary>
        /// The current HourlyParamFuelFlow record for SO2 for the current fuel flow system in the current hour
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyParamFuelFlowRow CurrentSo2HpffRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_SO2_HPFF_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyParamFuelFlowRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_SO2_HPFF_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_SO2_HPFF_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current SO2 Concentration record from MonitorHourlyValueData for this location at the Current Hour
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueSo2cRow CurrentSo2MonitorHourlyRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_SO2_Monitor_Hourly_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueSo2cRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_SO2_Monitor_Hourly_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_SO2_Monitor_Hourly_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The SO2M record from SummaryValueData for this location for the reporting period.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemSummaryValueRow CurrentSo2SummaryValueRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_SO2_Summary_Value_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemSummaryValueRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_SO2_Summary_Value_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_SO2_Summary_Value_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// the Bias Adjustment Factor associated with the SO2 Monitoring System in use during the current hour
        ///
        ///Field to be updated: Current MHV Record.ApplicableBiasAdjustmentFactor
        /// </summary>
        public static decimal? CurrentSo2SystemBaf
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Current_SO2_System_BAF")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_SO2_System_BAF", value);
            }
        }
        
        /// <summary>
        /// The current HourlyParamFuelFlow record for SULFUR for the current fuel flow system in the current hour
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyParamFuelFlowRow CurrentSulfurRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_Sulfur_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyParamFuelFlowRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_Sulfur_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_Sulfur_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The number of units associated with the current monitoring plan.
        /// </summary>
        public static int? CurrentUnitCount
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Current_Unit_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Unit_Count", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the current unit participates in the Acid Rain Program
        /// </summary>
        public static bool? CurrentUnitIsArp
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Current_Unit_Is_Arp")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Unit_Is_Arp", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the current unit is defined as a Peaking Unit
        /// </summary>
        public static bool? CurrentUnitIsPeaking
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Current_Unit_is_Peaking")));
            }
            set
            {
                EmParameters.SetCheckParameter("Current_Unit_is_Peaking", value);
            }
        }
        
        /// <summary>
        /// Contains the current Weekly Integrity Test record.
        ///
        ///Used in emission report evaluation.
        ///
        ///Set in the processing loop from the "
        ///
        ///* WEEKLY_SYS_INTEGRITY_ID
        ///* WEEKLY_TEST_SUM_ID
        ///* ORIS_CODE
        ///* LOCATION_IDENTIFIER
        ///* TEST_DATETIME (combination of TEST_DATE, TEST_HOUR and TEST_MINUTE)
        ///* TEST_DATE
        ///* TEST_HOUR
        ///* TEST_MIN
        ///* REF_VALUE
        ///* MEASURED_VALUE
        ///* SYSTEM_INTEGRITY_ERROR
        ///* APS_IND
        ///* CALC_SYSTEM_INTEGRITY_ERROR
        ///* CALC_APS_IND
        ///* MON_LOC_ID
        ///* RPT_PERIOD_ID
        ///
        ///
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.WeeklySystemIntegrity CurrentWeeklySystemIntegrityTest
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_Weekly_System_Integrity_Test")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.WeeklySystemIntegrity(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_Weekly_System_Integrity_Test", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_Weekly_System_Integrity_Test", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Contains the current Weekly Test Summary record.
        ///
        ///Used in emission report evaluation.
        ///
        ///Set in the processing loop from the "
        ///
        ///* WEEKLY_TEST_SUM_ID
        ///* ORIS_CODE
        ///* LOCATION_IDENTIFIER
        ///* TEST_TYPE_CD
        ///* SYSTEM_IDENTIFIER
        ///* SYSTEM_TYPE_CD
        ///* COMPONENT_IDENTIFIER
        ///* COMPONENT_TYPE_CD
        ///* TEST_DATETIME (combination of TEST_DATE, TEST_HOUR and TEST_MINUTE)
        ///* TEST_DATE
        ///* TEST_HOUR
        ///* TEST_MIN
        ///* GAS_LEVEL_CD
        ///* SPAN_SCALE_CD
        ///* TEST_RESULT_CD
        ///* CALC_TEST_RESULT_CD
        ///* MON_LOC_ID
        ///* RPT_PERIOD_ID
        ///* MON_SYS_ID
        ///* COMPONENT_ID
        ///
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.WeeklyTestSummary CurrentWeeklyTestSummary
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Current_Weekly_Test_Summary")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.WeeklyTestSummary(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Current_Weekly_Test_Summary", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Current_Weekly_Test_Summary", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the test was performed when the unit was operating.
        ///
        ///Field to be updated: Current Daily Calibration Test.CalcOnlineOfflineInd
        /// </summary>
        public static int? DailyCalCalcOnlineInd
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Daily_Cal_Calc_Online_Ind")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Cal_Calc_Online_Ind", value);
            }
        }
        
        /// <summary>
        /// The test result code of a daily calibration test as determined by the evaluation
        ///
        ///Field to be updated: Current Daily Calibration Test.CalcTestResultCd
        /// </summary>
        public static string DailyCalCalcResult
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Daily_Cal_Calc_Result")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Cal_Calc_Result", value);
            }
        }
        
        /// <summary>
        /// Indicates if the component tested in the daily calibration test has a valid component type.
        /// </summary>
        public static bool? DailyCalComponentTypeValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Daily_Cal_Component_Type_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Cal_Component_Type_Valid", value);
            }
        }
        
        /// <summary>
        /// The date of the earliest failed injection in a daily calibration test.
        /// </summary>
        public static DateTime? DailyCalFailDate
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("Daily_Cal_Fail_Date")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Cal_Fail_Date", value);
            }
        }
        
        /// <summary>
        /// The hour of the earliest failed injection in a daily calibration test.
        /// </summary>
        public static int? DailyCalFailHour
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Daily_Cal_Fail_Hour")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Cal_Fail_Hour", value);
            }
        }
        
        /// <summary>
        /// Indicates whether Daily Calibration Supp Data exists and was loaded for the previous quarter.
        /// </summary>
        public static bool? DailyCalibrationSuppDataExists
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Daily_Calibration_Supp_Data_Exists")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Calibration_Supp_Data_Exists", value);
            }
        }
        
        /// <summary>
        /// Indicates if all the injection times of a daily calibration test are valid.
        /// </summary>
        public static bool? DailyCalInjectionTimesValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Daily_Cal_Injection_Times_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Cal_Injection_Times_Valid", value);
            }
        }
        
        /// <summary>
        /// The date that the PGVP rule was published.
        /// </summary>
        public static DateTime? DailyCalPgvpRuleDate
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("Daily_Cal_PGVP_Rule_Date")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Cal_PGVP_Rule_Date", value);
            }
        }
        
        /// <summary>
        /// Indicates if span scale of a test is a valid code.
        /// </summary>
        public static bool? DailyCalSpanScaleValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Daily_Cal_Span_Scale_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Cal_Span_Scale_Valid", value);
            }
        }
        
        /// <summary>
        /// The span value for the component type of the test according to the monitoring plan.
        /// </summary>
        public static decimal? DailyCalSpanValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Daily_Cal_Span_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Cal_Span_Value", value);
            }
        }
        
        /// <summary>
        /// Indicates if an MHV record requires the Daily Calibration Status Evaluation.
        /// </summary>
        public static bool? DailyCalStatusRequired
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Daily_Cal_Status_Required")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Cal_Status_Required", value);
            }
        }
        
        /// <summary>
        /// Indicates that the upscale gas level code of a daily calibration test is valid.
        /// </summary>
        public static bool? DailyCalUpscaleGasLevelValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Daily_Cal_Upscale_Gas_Level_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Cal_Upscale_Gas_Level_Valid", value);
            }
        }
        
        /// <summary>
        /// The recalculated APS indicator for the upscale injection.
        ///
        ///Field to be updated: Current Daily Calibration Test.CalcUpscaleAPSInd
        /// </summary>
        public static int? DailyCalUpscaleInjectionCalcApsIndicator
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Daily_Cal_Upscale_Injection_Calc_APS_Indicator")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Cal_Upscale_Injection_Calc_APS_Indicator", value);
            }
        }
        
        /// <summary>
        /// The recalculated calibration error or difference for the upscale injection.
        ///
        ///Field to be updated: Current Daily Calibration Test.CalcUpscaleCalError
        /// </summary>
        public static decimal? DailyCalUpscaleInjectionCalcResult
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Daily_Cal_Upscale_Injection_Calc_Result")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Cal_Upscale_Injection_Calc_Result", value);
            }
        }
        
        /// <summary>
        /// Indicates if the upscale injection time of a daily calibration test is valid.
        /// </summary>
        public static bool? DailyCalUpscaleInjectionTimeValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Daily_Cal_Upscale_Injection_Time_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Cal_Upscale_Injection_Time_Valid", value);
            }
        }
        
        /// <summary>
        /// The recalculated APS indicator for the zero injection.
        ///
        ///Field to be updated: Current Daily Calibration Test.CalcZeroAPSInd
        /// </summary>
        public static int? DailyCalZeroInjectionCalcApsIndicator
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Daily_Cal_Zero_Injection_Calc_APS_Indicator")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Cal_Zero_Injection_Calc_APS_Indicator", value);
            }
        }
        
        /// <summary>
        /// The recalculated calibration error or difference for the zero injection.
        ///
        ///Field to be updated: Current Daily Calibration Test.CalcZeroCalError
        /// </summary>
        public static decimal? DailyCalZeroInjectionCalcResult
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Daily_Cal_Zero_Injection_Calc_Result")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Cal_Zero_Injection_Calc_Result", value);
            }
        }
        
        /// <summary>
        /// Dummy variable for leveling in the Daily Inteference Check Status category.
        /// </summary>
        public static bool? DailyIntNoPriorTestCheckIndicator
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Daily_Int_No_Prior_Test_Check_Indicator")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Int_No_Prior_Test_Check_Indicator", value);
            }
        }
        
        /// <summary>
        /// Indicator that a daily interference status check should be performed during the current hour.
        /// </summary>
        public static bool? DailyIntStatusRequired
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Daily_Int_Status_Required")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Int_Status_Required", value);
            }
        }
        
        /// <summary>
        /// This contains the result to use for Daily Interference checks.
        /// </summary>
        public static string DailyIntStatusResult
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Daily_Int_Status_Result")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Int_Status_Result", value);
            }
        }
        
        /// <summary>
        /// The total operating time for the day for the location.
        /// </summary>
        public static decimal? DailyOpTime
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Daily_Op_Time")));
            }
            set
            {
                EmParameters.SetCheckParameter("Daily_Op_Time", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the AdjustedHourlyValue in the current DerivedHourlyValueData record is valid.
        /// </summary>
        public static bool? DerivedHourlyAdjustedValueStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Derived_Hourly_Adjusted_Value_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Derived_Hourly_Adjusted_Value_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not to check all Derived Hourly records for a given hour
        /// </summary>
        public static bool? DerivedHourlyChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Derived_Hourly_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("Derived_Hourly_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the AdjustedHourlyValue in the DHV record for MODC 40 is valid.
        /// </summary>
        public static bool? DerivedHourlyDefaultStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Derived_Hourly_Default_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Derived_Hourly_Default_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the current equation code is valid for the formula in the DHV record.
        /// </summary>
        public static bool? DerivedHourlyEquationStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Derived_Hourly_Equation_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Derived_Hourly_Equation_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the FormulaID in the current DerivedHourlyValueData record is valid.
        /// </summary>
        public static bool? DerivedHourlyFormulaStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Derived_Hourly_Formula_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Derived_Hourly_Formula_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the use of the Missing Data Status MODCs were appropriate.
        /// </summary>
        public static bool? DerivedHourlyMissingDataStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Derived_Hourly_Missing_Data_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Derived_Hourly_Missing_Data_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the MODCCode in the current DerivedHourlyValueData record is valid.
        /// </summary>
        public static bool? DerivedHourlyModcStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Derived_Hourly_Modc_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Derived_Hourly_Modc_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not extraneous fields in the current DerivedHourlyValueData record are null.
        /// </summary>
        public static bool? DerivedHourlyNullStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Derived_Hourly_Null_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Derived_Hourly_Null_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the PercentAvailable in the current DerivedHourlyValueData record is valid.
        /// </summary>
        public static bool? DerivedHourlyPmaStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Derived_Hourly_Pma_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Derived_Hourly_Pma_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the MonitoringSystemID in the current DerivedHourlyValueData record is valid.
        /// </summary>
        public static bool? DerivedHourlySystemStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Derived_Hourly_System_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Derived_Hourly_System_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the UnadjustedHourlyValue in the current DerivedHourlyValueData record is consistent with the recalculated value.
        /// </summary>
        public static bool? DerivedHourlyUnadjustedCalculationStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Derived_Hourly_Unadjusted_Calculation_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Derived_Hourly_Unadjusted_Calculation_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the UnadjustedHourlyValue in the current DerivedHourlyValueData record is valid.
        /// </summary>
        public static bool? DerivedHourlyUnadjustedValueStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Derived_Hourly_Unadjusted_Value_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Derived_Hourly_Unadjusted_Value_Status", value);
            }
        }
        
        /// <summary>
        /// The Derived Hourly Value Records for the reporting period for a monitoring configuration.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueRow> DerivedHourlyValueRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Derived_Hourly_Value_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Derived_Hourly_Value_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Derived_Hourly_Value_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The CO2 or O2 Concentration value to be used in the Heat Input Calculation
        /// </summary>
        public static decimal? DiluentForHeatInput
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Diluent_For_Heat_Input")));
            }
            set
            {
                EmParameters.SetCheckParameter("Diluent_For_Heat_Input", value);
            }
        }
        
        /// <summary>
        /// Indicates whther or not a component is a dual range analyzer.  Used in the Linearity Status checks.
        /// </summary>
        public static bool? DualRangeStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Dual_Range_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Dual_Range_Status", value);
            }
        }
        
        /// <summary>
        /// Stores the first possible date that the location is expected to report.
        ///
        ///This is used by the Hourly QA Status checks.
        /// </summary>
        public static DateTime? EarliestLocationReportDate
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("Earliest_Location_Report_Date")));
            }
            set
            {
                EmParameters.SetCheckParameter("Earliest_Location_Report_Date", value);
            }
        }
        
        /// <summary>
        /// Records for EmissionComments for monitoring plan.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlySubmissionCommentRow> EmissionCommentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Emission_Comment_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlySubmissionCommentRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Emission_Comment_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Emission_Comment_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All quarterly emissions file record for the configuration whose emissions files is being evaluated.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemEmissionsRow> EmissionsFileRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Emissions_File_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemEmissionsRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Emissions_File_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Emissions_File_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// A list of parameters for which the quarterly reported values are different from the calculated value but within the tolerance.
        /// </summary>
        public static string EmissionsToleranceDeviators
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Emissions_Tolerance_Deviators")));
            }
            set
            {
                EmParameters.SetCheckParameter("Emissions_Tolerance_Deviators", value);
            }
        }
        
        /// <summary>
        /// Program records which apply to the monitoring plan location.
        ///
        ///For a unit, this is the Unit Program records for the unit.
        ///
        ///For a stack or pipe, this is the Unit Program records for all units linked to the stack or pipe via Unit Stack Configuration records.  The  UnitMonitorCertStartDate for the location program record should be the later of the UnitMonitorCertStartDate in the Unit Program record and the StartDate in the Unit Stack Configuration record.  The  EndDate for the location program record should be the earlier of the EndDate in the Unit Program record and the EndDate in the Unit Stack Configuration record.  (This is the Emissions version of Location Program Records
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpLocationProgramRow> EmLocationProgramRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("EM_Location_Program_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpLocationProgramRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("EM_Location_Program_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("EM_Location_Program_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The calculated result for the daily test.
        /// </summary>
        public static string EmTestCalcResult
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("EM_Test_Calc_Result")));
            }
            set
            {
                EmParameters.SetCheckParameter("EM_Test_Calc_Result", value);
            }
        }
        
        /// <summary>
        /// Indicates if the reported date of a daily emission test is valid.
        /// </summary>
        public static bool? EmTestDateValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("EM_Test_Date_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("EM_Test_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the reported hour of a daily emission test is valid.
        /// </summary>
        public static bool? EmTestHourValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("EM_Test_Hour_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("EM_Test_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the reported minute of a daily emission test is valid.
        /// </summary>
        public static bool? EmTestMinuteValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("EM_Test_Minute_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("EM_Test_Minute_Valid", value);
            }
        }
        
        /// <summary>
        /// Contains the UNIT_STACK_CONFIGURATION records for the locations associated with a specific emission report ( for both the MP and reporting period ).
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpUnitStackConfigurationRow> EmUnitStackConfigurationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("EM_Unit_Stack_Configuration_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpUnitStackConfigurationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("EM_Unit_Stack_Configuration_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("EM_Unit_Stack_Configuration_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Dummy parameter used to sort the checks for FLOW Rata Status
        /// </summary>
        public static bool? EvaluateMultiLevelRata
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Evaluate_Multi_Level_RATA")));
            }
            set
            {
                EmParameters.SetCheckParameter("Evaluate_Multi_Level_RATA", value);
            }
        }
        
        /// <summary>
        /// Indicates if the upscale injection in the daily calibration test should be evaluated.
        /// </summary>
        public static bool? EvaluateUpscaleInjection
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Evaluate_Upscale_Injection")));
            }
            set
            {
                EmParameters.SetCheckParameter("Evaluate_Upscale_Injection", value);
            }
        }
        
        /// <summary>
        /// Indicates if the zero injection in the daily calibration test should be evaluated.
        /// </summary>
        public static bool? EvaluateZeroInjection
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Evaluate_Zero_Injection")));
            }
            set
            {
                EmParameters.SetCheckParameter("Evaluate_Zero_Injection", value);
            }
        }
        
        /// <summary>
        /// Text used in error message to indicate when tests expire.
        /// </summary>
        public static string ExpirationText
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Expiration_Text")));
            }
            set
            {
                EmParameters.SetCheckParameter("Expiration_Text", value);
            }
        }
        
        /// <summary>
        /// A list of systems or fuels with their most recent 3-level RATAs, Appendix E tests, or LME Unit Default tests expired at the end of the current reporting period.
        /// </summary>
        public static string ExpiredSystems
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Expired_Systems")));
            }
            set
            {
                EmParameters.SetCheckParameter("Expired_Systems", value);
            }
        }
        
        /// <summary>
        /// A list of systems or fuels with their most recent 3-level RATAs, Appendix E tests, or LME Unit Default tests expired at the end of the current reporting period.
        /// </summary>
        public static string ExpiringSystems
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Expiring_Systems")));
            }
            set
            {
                EmParameters.SetCheckParameter("Expiring_Systems", value);
            }
        }
        
        /// <summary>
        /// A highest active SO2R F23 default for the hour.
        /// </summary>
        public static decimal? F23DefaultMaxValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("F23_Default_Max_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("F23_Default_Max_Value", value);
            }
        }
        
        /// <summary>
        /// A lowest active SO2R F23 default for the hour.
        /// </summary>
        public static decimal? F23DefaultMinValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("F23_Default_Min_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("F23_Default_Min_Value", value);
            }
        }
        
        /// <summary>
        /// A default value to be used for SO2R in F23 calculations.
        /// </summary>
        public static decimal? F23DefaultValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("F23_Default_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("F23_Default_Value", value);
            }
        }
        
        /// <summary>
        /// The SO2R F23 Monitor Default records by a specific hour and location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorDefaultSo2rF23Row> F23MonitorDefaultRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("F23_Monitor_Default_Records_by_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorDefaultSo2rF23Row>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("F23_Monitor_Default_Records_by_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("F23_Monitor_Default_Records_by_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains the Flow-to-Load Check rows associated with a particular monitoring plan.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow> F2lCheckRecordsForQaStatus
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("F2L_Check_Records_For_QA_Status")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("F2L_Check_Records_For_QA_Status", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("F2L_Check_Records_For_QA_Status", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains QA Certification Event Records with an event code of '312', which is for flow-to-load.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow> F2lQaCertificationEventRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("F2L_QA_Certification_Event_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("F2L_QA_Certification_Event_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("F2L_QA_Certification_Event_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains the earliest valid required test (RATA) for a flow-to-load check.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow F2lStatusEarliestValidRequiredTest
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("F2L_Status_Earliest_Valid_Required_Test")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("F2L_Status_Earliest_Valid_Required_Test", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("F2L_Status_Earliest_Valid_Required_Test", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Indicates that the most recent QA Cert Event row for Flow-to-Load requires a performing an Abbreviated Flow-to-Load
        /// </summary>
        public static bool? F2lStatusEventRequiresAbbreviatedCheck
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("F2L_Status_Event_Requires_Abbreviated_Check")));
            }
            set
            {
                EmParameters.SetCheckParameter("F2L_Status_Event_Requires_Abbreviated_Check", value);
            }
        }
        
        /// <summary>
        /// Indicates that the most recent QA Cert Event row for Flow-to-Load requires a performing a RATA.
        /// </summary>
        public static bool? F2lStatusEventRequiresRata
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("F2L_Status_Event_Requires_Rata")));
            }
            set
            {
                EmParameters.SetCheckParameter("F2L_Status_Event_Requires_Rata", value);
            }
        }
        
        /// <summary>
        /// The data row contains the most recent RATA after a flow-to-load check and before the current hour.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow F2lStatusInterveningRata
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("F2L_Status_Intervening_Rata")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("F2L_Status_Intervening_Rata", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("F2L_Status_Intervening_Rata", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Contains list of missing operating quarters needed to count conditional data hours.
        /// </summary>
        public static string F2lStatusMissingOpDataInfo
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("F2L_Status_Missing_Op_Data_Info")));
            }
            set
            {
                EmParameters.SetCheckParameter("F2L_Status_Missing_Op_Data_Info", value);
            }
        }
        
        /// <summary>
        /// This parameter contains the most recent QA operating quarter before the 'current' hour.  The quarter is stored as null if the quarter is not set, -1 if an error occurred while setting the quarter, and the year multiplied by 4 plus the quarter minus 1 if the quarter was set.
        /// </summary>
        public static int? F2lStatusPriorTestRequiredQuarter
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("F2L_Status_Prior_Test_Required_Quarter")));
            }
            set
            {
                EmParameters.SetCheckParameter("F2L_Status_Prior_Test_Required_Quarter", value);
            }
        }
        
        /// <summary>
        /// Contains a list of quarters that are missing 
        /// </summary>
        public static string F2lStatusPriorTestRequiredQuarterMissingOpData
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("F2L_Status_Prior_Test_Required_Quarter_Missing_Op_Data")));
            }
            set
            {
                EmParameters.SetCheckParameter("F2L_Status_Prior_Test_Required_Quarter_Missing_Op_Data", value);
            }
        }
        
        /// <summary>
        /// This parameter indeicates whether the most recent QA operating quarter before the 'current' hour was determined using System Op Supp Data, not location-level Op Supp Data.  The value is null if the quarter was not set.
        /// </summary>
        public static bool? F2lStatusPriorTestRequiredQuarterSetFromSystem
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("F2L_Status_Prior_Test_Required_Quarter_Set_From_System")));
            }
            set
            {
                EmParameters.SetCheckParameter("F2L_Status_Prior_Test_Required_Quarter_Set_From_System", value);
            }
        }
        
        /// <summary>
        /// Contains the most recent Flow-to-Load QA Cert Event row after a particular flow-to-load check and before the current hour.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow F2lStatusQaCertEvent
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("F2L_Status_Qa_Cert_Event ")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("F2L_Status_Qa_Cert_Event ", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("F2L_Status_Qa_Cert_Event ", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether flow-to-load status checks must run.
        /// </summary>
        public static bool? F2lStatusRequired
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("F2L_Status_Required")));
            }
            set
            {
                EmParameters.SetCheckParameter("F2L_Status_Required", value);
            }
        }
        
        /// <summary>
        /// This contains the result to use for Flow-to-Load Status checks.
        /// </summary>
        public static string F2lStatusResult
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("F2L_Status_Result")));
            }
            set
            {
                EmParameters.SetCheckParameter("F2L_Status_Result", value);
            }
        }
        
        /// <summary>
        /// In some cases the Flow-to-Load Status checks can determine the result for each hour once.  This dictionary will contain the system id if the checks have determined whether a single result applies to every hour.  If the lookup value is null then a single result does not apply to every hour, otherwise the lookup value is the flow-to-load check for every hour.
        /// </summary>
        public static object F2lStatusSystemCheckDictionary
        {
            get
            {
                return ((object)(EmParameters.GetCheckParameter("F2L_Status_System_Check_Dictionary")));
            }
            set
            {
                EmParameters.SetCheckParameter("F2L_Status_System_Check_Dictionary", value);
            }
        }
        
        /// <summary>
        /// In some cases the Flow-to-Load Status checks can determine the missing op data for each hour once.  This dictionary will contain the system id if the checks have determined whether a single set of missing op data applies to every hour.  If the lookup value is null then a single set does not apply to every hour, otherwise the lookup value icontains the missing op data for every hour.
        /// </summary>
        public static object F2lStatusSystemMissingOpDictionary
        {
            get
            {
                return ((object)(EmParameters.GetCheckParameter("F2L_Status_System_Missing_Op_Dictionary")));
            }
            set
            {
                EmParameters.SetCheckParameter("F2L_Status_System_Missing_Op_Dictionary", value);
            }
        }
        
        /// <summary>
        /// In some cases the Flow-to-Load Status checks can determine the result for each hour once.  This dictionary will contain the system id if the checks have determined whether a single result applies to every hour.  If the lookup value is null then a single result does not apply to every hour, otherwise the lookup value is the result for every hour.
        /// </summary>
        public static object F2lStatusSystemResultDictionary
        {
            get
            {
                return ((object)(EmParameters.GetCheckParameter("F2L_Status_System_Result_Dictionary")));
            }
            set
            {
                EmParameters.SetCheckParameter("F2L_Status_System_Result_Dictionary", value);
            }
        }
        
        /// <summary>
        /// The monitor location records for the facility of the records being evaluated.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorLocationRow> FacilityLocationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Facility_Location_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorLocationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Facility_Location_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Facility_Location_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Operating Supp Data Records for the facility
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpOpSuppDataRow> FacilityOperatingSuppDataRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Facility_Operating_Supp_Data_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpOpSuppDataRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Facility_Operating_Supp_Data_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Facility_Operating_Supp_Data_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// List of all UNIT_FUEL records for the facility.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpLocationFuelRow> FacilityUnitFuelRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Facility_Unit_Fuel_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpLocationFuelRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Facility_Unit_Fuel_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Facility_Unit_Fuel_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The maximum value allowed for an FC FACTOR
        /// </summary>
        public static bool? FcFactorMaximum
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Fc_Factor_Maximum")));
            }
            set
            {
                EmParameters.SetCheckParameter("Fc_Factor_Maximum", value);
            }
        }
        
        /// <summary>
        /// The minimum value allowed for an FC FACTOR
        /// </summary>
        public static decimal? FcFactorMinimum
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Fc_Factor_Minimum")));
            }
            set
            {
                EmParameters.SetCheckParameter("Fc_Factor_Minimum", value);
            }
        }
        
        /// <summary>
        /// Indicates if an Fc Factor is needed in a NOXR, HI, or CO2C calculation.
        /// </summary>
        public static bool? FcFactorNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("FC_Factor_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("FC_Factor_Needed", value);
            }
        }
        
        /// <summary>
        /// The maximum value allowed in the expected range for FD Factor
        /// </summary>
        public static decimal? FdFactorMaximum
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Fd_Factor_Maximum")));
            }
            set
            {
                EmParameters.SetCheckParameter("Fd_Factor_Maximum", value);
            }
        }
        
        /// <summary>
        /// The minimum value allowed in the expected range for FD Factor
        /// </summary>
        public static decimal? FdFactorMinimum
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Fd_Factor_Minimum")));
            }
            set
            {
                EmParameters.SetCheckParameter("Fd_Factor_Minimum", value);
            }
        }
        
        /// <summary>
        /// Indicates if an Fd Factor is needed in a NOXR, HI, or CO2C calculation.
        /// </summary>
        public static bool? FdFactorNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("FD_Factor_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("FD_Factor_Needed", value);
            }
        }
        
        /// <summary>
        /// The first year/quarter to use for the FF2L extension checking for Accuracy status determination as part of the Appendix D status evaluation.
        /// </summary>
        public static string Ff2lAccuracyBeginYearQuarter
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("FF2L_Accuracy_Begin_Year_Quarter")));
            }
            set
            {
                EmParameters.SetCheckParameter("FF2L_Accuracy_Begin_Year_Quarter", value);
            }
        }
        
        /// <summary>
        /// The latest accuracy test end date, installation date, and PEI date for all components in the system for determining FF2L test eligibility for extending the accuracy test deadline.
        /// </summary>
        public static DateTime? Ff2lAccuracyCheckDate
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("FF2L_Accuracy_Check_Date")));
            }
            set
            {
                EmParameters.SetCheckParameter("FF2L_Accuracy_Check_Date", value);
            }
        }
        
        /// <summary>
        /// Indicates of the fuel flow component record is eligible to extend the accuracy test expiration date using fuel flow to load tests.
        /// </summary>
        public static bool? Ff2lAccuracyEligible
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("FF2L_Accuracy_Eligible")));
            }
            set
            {
                EmParameters.SetCheckParameter("FF2L_Accuracy_Eligible", value);
            }
        }
        
        /// <summary>
        /// The last year/quarter to use for the FF2L extension checking for Accuracy status determination as part of the Appendix D status evaluation.
        /// </summary>
        public static string Ff2lAccuracyEndYearQuarter
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("FF2L_Accuracy_End_Year_Quarter")));
            }
            set
            {
                EmParameters.SetCheckParameter("FF2L_Accuracy_End_Year_Quarter", value);
            }
        }
        
        /// <summary>
        /// All fuel flow to load baseline data (FF2LBAS) records for the location.  Used by the QA Status evaluation.
        ///
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow> Ff2lBaselineRecordsByLocationForQaStatus
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("FF2L_Baseline_Records_By_Location_For_QA_Status")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("FF2L_Baseline_Records_By_Location_For_QA_Status", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("FF2L_Baseline_Records_By_Location_For_QA_Status", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The first year/quarter to use for the FF2L extension checking for PEI status determination as part of the Appendix D status evaluation.
        /// </summary>
        public static string Ff2lPeiBeginYearQuarter
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("FF2L_PEI_Begin_Year_Quarter")));
            }
            set
            {
                EmParameters.SetCheckParameter("FF2L_PEI_Begin_Year_Quarter", value);
            }
        }
        
        /// <summary>
        /// The latest accuracy test end date, installation date, and PEI date for all components in the system for determining FF2L test eligibility for extending the PEI deadline.
        /// </summary>
        public static DateTime? Ff2lPeiCheckDate
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("FF2L_PEI_Check_Date")));
            }
            set
            {
                EmParameters.SetCheckParameter("FF2L_PEI_Check_Date", value);
            }
        }
        
        /// <summary>
        /// Indicates of the fuel flow component record is eligible to extend the PEI test expiration date using fuel flow to load tests.
        /// </summary>
        public static bool? Ff2lPeiEligible
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("FF2L_PEI_Eligible")));
            }
            set
            {
                EmParameters.SetCheckParameter("FF2L_PEI_Eligible", value);
            }
        }
        
        /// <summary>
        /// The last year/quarter to use for the FF2L extension checking for PEI status determination as part of the Appendix D status evaluation.
        /// </summary>
        public static string Ff2lPeiEndYearQuarter
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("FF2L_PEI_End_Year_Quarter")));
            }
            set
            {
                EmParameters.SetCheckParameter("FF2L_PEI_End_Year_Quarter", value);
            }
        }
        
        /// <summary>
        /// All fuel flow to load test records for the location.  Used by the QA Status evaluation.
        ///
        ///FF2LTST tests.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow> Ff2lTestRecordsByLocationForQaStatus
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("FF2L_Test_Records_By_Location_For_QA_Status")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("FF2L_Test_Records_By_Location_For_QA_Status", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("FF2L_Test_Records_By_Location_For_QA_Status", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Cross Check table storing expected minimum and maximum values for F-Factors
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FFactorRangeChecksRow> FFactorRangeCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("F-factor_Range_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FFactorRangeChecksRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("F-factor_Range_Cross_Check_Table", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("F-factor_Range_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains the factor multiplied by the result of the MATS rate formula to produce the the actual RE or RH values.
        /// </summary>
        public static decimal? FinalConversionFactor
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Final_Conversion_Factor")));
            }
            set
            {
                EmParameters.SetCheckParameter("Final_Conversion_Factor", value);
            }
        }
        
        /// <summary>
        /// The date of the first hourly operating data record for the location.
        /// </summary>
        public static DateTime? FirstDayOfOperation
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("First_Day_of_Operation")));
            }
            set
            {
                EmParameters.SetCheckParameter("First_Day_of_Operation", value);
            }
        }
        
        /// <summary>
        /// Reporting Period object representing the ECMPS First Reporitng Period of a facility.
        /// </summary>
        public static object FirstEcmpsReportingPeriodObject
        {
            get
            {
                return ((object)(EmParameters.GetCheckParameter("First_ECMPS_Reporting_Period_Object")));
            }
            set
            {
                EmParameters.SetCheckParameter("First_ECMPS_Reporting_Period_Object", value);
            }
        }
        
        /// <summary>
        /// The hour of the first hourly operating data record for the location.
        /// </summary>
        public static int? FirstHourOfOperation
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("First_Hour_of_Operation")));
            }
            set
            {
                EmParameters.SetCheckParameter("First_Hour_of_Operation", value);
            }
        }
        
        /// <summary>
        /// Contains a list of Monitor System Component records for the current flow MHV record, that did not report a Component Id because the source is using Flow Averaging with multiple components.  The list contains the components used in the averaging.
        /// </summary>
        public static List<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemComponentRow> FlowAveragingComponentList
        {
            get
            {
                return ((List<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemComponentRow>)(EmParameters.GetCheckParameter("Flow_Averaging_Component_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("Flow_Averaging_Component_List", value);
            }
        }
        
        /// <summary>
        /// Contains the Monitor System Component record for one of two X-Pattern Flow monitoing systems  for the current flow MHV record.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemComponentRow FlowAveragingComponentRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Flow_Averaging_Component_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemComponentRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Flow_Averaging_Component_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Flow_Averaging_Component_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The value calculated for Stack Flow based on the Bias Adjustment Factor
        ///
        ///Field to be updated: Current MHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? FlowCalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("FLOW_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("FLOW_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// Indicates that a Flow MHV row is allowed, but not required.
        ///
        ///This parameter is initialized to false in the HourOp-3 and used in HourOp-43.  HourOp-43.  Initially, only MatsHod-1 resets the value of this parameter to true. 
        /// </summary>
        public static bool? FlowMhvOptionallyAllowed
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Flow_MHV_Optionally_Allowed")));
            }
            set
            {
                EmParameters.SetCheckParameter("Flow_MHV_Optionally_Allowed", value);
            }
        }
        
        /// <summary>
        /// flag to indicate whether or not checks for Stack Flow Monitored Hourly Data need to run
        /// </summary>
        public static bool? FlowMonitorHourlyChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Flow_Monitor_Hourly_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("Flow_Monitor_Hourly_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// the number of MonitorHourlyValueData records in the current hour that have the parameter_cd = "FLOW"
        /// </summary>
        public static int? FlowMonitorHourlyCount
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Flow_Monitor_Hourly_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("Flow_Monitor_Hourly_Count", value);
            }
        }
        
        /// <summary>
        /// The Flow Monitor Hourly Value Records By Hour and Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueFlowRow> FlowMonitorHourlyValueRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Flow_Monitor_Hourly_Value_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueFlowRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Flow_Monitor_Hourly_Value_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Flow_Monitor_Hourly_Value_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Flag to indicate whether or not Part 75 Flow checks are needed. 
        /// </summary>
        public static bool? FlowNeededForPart75
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Flow_Needed_For_Part_75")));
            }
            set
            {
                EmParameters.SetCheckParameter("Flow_Needed_For_Part_75", value);
            }
        }
        
        /// <summary>
        /// Indicates that the Flow system has a special FLOWEXP RATA exemption.
        /// </summary>
        public static bool? FlowRataExemption
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Flow_RATA_Exemption")));
            }
            set
            {
                EmParameters.SetCheckParameter("Flow_RATA_Exemption", value);
            }
        }
        
        /// <summary>
        /// A array of flow systems that require 3-load RATA used during the reporting period for each location.
        ///
        ///Each array element represents a location in the current emission report and contains a comma delimited list of MON_SYS_ID.
        /// </summary>
        public static string FlowSystemIdArray
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("FLOW_System_ID_Array")));
            }
            set
            {
                EmParameters.SetCheckParameter("FLOW_System_ID_Array", value);
            }
        }
        
        /// <summary>
        /// Contains a comma delimited list of cylinder ids with the last id in a multiple id list separated by "AND".
        /// </summary>
        public static string FormattedCylinderIdList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Formatted_Cylinder_Id_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("Formatted_Cylinder_Id_List", value);
            }
        }
        
        /// <summary>
        /// A lookup table of Fuel codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.FuelCodeRow> FuelCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Fuel_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.FuelCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Fuel_Code_Lookup_Table", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Fuel_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// A single Monitor System Component Record that is being evaluated for Appendix D status purposes.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemComponentRow FuelFlowComponentRecordToCheck
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Fuel_Flow_Component_Record_to_Check")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemComponentRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Fuel_Flow_Component_Record_to_Check", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Fuel_Flow_Component_Record_to_Check", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// All active fuel records for a given location and day.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationFuelRow> FuelRecordsByDateAndLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Fuel_Records_By_Date_and_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationFuelRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Fuel_Records_By_Date_and_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Fuel_Records_By_Date_and_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Unit Fuel Records By Hour and Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationFuelRow> FuelRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Fuel_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationFuelRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Fuel_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Fuel_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// A list of FuelCodes in the HFF record for each location and hour.
        /// </summary>
        public static string FuelsUsedList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Fuels_Used_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("Fuels_Used_List", value);
            }
        }
        
        /// <summary>
        /// Establishes minimum and maximum possible values for oil density by fuel type
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FuelTypeRealityChecksForDensityRow> FuelTypeRealityChecksForDensityCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Fuel_Type_Reality_Checks_For_Density_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FuelTypeRealityChecksForDensityRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Fuel_Type_Reality_Checks_For_Density_Cross_Check_Table", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Fuel_Type_Reality_Checks_For_Density_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Table defining minimum and maximum expected FC FACTOR values for different fuel types.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FuelTypeRealityChecksForFcFactorRow> FuelTypeRealityChecksForFcFactorCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Fuel_Type_Reality_Checks_For_Fc_Factor_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FuelTypeRealityChecksForFcFactorRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Fuel_Type_Reality_Checks_For_Fc_Factor_Cross_Check_Table", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Fuel_Type_Reality_Checks_For_Fc_Factor_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Establishes minimum and maximum possible values for GCV by fuel type
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FuelTypeRealityChecksForGcvRow> FuelTypeRealityChecksForGcvCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Fuel_Type_Reality_Checks_for_GCV_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FuelTypeRealityChecksForGcvRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Fuel_Type_Reality_Checks_for_GCV_Cross_Check_Table", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Fuel_Type_Reality_Checks_for_GCV_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Minimum and Maximum allowed values for Sulfur Content by fuel type - critical error levels
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FuelTypeRealityChecksForSulfurRow> FuelTypeRealityChecksForSulfurContentCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Fuel_Type_Reality_Checks_For_Sulfur_Content_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FuelTypeRealityChecksForSulfurRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Fuel_Type_Reality_Checks_For_Sulfur_Content_Cross_Check_Table", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Fuel_Type_Reality_Checks_For_Sulfur_Content_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Establishes minimum and maximum Density values by fuel type - used for generating a non-critical error message
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FuelTypeWarningLevelsForDensityRow> FuelTypeWarningLevelsForDensityCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Fuel_Type_Warning_Levels_For_Density_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FuelTypeWarningLevelsForDensityRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Fuel_Type_Warning_Levels_For_Density_Cross_Check_Table", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Fuel_Type_Warning_Levels_For_Density_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Establishes minimum and maximum GCV values by fuel type - used for generating a non-critical error message
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FuelTypeWarningLevelsForGcvRow> FuelTypeWarningLevelsForGcvCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Fuel_Type_Warning_Levels_for_GCV_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FuelTypeWarningLevelsForGcvRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Fuel_Type_Warning_Levels_for_GCV_Cross_Check_Table", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Fuel_Type_Warning_Levels_for_GCV_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Minimum and Maximum expected values for Sulfur Content associated with a fuel type - warning levels
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FuelTypeWarningLevelsForSulfurRow> FuelTypeWarningLevelsForSulfurContentCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Fuel_Type_Warning_Levels_For_Sulfur_Content_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FuelTypeWarningLevelsForSulfurRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Fuel_Type_Warning_Levels_For_Sulfur_Content_Cross_Check_Table", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Fuel_Type_Warning_Levels_For_Sulfur_Content_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The maximum value allowed for an FW FACTOR
        /// </summary>
        public static decimal? FwFactorMaximum
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Fw_Factor_Maximum")));
            }
            set
            {
                EmParameters.SetCheckParameter("Fw_Factor_Maximum", value);
            }
        }
        
        /// <summary>
        /// The minimum value allowed for an FW FACTOR
        /// </summary>
        public static decimal? FwFactorMinimum
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Fw_Factor_Minimum")));
            }
            set
            {
                EmParameters.SetCheckParameter("Fw_Factor_Minimum", value);
            }
        }
        
        /// <summary>
        /// Indicates if an Fw Factor is needed in a NOXR calculation.
        /// </summary>
        public static bool? FwFactorNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("FW_Factor_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("FW_Factor_Needed", value);
            }
        }
        
        /// <summary>
        /// Lookup table of PGVP Gas Type Codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.GasTypeCodeRow> GasTypeCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Gas_Type_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.GasTypeCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Gas_Type_Code_Lookup_Table", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Gas_Type_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if LME records should be generated.
        /// </summary>
        public static bool? GenerateLme
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Generate_LME")));
            }
            set
            {
                EmParameters.SetCheckParameter("Generate_LME", value);
            }
        }
        
        /// <summary>
        /// The calculated H2O Percentage based on an equation code and O2 Monitored Values
        /// </summary>
        public static decimal? H2oCalculatedPercent
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("H2o_Calculated_Percent")));
            }
            set
            {
                EmParameters.SetCheckParameter("H2o_Calculated_Percent", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not a valid H2O Calculation was performed based on the H2O CEM Equation code and Monitored O2 values.  Note - the calculation may not have matched the reported value -- this parameter simply indicates whether or not it was possible to perform the calculation
        /// </summary>
        public static bool? H2oCalculationStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("H2o_Calculation_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("H2o_Calculation_Status", value);
            }
        }
        
        /// <summary>
        /// A code that references an equation in MonitoringFormulaData that will be used for calculations for the current record (specific to Parameter H2O)
        /// </summary>
        public static bool? H2oCemEquationCode
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("H2o_Cem_Equation_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("H2o_Cem_Equation_Code", value);
            }
        }
        
        /// <summary>
        /// A highest active H2O default for the hour.
        /// </summary>
        public static decimal? H2oDefaultMaxValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("H2O_Default_Max_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("H2O_Default_Max_Value", value);
            }
        }
        
        /// <summary>
        /// A lowest active H2O default for the hour.
        /// </summary>
        public static decimal? H2oDefaultMinValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("H2O_Default_Min_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("H2O_Default_Min_Value", value);
            }
        }
        
        /// <summary>
        /// A default value to be used for %H2O in calculations.
        /// </summary>
        public static decimal? H2oDefaultValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("H2O_Default_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("H2O_Default_Value", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not Derived Hourly H20 checks are needed  to support the current calculation
        /// </summary>
        public static bool? H2oDerivedHourlyChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("H2O_Derived_Hourly_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("H2O_Derived_Hourly_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// the number of DerivedHourlyValueData records in the current hour that have the parameter_cd = "H2O"
        /// </summary>
        public static int? H2oDerivedHourlyCount
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("H2O_Derived_Hourly_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("H2O_Derived_Hourly_Count", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not all DHV checks have passed for the current H2O record
        /// </summary>
        public static bool? H2oDerivedHourlyStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("H2O_Derived_Hourly_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("H2O_Derived_Hourly_Status", value);
            }
        }
        
        /// <summary>
        /// Resulting value when the H2O is calculated from O2 or determined from moisture default values.
        ///
        ///Field to be updated: Current DHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? H2oDhvCalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("H2O_DHV_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("H2O_DHV_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the DHV H2O MODC value used in calcultion checks to determine whether H2O was substituted and set in the H2O section of HOURDHV-13.
        /// </summary>
        public static string H2oDhvModc
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("H2O_DHV_MODC")));
            }
            set
            {
                EmParameters.SetCheckParameter("H2O_DHV_MODC", value);
            }
        }
        
        /// <summary>
        /// Indicates if active H2O Monitor Method entries for the current configuration during the current hour uses fuel-specific missing data approach
        /// </summary>
        public static bool? H2oFuelSpecificMissingData
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("H2O_Fuel_Specific_Missing_Data")));
            }
            set
            {
                EmParameters.SetCheckParameter("H2O_Fuel_Specific_Missing_Data", value);
            }
        }
        
        /// <summary>
        /// Indicates whether an H2O DHV record has a measured MODC.
        /// </summary>
        public static bool? H2oHasMeasuredDhvModc
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("H2O_Has_Measured_DHV_MODC")));
            }
            set
            {
                EmParameters.SetCheckParameter("H2O_Has_Measured_DHV_MODC", value);
            }
        }
        
        /// <summary>
        /// Defines the Method Code for the H2O Method that is active during the current hour
        /// </summary>
        public static string H2oMethodCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("H2O_Method_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("H2O_Method_Code", value);
            }
        }
        
        /// <summary>
        /// The percentage of H2O used in subsequent calculations for the current location during the current hour
        ///
        ///Field to be updated: Current MHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? H2oMhvCalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("H2O_MHV_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("H2O_MHV_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the MHV H2O MODC value used in calcultion checks to determine whether H2O was substituted and set in the H2O section of HOURMHV-8.
        /// </summary>
        public static string H2oMhvModc
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("H2O_MHV_MODC")));
            }
            set
            {
                EmParameters.SetCheckParameter("H2O_MHV_MODC", value);
            }
        }
        
        /// <summary>
        /// Indicates if the maximum or minimum H2O value is used for missing data.
        /// </summary>
        public static string H2oMissingDataApproach
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("H2O_Missing_Data_Approach")));
            }
            set
            {
                EmParameters.SetCheckParameter("H2O_Missing_Data_Approach", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not Monitor Hourly H20 checks are needed  to support the current calculation
        /// </summary>
        public static bool? H2oMonitorHourlyChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("H2O_Monitor_Hourly_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("H2O_Monitor_Hourly_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// the number of MonitorHourlyValueData records in the current hour that have the parameter_cd = "H2O"
        /// </summary>
        public static int? H2oMonitorHourlyCount
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("H2O_Monitor_Hourly_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("H2O_Monitor_Hourly_Count", value);
            }
        }
        
        /// <summary>
        /// The H2O Monitor Method records for a specific hour and location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodH2oRow> H2oMonitorMethodRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("H2O_Monitor_Method_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodH2oRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("H2O_Monitor_Method_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("H2O_Monitor_Method_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Reports the current effective H2O Percentage, regardless of whether it comes from a Monitor Hourly record or a Derived Hourly record
        /// </summary>
        public static decimal? H2oReportedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("H2O_Reported_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("H2O_Reported_Value", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the current Monitoring Method for Heat Input is Appendix D
        /// </summary>
        public static bool? HeatInputAppDMethodActiveForHour
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Heat_Input_App_D_Method_Active_For_Hour")));
            }
            set
            {
                EmParameters.SetCheckParameter("Heat_Input_App_D_Method_Active_For_Hour", value);
            }
        }
        
        /// <summary>
        /// The Equation Code associated with the formula record for the current Heat Input calculation
        /// </summary>
        public static string HeatInputCemEquationCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Heat_Input_CEM_Equation_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("Heat_Input_CEM_Equation_Code", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the current Monitoring Method for Heat Input is CEMs
        /// </summary>
        public static bool? HeatInputCemMethodActiveForHour
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Heat_Input_CEM_Method_Active_For_Hour")));
            }
            set
            {
                EmParameters.SetCheckParameter("Heat_Input_CEM_Method_Active_For_Hour", value);
            }
        }
        
        /// <summary>
        /// Indicates that NOx Mass is being calculated based on heat input, therefore heat input checks must be run in support of NOx Mass for the current hour
        /// </summary>
        public static bool? HeatInputChecksNeededForNoxMassCalc
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Heat_Input_Checks_Needed_for_NOx_Mass_Calc")));
            }
            set
            {
                EmParameters.SetCheckParameter("Heat_Input_Checks_Needed_for_NOx_Mass_Calc", value);
            }
        }
        
        /// <summary>
        /// Flag to indicate whether or not it is necessary to perform HI Derived Hourly checks at this location for the current hour
        /// </summary>
        public static bool? HeatInputDerivedChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Heat_Input_Derived_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("Heat_Input_Derived_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// refers to the number of DerivedHourlyDataValue records for Heat Input reported for the current location during the current hour
        /// </summary>
        public static bool? HeatInputDerivedHourlyCount
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Heat_Input_Derived_Hourly_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("Heat_Input_Derived_Hourly_Count", value);
            }
        }
        
        /// <summary>
        /// Indicates if active HI Monitor Method entries for the current configuration during the current hour uses fuel-specific missing data approach
        /// </summary>
        public static bool? HeatInputFuelSpecificMissingData
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Heat_Input_Fuel_Specific_Missing_Data")));
            }
            set
            {
                EmParameters.SetCheckParameter("Heat_Input_Fuel_Specific_Missing_Data", value);
            }
        }
        
        /// <summary>
        /// The first quarter in the current year of the reporting period when Heat Input method was active for the location.
        /// </summary>
        public static string HeatInputStartQuarter
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Heat_Input_Start_Quarter")));
            }
            set
            {
                EmParameters.SetCheckParameter("Heat_Input_Start_Quarter", value);
            }
        }
        
        /// <summary>
        /// The recalculated CO2 mass rate for the fuel.
        ///
        ///Field to be updated: Current CO2 HPFF Record.CalcParamValFuel
        /// </summary>
        public static decimal? HffCalcCo2
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("HFF_Calc_CO2")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_Calc_CO2", value);
            }
        }
        
        /// <summary>
        /// The recalculated heat input rate for the fuel.
        ///
        ///Field to be updated: Current HI HPFF Record.CalcParamValFuel
        /// </summary>
        public static decimal? HffCalcHiRate
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("HFF_Calc_HI_Rate")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_Calc_HI_Rate", value);
            }
        }
        
        /// <summary>
        /// The mass oil flow rate used in the calculation of subsequent values.
        ///
        ///Field to be updated: Current Fuel Flow Record.CalcMassFlowRate
        /// </summary>
        public static decimal? HffCalcMassOilRate
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("HFF_Calc_Mass_Oil_Rate")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_Calc_Mass_Oil_Rate", value);
            }
        }
        
        /// <summary>
        /// The recalculated SO2 mass rate for the fuel.
        ///
        ///Field to be updated: Current SO2 HPFF Record.CalcParamValFuel
        /// </summary>
        public static decimal? HffCalcSo2
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("HFF_Calc_SO2")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_Calc_SO2", value);
            }
        }
        
        /// <summary>
        /// The volumetric flow rate used in the calculation of subsequent values.
        ///
        ///Field to be updated: Current Fuel Flow Record.CalcVolumetricFlowRate
        /// </summary>
        public static decimal? HffCalcVolumetricRate
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("HFF_Calc_Volumetric_Rate")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_Calc_Volumetric_Rate", value);
            }
        }
        
        /// <summary>
        /// The density of oil used to recalculate mass oil flow.
        /// </summary>
        public static decimal? HffDensity
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("HFF_Density")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_Density", value);
            }
        }
        
        /// <summary>
        /// The Fc Factor used to recalculate CO2 mass rate.
        /// </summary>
        public static decimal? HffFcFactor
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("HFF_Fc_Factor")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_Fc_Factor", value);
            }
        }
        
        /// <summary>
        /// The IndicatorCode in the UnitFuel record for the fuel in the HFF record.
        /// </summary>
        public static string HffFuelIndicatorCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("HFF_Fuel_Indicator_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_Fuel_Indicator_Code", value);
            }
        }
        
        /// <summary>
        /// Indicates if evaluation of the HFF record for an oil fuel was initialized.
        /// </summary>
        public static bool? HffGasRecordInitialized
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("HFF_Gas_Record_Initialized")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_Gas_Record_Initialized", value);
            }
        }
        
        /// <summary>
        /// The GCV used to recalculate heat input.
        /// </summary>
        public static decimal? HffGcv
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("HFF_GCV")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_GCV", value);
            }
        }
        
        /// <summary>
        /// Indicates if HFF Mass Oil was calculated (used for leveling)
        /// </summary>
        public static bool? HffMassOilCalculated
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("HFF_Mass_Oil_Calculated")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_Mass_Oil_Calculated", value);
            }
        }
        
        /// <summary>
        /// The parameter in the Monitor Default record representing maximum or minimum Mass oil flow.
        /// </summary>
        public static string HffMassOilDefaultParameter
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("HFF_Mass_Oil_Default_Parameter")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_Mass_Oil_Default_Parameter", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Mass SODC in the HFF record is valid.
        /// </summary>
        public static bool? HffMassSodcStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("HFF_Mass_SODC_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_Mass_SODC_Status", value);
            }
        }
        
        /// <summary>
        /// The maximum heat input rate from the unit capacity which should equal the reported heat input rate in the HPFF record when SourceofDataMassCode is equal to 4.
        /// </summary>
        public static decimal? HffMaxHeatInputForMass
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("HFF_Max_Heat_Input_for_Mass")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_Max_Heat_Input_for_Mass", value);
            }
        }
        
        /// <summary>
        /// The maximum heat input rate from the unit capacity which should equal the reported heat input rate in the HPFF record when SourceofDataVolumetricCode is equal to 4.
        /// </summary>
        public static decimal? HffMaxHeatInputForVolume
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("HFF_Max_Heat_Input_for_Volume")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_Max_Heat_Input_for_Volume", value);
            }
        }
        
        /// <summary>
        /// Indicates if evaluation of the HFF record for an oil fuel was initialized.
        /// </summary>
        public static bool? HffOilRecordInitialized
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("HFF_Oil_Record_Initialized")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_Oil_Record_Initialized", value);
            }
        }
        
        /// <summary>
        /// The SO2 emission rate of the fuel used to recalculate SO2 mass rate.
        /// </summary>
        public static decimal? HffSo2EmissionRate
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("HFF_SO2_Emission_Rate")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_SO2_Emission_Rate", value);
            }
        }
        
        /// <summary>
        /// The equation code of the formula used to calculated SO2 for the fuel.
        /// </summary>
        public static string HffSo2EquationCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("HFF_SO2_Equation_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_SO2_Equation_Code", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Volumetric SODC in the HFF record is valid.
        /// </summary>
        public static bool? HffSodcStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("HFF_SODC_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_SODC_Status", value);
            }
        }
        
        /// <summary>
        /// The sulfur content of the fuel used to recalculate SO2 mass rate.
        /// </summary>
        public static decimal? HffSulfur
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("HFF_Sulfur")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_Sulfur", value);
            }
        }
        
        /// <summary>
        /// The FuelCode of monitoring system referenced in the HFF record.
        /// </summary>
        public static string HffSystemFuel
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("HFF_System_Fuel")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_System_Fuel", value);
            }
        }
        
        /// <summary>
        /// The SystemTypeCode of monitoring system reference in the HFF record.
        /// </summary>
        public static string HffSystemType
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("HFF_System_Type")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_System_Type", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the VolumetricUnitsOfMeasureCode in the HFF record are valid.
        /// </summary>
        public static bool? HffUomStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("HFF_UOM_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_UOM_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the FuelUsageTime in the current HFF record is valid.
        /// </summary>
        public static bool? HffUsageTimeStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("HFF_Usage_Time_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_Usage_Time_Status", value);
            }
        }
        
        /// <summary>
        /// The parameter in the Monitor Default record representing maximum or minimum volumetric flow.
        /// </summary>
        public static string HffVolumetricDefaultParameter
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("HFF_Volumetric_Default_Parameter")));
            }
            set
            {
                EmParameters.SetCheckParameter("HFF_Volumetric_Default_Parameter", value);
            }
        }
        
        /// <summary>
        /// Adds us Total Heat Input from all fuel flow sources under Appendix D
        /// </summary>
        public static decimal? HiAppDAccumulator
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Hi_App_D_Accumulator")));
            }
            set
            {
                EmParameters.SetCheckParameter("Hi_App_D_Accumulator", value);
            }
        }
        
        /// <summary>
        /// Resulting value when the Heat Input Rate is calculated.
        ///
        ///Field to be updated: Current DHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? HiCalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("HI_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("HI_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// Resulting value when the Heat Input Rate is calculated by apportionment or summing
        ///
        ///Field to be updated: Current DHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? HiCalculatedApportionedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("HI_Calculated_Apportioned_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("HI_Calculated_Apportioned_Value", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not all DHV checks have passed for the current HI record
        /// </summary>
        public static bool? HiDerivedHourlyStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("HI_Derived_Hourly_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("HI_Derived_Hourly_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates that the system in the HI DHV record has been validated
        /// </summary>
        public static bool? HiDerivedHourlySystemStatusValidated
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("HI_Derived_Hourly_System_Status_Validated")));
            }
            set
            {
                EmParameters.SetCheckParameter("HI_Derived_Hourly_System_Status_Validated", value);
            }
        }
        
        /// <summary>
        /// The Heat Input Derived Hourly Value Records By Hour and Location, for parameter codes that begin with "HI".
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueRow> HiDerivedHourlyValueRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("HI_Derived_Hourly_Value_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("HI_Derived_Hourly_Value_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("HI_Derived_Hourly_Value_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Component ID of the high range of a component.
        /// </summary>
        public static string HighRangeComponentId
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("High_Range_Component_ID")));
            }
            set
            {
                EmParameters.SetCheckParameter("High_Range_Component_ID", value);
            }
        }
        
        /// <summary>
        /// Indicates whether an HI HPFF record exists for the current hour.
        ///
        ///This parameter is initialized to false in HOUROP-3 and set to true in HOURAD-19.
        /// </summary>
        public static bool? HiHpffExists
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("HI_HPFF_Exists")));
            }
            set
            {
                EmParameters.SetCheckParameter("HI_HPFF_Exists", value);
            }
        }
        
        /// <summary>
        /// The Data and Maps hourly measure code for HI.
        /// </summary>
        public static string HiMeasureCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("HI_Measure_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("HI_Measure_Code", value);
            }
        }
        
        /// <summary>
        /// The HI Monitor Method Records By Hour Location: where parameter code starts with "HI" (including "HIT")
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodHiRow> HiMonitorMethodRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Hi_Monitor_Method_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodHiRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Hi_Monitor_Method_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Hi_Monitor_Method_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Flag to indicate whether or not it is necessary to perform HIT Derived Hourly checks at this location for the current hour
        /// </summary>
        public static bool? HitDerivedChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("HIT_Derived_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("HIT_Derived_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not all DHV checks have passed for the current HIT record
        /// </summary>
        public static bool? HitDerivedHourlyStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("HIT_Derived_Hourly_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("HIT_Derived_Hourly_Status", value);
            }
        }
        
        /// <summary>
        /// Contain the Total and April sum of load by location, reporting period, parameter and MODC.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemDhvTotalAndAprilLoadRow> HitDhvLoadSumRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("HIT_DHV_Load_Sum_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemDhvTotalAndAprilLoadRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("HIT_DHV_Load_Sum_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("HIT_DHV_Load_Sum_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The fieldnames of invalid data in the HIT Summary Value record.
        /// </summary>
        public static string HitSummaryInvalidFields
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("HIT_Summary_Invalid_Fields")));
            }
            set
            {
                EmParameters.SetCheckParameter("HIT_Summary_Invalid_Fields", value);
            }
        }
        
        /// <summary>
        /// Parameter containing a cross check table of the tolerances to use when comparing reported values for emissions data to resutls calculated using associated formulas and measured values.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.HourlyEmissionsTolerancesRow> HourlyEmissionsTolerancesCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Hourly_Emissions_Tolerances_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.HourlyEmissionsTolerancesRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Hourly_Emissions_Tolerances_Cross_Check_Table", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Hourly_Emissions_Tolerances_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Plugin to identify extraneous fields.
        /// </summary>
        public static string HourlyExtraneousFields
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Hourly_Extraneous_Fields")));
            }
            set
            {
                EmParameters.SetCheckParameter("Hourly_Extraneous_Fields", value);
            }
        }
        
        /// <summary>
        /// Indicates that a method is active CO2 calculation under Appendix D, therefere HourlyFuelFlowData and HourlyParamFuelFlowData records must be checked.
        /// </summary>
        public static bool? HourlyFuelFlowChecksNeededForCo2
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Hourly_Fuel_Flow_Checks_Needed_For_Co2")));
            }
            set
            {
                EmParameters.SetCheckParameter("Hourly_Fuel_Flow_Checks_Needed_For_Co2", value);
            }
        }
        
        /// <summary>
        /// Indicates whether HourlyFuelFlowData and HourlyParamFuelFlowData must be analyzed in support of an active method for Appendix D Heat Input.
        /// </summary>
        public static bool? HourlyFuelFlowChecksNeededForHeatInput
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Hourly_Fuel_Flow_Checks_Needed_For_Heat_Input")));
            }
            set
            {
                EmParameters.SetCheckParameter("Hourly_Fuel_Flow_Checks_Needed_For_Heat_Input", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the current SO2 Derived Hourly record is from an Appendix D source, in which case the HourlyFuelFlowData and HourlyParamFuelFlowData checks must be run
        /// </summary>
        public static bool? HourlyFuelFlowChecksNeededForSo2
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Hourly_Fuel_Flow_Checks_Needed_For_So2")));
            }
            set
            {
                EmParameters.SetCheckParameter("Hourly_Fuel_Flow_Checks_Needed_For_So2", value);
            }
        }
        
        /// <summary>
        /// Indicates the number of Hourly Fuel Flow Records for gas reported during the current hour
        /// </summary>
        public static int? HourlyFuelFlowCountForGas
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Hourly_Fuel_Flow_Count_For_Gas")));
            }
            set
            {
                EmParameters.SetCheckParameter("Hourly_Fuel_Flow_Count_For_Gas", value);
            }
        }
        
        /// <summary>
        /// Indicates the number of Hourly Fuel Flow Records for gas reported during the current hour
        /// </summary>
        public static int? HourlyFuelFlowCountForOil
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Hourly_Fuel_Flow_Count_For_Oil")));
            }
            set
            {
                EmParameters.SetCheckParameter("Hourly_Fuel_Flow_Count_For_Oil", value);
            }
        }
        
        /// <summary>
        /// Indicates that this is an Appendix E Site and Hourly Fuel Flow records will be examined for NOX Rate values
        /// </summary>
        public static bool? HourlyFuelFlowNeededForNoxRateCalc
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Hourly_Fuel_Flow_Needed_For_Nox_Rate_Calc")));
            }
            set
            {
                EmParameters.SetCheckParameter("Hourly_Fuel_Flow_Needed_For_Nox_Rate_Calc", value);
            }
        }
        
        /// <summary>
        /// All of the Hourly Fuel Flow records in the emissions file.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyFuelFlowRow> HourlyFuelFlowRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Hourly_Fuel_Flow_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyFuelFlowRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Hourly_Fuel_Flow_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Hourly_Fuel_Flow_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All of the Hourly Fuel Flow records for a single Hour and Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyFuelFlowRow> HourlyFuelFlowRecordsForHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Hourly_Fuel_Flow_Records_For_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyFuelFlowRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Hourly_Fuel_Flow_Records_For_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Hourly_Fuel_Flow_Records_For_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Hourly Op Data record for the location and the reporting period where OpTime = 0.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyOpDataRow> HourlyNonOperatingDataRecordsForLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Hourly_Non_Operating_Data_Records_for_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyOpDataRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Hourly_Non_Operating_Data_Records_for_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Hourly_Non_Operating_Data_Records_for_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All of the Hourly Operating Data records for a single Hour and Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyOpDataRow> HourlyOperatingDataRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Hourly_Operating_Data_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyOpDataRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Hourly_Operating_Data_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Hourly_Operating_Data_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All of the Hourly Operating Data records for all locations in a MP for the reporting period.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyOpDataRow> HourlyOperatingDataRecordsForConfiguration
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Hourly_Operating_Data_Records_for_Configuration")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyOpDataRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Hourly_Operating_Data_Records_for_Configuration", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Hourly_Operating_Data_Records_for_Configuration", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All of the Hourly Operating Data records for all locations in an LME MP for the reporting period.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyOpDataRow> HourlyOperatingDataRecordsForLmeConfiguration
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Hourly_Operating_Data_Records_for_LME_Configuration")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyOpDataRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Hourly_Operating_Data_Records_for_LME_Configuration", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Hourly_Operating_Data_Records_for_LME_Configuration", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All of the Hourly Operating Data records for a Location where OpTime > 0.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyOpDataRow> HourlyOperatingDataRecordsForLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Hourly_Operating_Data_Records_for_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyOpDataRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Hourly_Operating_Data_Records_for_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Hourly_Operating_Data_Records_for_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All of the Hourly Param Fuel Flow records for the Current Fuel Flow Record
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyParamFuelFlowRow> HourlyParamFuelFlowRecordsForCurrentFuelFlow
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Hourly_Param_Fuel_Flow_Records_For_Current_Fuel_Flow")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpHrlyParamFuelFlowRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Hourly_Param_Fuel_Flow_Records_For_Current_Fuel_Flow", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Hourly_Param_Fuel_Flow_Records_For_Current_Fuel_Flow", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if any offline daily calibration tests where ignored.
        /// </summary>
        public static bool? IgnoredDailyCalibrationTests
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Ignored_Daily_Calibration_Tests")));
            }
            set
            {
                EmParameters.SetCheckParameter("Ignored_Daily_Calibration_Tests", value);
            }
        }
        
        /// <summary>
        /// Indicates if any daily interference checks were ignored.
        /// </summary>
        public static bool? IgnoredDailyInterferenceTests
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Ignored_Daily_Interference_Tests")));
            }
            set
            {
                EmParameters.SetCheckParameter("Ignored_Daily_Interference_Tests", value);
            }
        }
        
        /// <summary>
        /// Indicates if a transmitter transducer test was conducted for a FFM that is not an ORF/NOZ/VENT FFM.
        /// </summary>
        public static bool? InappropriateTransmitterTransducerTest
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Inappropriate_Transmitter_Transducer_Test")));
            }
            set
            {
                EmParameters.SetCheckParameter("Inappropriate_Transmitter_Transducer_Test", value);
            }
        }
        
        /// <summary>
        /// Contains the Initial Certification Event Record for a particular system identifier.
        ///
        ///Note: This parameter is primarily used in emission report status checks for flow, and the 'system' of the initial certification event is usually the system of the MHV record.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow> InitialCertificationEventRecord
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Initial_Certification_Event_Record")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Initial_Certification_Event_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Initial_Certification_Event_Record", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates that a test measured value is valid.
        ///
        ///Should be set and used with in the same category.  Do not use in the child category of the category in which it is set.  It can be used within two different categories as long is one category is not a descendant of the other.
        ///
        /// </summary>
        public static bool? InjectionMeasuredValueValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Injection_Measured_Value_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("Injection_Measured_Value_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates that a test reference value is valid.
        ///
        ///Should be set and used with in the same category.  Do not use in the child category of the category in which it is set.  It can be used within two different categories as long is one category is not a descendant of the other.
        ///
        /// </summary>
        public static bool? InjectionReferenceValueValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Injection_Reference_Value_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("Injection_Reference_Value_Valid", value);
            }
        }
        
        /// <summary>
        /// Contains a String List of invalid daily calibration cylinder ids encountered during daily calibration processing.
        /// </summary>
        public static List<string> InvalidCylinderIdList
        {
            get
            {
                return ((List<string>)(EmParameters.GetCheckParameter("Invalid_Cylinder_Id_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("Invalid_Cylinder_Id_List", value);
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the test record that is the Invalid Prior daily cal test.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDailyCalibrationRow InvalidDailyCalRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Invalid_Daily_Cal_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDailyCalibrationRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Invalid_Daily_Cal_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Invalid_Daily_Cal_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The TestNumber of an invalid Fuel-Flow-to-Load Test in the Appendix D Status analysis.
        /// </summary>
        public static string InvalidFf2lTestNumber
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Invalid_FF2L_Test_Number")));
            }
            set
            {
                EmParameters.SetCheckParameter("Invalid_FF2L_Test_Number", value);
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the test record that is the Invalid Prior linearity test.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow InvalidLinearityRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Invalid_Linearity_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Invalid_Linearity_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Invalid_Linearity_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the test record that is the Invalid Prior RATA test.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow InvalidRataRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Invalid_RATA_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Invalid_RATA_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Invalid_RATA_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the TestNumber of the test record that is the Invalid Prior RATA or Invalid Prior Multiload RATA.
        /// </summary>
        public static string InvalidRataTestNumber
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Invalid_RATA_Test_Number")));
            }
            set
            {
                EmParameters.SetCheckParameter("Invalid_RATA_Test_Number", value);
            }
        }
        
        /// <summary>
        /// contains the last failed or aborted Daily Cal for each Component Id and Span Scale combination.
        /// </summary>
        public static object LastFailedOrAbortedDailyCalObject
        {
            get
            {
                return ((object)(EmParameters.GetCheckParameter("Last_Failed_Or_Aborted_Daily_Cal_Object")));
            }
            set
            {
                EmParameters.SetCheckParameter("Last_Failed_Or_Aborted_Daily_Cal_Object", value);
            }
        }
        
        /// <summary>
        /// Constains the last quality assured value supplemental data for parameter (monitored vs derived) and reporting period combinations.
        /// </summary>
        public static Dictionary<string, LastQualityAssuredValueSupplementalData>[] LastQualityAssuredValueSuppDataDictionaryArray
        {
            get
            {
                return ((Dictionary<string, LastQualityAssuredValueSupplementalData>[])(EmParameters.GetCheckParameter("Last_Quality_Assured_Value_Supp_Data_Dictionary_Array")));
            }
            set
            {
                EmParameters.SetCheckParameter("Last_Quality_Assured_Value_Supp_Data_Dictionary_Array", value);
            }
        }
        
        /// <summary>
        /// Most recent daily interference check summary records for every component and whether test result is "IGNORED" or not for the location.  Used by the QA Status evaluation.  
        ///The most recent test for a given emission hour is the latest test with an end hour that is on or before the current hour.
        ///
        /// </summary>
        public static cLastDailyInterferenceCheck LatestDailyInterferenceCheckObject
        {
            get
            {
                return ((cLastDailyInterferenceCheck)(EmParameters.GetCheckParameter("Latest_Daily_Interference_Check_Object")));
            }
            set
            {
                EmParameters.SetCheckParameter("Latest_Daily_Interference_Check_Object", value);
            }
        }
        
        /// <summary>
        /// All leak check summary records for the location.  Used by the QA Status evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow> LeakCheckRecordsByLocationForQaStatus
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Leak_Check_Records_By_Location_For_QA_Status")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Leak_Check_Records_By_Location_For_QA_Status", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Leak_Check_Records_By_Location_For_QA_Status", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains the year/qtr information when Missing Op data is the result for Leak Status.
        /// </summary>
        public static string LeakMissingOpDataInfo
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Leak_Missing_Op_Data_Info")));
            }
            set
            {
                EmParameters.SetCheckParameter("Leak_Missing_Op_Data_Info", value);
            }
        }
        
        /// <summary>
        /// Indicator that a leak status check should be performed during the current hour.
        /// </summary>
        public static bool? LeakStatusRequired
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Leak_Status_Required")));
            }
            set
            {
                EmParameters.SetCheckParameter("Leak_Status_Required", value);
            }
        }
        
        /// <summary>
        /// This contains the result to use for Leak Status checks.
        /// </summary>
        public static string LeakStatusResult
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Leak_Status_Result")));
            }
            set
            {
                EmParameters.SetCheckParameter("Leak_Status_Result", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the hourly emissions data being evaluated was reported under legacy (pre-ECMPS) instructions
        /// </summary>
        public static bool? LegacyDataEvaluation
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Legacy_Data_Evaluation")));
            }
            set
            {
                EmParameters.SetCheckParameter("Legacy_Data_Evaluation", value);
            }
        }
        
        /// <summary>
        /// Contains the total number of hours a like-kind monitor was used, usually during a calendar year.  Primarily used to populatee error messages.
        /// </summary>
        public static int? LikeKindHours
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Like_Kind_Hours")));
            }
            set
            {
                EmParameters.SetCheckParameter("Like_Kind_Hours", value);
            }
        }
        
        /// <summary>
        /// Location array contain a boolean indicating whether the corresponding location has reported linearity tests ('LINE') for the locations in the MP and with begin and end dates that intersect the quarter.
        /// </summary>
        public static Boolean[] LinearityExistsLocationArray
        {
            get
            {
                return ((Boolean[])(EmParameters.GetCheckParameter("Linearity_Exists_Location_Array")));
            }
            set
            {
                EmParameters.SetCheckParameter("Linearity_Exists_Location_Array", value);
            }
        }
        
        /// <summary>
        /// Contains the year/qtr information when Missing Op data is the result for Linearity Status.
        /// </summary>
        public static string LinearityMissingOpDataInfo
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Linearity_Missing_Op_Data_Info")));
            }
            set
            {
                EmParameters.SetCheckParameter("Linearity_Missing_Op_Data_Info", value);
            }
        }
        
        /// <summary>
        /// List of test numbers for linearities that have a begin or end hour that was during a non-op hour for the location.
        /// </summary>
        public static string LinearityOfflineList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Linearity_Offline_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("Linearity_Offline_List", value);
            }
        }
        
        /// <summary>
        /// Indicates if an MHV record requires the Linearity Status Evaluation.
        /// </summary>
        public static bool? LinearityStatusRequired
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Linearity_Status_Required")));
            }
            set
            {
                EmParameters.SetCheckParameter("Linearity_Status_Required", value);
            }
        }
        
        /// <summary>
        /// All linearity test summary records for the location.  Used by the QA Status evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow> LinearityTestRecordsByLocationForQaStatus
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Linearity_Test_Records_By_Location_For_QA_Status")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Linearity_Test_Records_By_Location_For_QA_Status", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Linearity_Test_Records_By_Location_For_QA_Status", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the monitoring configuration reports LME on an annual basis.
        /// </summary>
        public static bool? LmeAnnual
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("LME_Annual")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Annual", value);
            }
        }
        
        /// <summary>
        /// The total load for the LME configuration for April.
        /// </summary>
        public static decimal? LmeAprilLoad
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("LME_April_Load")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_April_Load", value);
            }
        }
        
        /// <summary>
        /// An array containing the total opertating time for LME units during April.
        /// </summary>
        public static decimal? LmeAprilOptime
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("LME_April_OpTime")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_April_OpTime", value);
            }
        }
        
        /// <summary>
        /// The total heat input for the hour calcuated for an LME unit.
        /// </summary>
        public static decimal? LmeCalcHeatInput
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("LME_Calc_Heat_Input")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Calc_Heat_Input", value);
            }
        }
        
        /// <summary>
        /// The total heat input for all common pipes in LME configuration for the month of April.
        /// </summary>
        public static decimal? LmeCpAprilHeatInput
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("LME_CP_April_Heat_Input")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_CP_April_Heat_Input", value);
            }
        }
        
        /// <summary>
        /// The total heat input for all common pipes in LME configuration for the reporting period.
        /// </summary>
        public static decimal? LmeCpTotalHeatInput
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("LME_CP_Total_Heat_Input")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_CP_Total_Heat_Input", value);
            }
        }
        
        /// <summary>
        /// The CO2M, HIT, NOXM and SO2M Derived Hourly Value Records By Hour and Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueRow> LmeDerivedHourlyValueRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("LME_Derived_Hourly_Value_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("LME_Derived_Hourly_Value_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("LME_Derived_Hourly_Value_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The emissions parameters that have exceeded the number of tons allowed to remain eligible for an LME qualification.
        /// </summary>
        public static string LmeExceedingParameters
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("LME_Exceeding_Parameters")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Exceeding_Parameters", value);
            }
        }
        
        /// <summary>
        /// A list of fuels for which LME NOx Default Tests were used during the reporting period for each location.
        /// </summary>
        public static string LmeFuelArray
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("LME_Fuel_Array")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Fuel_Array", value);
            }
        }
        
        /// <summary>
        /// The list of FuelCodes burned during the hour for an LME unit.
        /// </summary>
        public static string LmeFuelCodeList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("LME_Fuel_Code_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Fuel_Code_List", value);
            }
        }
        
        /// <summary>
        /// Indicates if the monitoring configuration reports LME on an annual basis.
        /// </summary>
        public static bool? LmeGenAnnual
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("LME_Gen_Annual")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Gen_Annual", value);
            }
        }
        
        /// <summary>
        /// The total load for the LME configuration for April.
        /// </summary>
        public static decimal? LmeGenAprilLoad
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("LME_Gen_April_Load")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Gen_April_Load", value);
            }
        }
        
        /// <summary>
        /// The total load for each unit in the LME configuration for April.
        /// </summary>
        public static decimal? LmeGenAprilLoadArray
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("LME_Gen_April_Load_Array")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Gen_April_Load_Array", value);
            }
        }
        
        /// <summary>
        /// The total operating time for the configuration in April
        /// </summary>
        public static decimal? LmeGenAprilOptime
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("LME_Gen_April_Optime")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Gen_April_Optime", value);
            }
        }
        
        /// <summary>
        /// The total heat input for all common pipes in LME configuration for the month of April.
        /// </summary>
        public static decimal? LmeGenCpAprilHeatInput
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("LME_Gen_CP_April_Heat_Input")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Gen_CP_April_Heat_Input", value);
            }
        }
        
        /// <summary>
        /// The total heat input for all common pipes in LME configuration for the reporting period.
        /// </summary>
        public static decimal? LmeGenCpTotalHeatInput
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("LME_Gen_CP_Total_Heat_Input")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Gen_CP_Total_Heat_Input", value);
            }
        }
        
        /// <summary>
        /// The fuel code being evaluated in the LME Generate process.
        /// </summary>
        public static string LmeGenFuelCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("LME_Gen_Fuel_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Gen_Fuel_Code", value);
            }
        }
        
        /// <summary>
        /// Indicates the HI method for the LME configuration.
        /// </summary>
        public static string LmeGenHiMethod
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("LME_Gen_HI_Method")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Gen_HI_Method", value);
            }
        }
        
        /// <summary>
        /// Indicates the SubstituteDataCode for the HI method for the LME configuration.
        /// </summary>
        public static string LmeGenHiSubstituteDataCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("LME_Gen_HI_Substitute_Data_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Gen_HI_Substitute_Data_Code", value);
            }
        }
        
        /// <summary>
        /// The recalculated total heat input in the LTFF record.
        ///
        ///LONG_TERM_FUEL_FLOW.TOTAL_HEAT_INPUT
        ///
        ///
        /// </summary>
        public static decimal? LmeGenLtffHeatInput
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("LME_Gen_LTFF_Heat_Input")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Gen_LTFF_Heat_Input", value);
            }
        }
        
        /// <summary>
        /// Indicates if the monitoring configuration reports LME on an ozone-season basis.
        /// </summary>
        public static bool? LmeGenOs
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("LME_Gen_OS")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Gen_OS", value);
            }
        }
        
        /// <summary>
        /// The monitoring methods parameters associated with the LME unit.
        /// </summary>
        public static string LmeGenParameters
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("LME_Gen_Parameters")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Gen_Parameters", value);
            }
        }
        
        /// <summary>
        /// The total load for the LME configuration for the reporting period.
        /// </summary>
        public static decimal? LmeGenTotalLoad
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("LME_Gen_Total_Load")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Gen_Total_Load", value);
            }
        }
        
        /// <summary>
        /// The total load for each unit in the LME configuration for the reporting period.
        /// </summary>
        public static decimal? LmeGenTotalLoadArray
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("LME_Gen_Total_Load_Array")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Gen_Total_Load_Array", value);
            }
        }
        
        /// <summary>
        /// The total operating time for the configuration in the reporting period.
        /// </summary>
        public static decimal? LmeGenTotalOptime
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("LME_Gen_Total_Optime")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Gen_Total_Optime", value);
            }
        }
        
        /// <summary>
        /// Indicates if the LME Hourly Op record has been validated.
        /// </summary>
        public static bool? LmeGenValidated
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("LME_Gen_Validated")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Gen_Validated", value);
            }
        }
        
        /// <summary>
        /// Indicates the HI method for a EM file containing LME units (SO2, NOX, CO2).
        /// </summary>
        public static string LmeHiMethod
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("LME_HI_Method")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_HI_Method", value);
            }
        }
        
        /// <summary>
        /// Indicates the SubstituteDataCode for the HI method for the LME configuration.
        /// </summary>
        public static string LmeHiSubstituteDataCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("LME_HI_Substitute_Data_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_HI_Substitute_Data_Code", value);
            }
        }
        
        /// <summary>
        /// Indicates if the monitoring configuration reports LME on an ozone-season basis.
        /// </summary>
        public static bool? LmeOs
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("LME_OS")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_OS", value);
            }
        }
        
        /// <summary>
        /// Accumulates the total load for all LME locations in the configuration for the reporting period.
        /// </summary>
        public static decimal? LmeTotalLoad
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("LME_Total_Load")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Total_Load", value);
            }
        }
        
        /// <summary>
        /// The total operating time for the configuration of LME units during the reporting period.
        /// </summary>
        public static decimal? LmeTotalOptime
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("LME_Total_Optime")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Total_Optime", value);
            }
        }
        
        /// <summary>
        /// The first quarter of the current year when LME data should be reported.
        /// </summary>
        public static int? LmeYearStartQuarter
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("LME_Year_Start_Quarter")));
            }
            set
            {
                EmParameters.SetCheckParameter("LME_Year_Start_Quarter", value);
            }
        }
        
        /// <summary>
        /// The monitor location attribute records for the hour and location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpLocationAttributeRow> LocationAttributeRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Location_Attribute_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpLocationAttributeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Location_Attribute_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Location_Attribute_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Active Unit Capacity records for the location or all units linked to the location for the hour.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationCapacityRow> LocationCapacityRecordsForHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Location_Capacity_Records_for_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationCapacityRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Location_Capacity_Records_for_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Location_Capacity_Records_for_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates the processing and array position for the current location in emission report processing.
        /// </summary>
        public static int? Locationpos
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("LocationPos")));
            }
            set
            {
                EmParameters.SetCheckParameter("LocationPos", value);
            }
        }
        
        /// <summary>
        /// Dictionary with a MON_LOC_ID and array position key-value pair.
        /// </summary>
        public static Dictionary<string, int> LocationPositionLookup
        {
            get
            {
                return ((Dictionary<string, int>)(EmParameters.GetCheckParameter("Location_Position_Lookup")));
            }
            set
            {
                EmParameters.SetCheckParameter("Location_Position_Lookup", value);
            }
        }
        
        /// <summary>
        /// Program records which apply to the monitoring location.
        ///
        ///For a unit, this is the Unit Program records for the unit.
        ///
        ///For a stack or pipe, this is the Unit Program records for all units linked to the stack or pipe via Unit Stack Configuration records.  The  UnitMonitorCertStartDate for the location program record should be the later of the UnitMonitorCertStartDate in the Unit Program record and the StartDate in the Unit Stack Configuration record.  The  EndDate for the location program record should be the earlier of the EndDate in the Unit Program record and the EndDate in the Unit Stack Configuration record.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationProgramRow> LocationProgramRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Location_Program_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationProgramRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Location_Program_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Location_Program_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The unit program records for a unit or the unit program records for the units associated with a stack or pipe for which is active during the current hour beginning with the earlier of the UMCDB and the ERBDand ending with the EndDate (if not null).
        ///
        ///This parameter is set in:
        ///  1) the hourly loop by the Hourly Op Data category, and
        ///  2) the apportionment loop by the Hourly Configuration Evaluation category.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpLocationProgramRow> LocationProgramRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Location_Program_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpLocationProgramRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Location_Program_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Location_Program_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Unit Program Reporting Frequency records which apply to the monitoring location.
        ///
        ///For a unit, this is the Unit Reporting Frequency records for the unit.
        ///
        ///For a stack or pipe, this is the Unit Reporting Frequency records for all units linked to the stack or pipe via Unit Stack Configuration records.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationReportingFrequencyRow> LocationReportingFrequencyRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Location_Reporting_Frequency_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationReportingFrequencyRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Location_Reporting_Frequency_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Location_Reporting_Frequency_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Component ID of the low range of a component.
        /// </summary>
        public static string LowRangeComponentId
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Low_Range_Component_ID")));
            }
            set
            {
                EmParameters.SetCheckParameter("Low_Range_Component_ID", value);
            }
        }
        
        /// <summary>
        /// The long term fuel flow records for all locations in the configuration.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpLongTermFuelFlowRow> LtffRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("LTFF_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpLongTermFuelFlowRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("LTFF_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("LTFF_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The 3 Level System Integrity QA Supplemental records used for QA Status evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow> Mats3LevelSystemIntegrityRecordsForQaStatus
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MATS_3_Level_System_Integrity_Records_for_QA_Status")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_3_Level_System_Integrity_Records_for_QA_Status", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_3_Level_System_Integrity_Records_for_QA_Status", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Identifies if breakthrough trap Hg concentration is in valid format for subsequent check.
        /// </summary>
        public static bool? MatsBtTrapHgValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_BT_Trap_Hg_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_BT_Trap_Hg_Valid", value);
            }
        }
        
        /// <summary>
        /// Calculates the Hg system concentration from the train data.
        ///
        ///Used in Emission Report evaluation, set in MATSTRP-14, and optional parameter for MATSTRP-15 solely to insure MATSTRP-15 runs after MATSTRP 1- through 14.
        /// </summary>
        public static string MatsCalcHgSystemConcentration
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Calc_Hg_System_Concentration")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Calc_Hg_System_Concentration", value);
            }
        }
        
        /// <summary>
        /// Hourly SFSR Ratio for subsequent check
        ///
        ///MatsHourlySfsrRatioDeviation
        /// </summary>
        public static decimal? MatsCalcHourlySfsrRatio
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("MATS_Calc_Hourly_SFSR_Ratio")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Calc_Hourly_SFSR_Ratio", value);
            }
        }
        
        /// <summary>
        /// Calculation of train Hg concentration.
        ///
        ///Used as plug in for error message result.
        /// </summary>
        public static string MatsCalcTrainHgConcentration
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Calc_Train_Hg_Concentration")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Calc_Train_Hg_Concentration", value);
            }
        }
        
        /// <summary>
        /// Calculated percent breakthrough for sampling train.
        ///
        ///Used as plugin error message result.
        /// </summary>
        public static decimal? MatsCalcTrainPercentBreakthrough
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("MATS_Calc_Train_Percent_Breakthrough")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Calc_Train_Percent_Breakthrough", value);
            }
        }
        
        /// <summary>
        /// Calculted value reported to one decimal place.
        ///
        ///Used as plugin for error result.
        /// </summary>
        public static decimal? MatsCalcTrainPercentSpikeRecovery
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("MATS_Calc_Train_Percent_Spike_Recovery")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Calc_Train_Percent_Spike_Recovery", value);
            }
        }
        
        /// <summary>
        /// Calculation of paired trap absolute difference.
        ///
        ///Used as plugin in error result.
        /// </summary>
        public static decimal? MatsCalcTrapAbsoluteDifference
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("MATS_Calc_Trap_Absolute_Difference")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Calc_Trap_Absolute_Difference", value);
            }
        }
        
        /// <summary>
        /// Calculated percent difference in the sorbent trap trains Hg concentrations.
        ///
        ///Used as plugin in error result.
        /// </summary>
        public static decimal? MatsCalcTrapPercentDifference
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("MATS_Calc_Trap_Percent_Difference")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Calc_Trap_Percent_Difference", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the calculated HCLRE or HCLRH value for MATS, which is primarily used to update the calculated value in the MATS Derived Hourly record.
        /// </summary>
        public static string MatsCalculatedHclRateValue
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Calculated_HCl_Rate_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Calculated_HCl_Rate_Value", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the calculated HFRE or HFRH value for MATS, which is primarily used to update the calculated value in the MATS Derived Hourly record.
        /// </summary>
        public static string MatsCalculatedHfRateValue
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Calculated_HF_Rate_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Calculated_HF_Rate_Value", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the calculated HGRE or HGRH value for MATS, which is primarily used to update the calculated value in the MATS Derived Hourly record.
        ///
        /// </summary>
        public static string MatsCalculatedHgRateValue
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Calculated_Hg_Rate_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Calculated_Hg_Rate_Value", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the calculated SO2RE or SO2RH value for MATS, which is primarily used to update the calculated value in the MATS Derived Hourly record.
        /// </summary>
        public static string MatsCalculatedSo2RateValue
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Calculated_SO2_Rate_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Calculated_SO2_Rate_Value", value);
            }
        }
        
        /// <summary>
        /// Dummy parameter used by the Hourly Linearity Status checks to force LINSTAT-7 to run before LINSTAT-6..
        /// </summary>
        public static bool? MatsCheckForHgsi3Ran
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Check_for_HGSI3_Ran")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Check_for_HGSI3_Ran", value);
            }
        }
        
        /// <summary>
        /// Indicates the date after which daily calibration tests are required for MATS parameters.  Before the date, the lack of a daily calibration test may not indicate an OOC MATS system, because MATS reporting may not have begun when the location first started operating in the first MATS quarter.  The value is pulled from the system parameter table under parameter MATS_RULE DailyCalibrationRequiredDatehour.
        /// </summary>
        public static DateTime? MatsDailyCalRequiredDatehour
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("MATS_Daily_Cal_Required_DateHour")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Daily_Cal_Required_DateHour", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the list of measured MODC for the current MATS DHV parameter.
        /// </summary>
        public static string MatsDhvMeasuredModcList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_DHV_Measured_MODC_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_DHV_Measured_MODC_List", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the current 'HGRE', 'HGRH', 'HCLRE', 'HCLRH', 'HFRE', 'HFRH', 'SO2RE' or 'SO2RH' MATS Derived Hourly Value record.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSDerivedHourlyValueData MatsDhvRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("MATS_DHV_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSDerivedHourlyValueData(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_DHV_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_DHV_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the 'HGRE', 'HGRH', 'HCLRE', 'HCLRH', 'HFRE', 'HFRH', 'SO2RE' and 'SO2RH' MATS Derived Hourly Value records for the current hour and location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSDerivedHourlyValueData> MatsDhvRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MATS_DHV_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSDerivedHourlyValueData>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_DHV_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_DHV_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the list of unavailable MODC for the current MATS DHV parameter.
        /// </summary>
        public static string MatsDhvUnavailableModcList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_DHV_Unavailable_MODC_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_DHV_Unavailable_MODC_List", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the RE equation code that uses H2O.
        /// </summary>
        public static string MatsEquationCodeWithH2o
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Equation_Code_With_H2O")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Equation_Code_With_H2O", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the RE equation code that does not use H2O.
        /// </summary>
        public static string MatsEquationCodeWithoutH2o
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Equation_Code_Without_H2O")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Equation_Code_Without_H2O", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Indicates whether MATS is expected for the current hour and location.
        /// </summary>
        public static bool? MatsExpected
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Expected")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Expected", value);
            }
        }
        
        /// <summary>
        /// Set and used in Hourly GFM checks, this parameter contains the sampling train rows active for the hour and component of the current GFM row.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MatsSamplingTrainRecord> MatsGfmSamplingTrainRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MATS_GFM_Sampling_Train_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MatsSamplingTrainRecord>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_GFM_Sampling_Train_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_GFM_Sampling_Train_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Boolean value indicating whether a MATS HCLC MHV Checks should run.
        /// </summary>
        public static bool? MatsHclcMhvChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_HCLC_MHV_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HCLC_MHV_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the 'HCLC' Monitor Hourly Value record for the current location that is active for the current hour.  This parameter's value is null if multiple or no active records exist, or if records are not expected.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSMonitorHourlyValueData MatsHclcMhvRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("MATS_HClC_MHV_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSMonitorHourlyValueData(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_HClC_MHV_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_HClC_MHV_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Boolean value indicating whether a MATS HCl Concentration is needed.
        /// </summary>
        public static bool? MatsHclcNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_HClC_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HClC_Needed", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the MATS HCl DHV parameter code which is set in the Derived Hourly category and used in the Calculated Hourly category.
        /// </summary>
        public static string MatsHclDhvParameter
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_HCl_DHV_Parameter")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HCl_DHV_Parameter", value);
            }
        }
        
        /// <summary>
        /// Plugin parameter used in emission report evaluations.
        /// </summary>
        public static string MatsHclDhvParameterDescription
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_HCl_DHV_Parameter_Description")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HCl_DHV_Parameter_Description", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the 'HCLRE' or 'HCLRH' Derived Hourly record for the current location that is active for the current hour.  This parameter's value is null if multiple or no active records exist, or if 'HCLRE' and 'HCLRH' derived records are not expected.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSDerivedHourlyValueData MatsHclDhvRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("MATS_HCl_DHV_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSDerivedHourlyValueData(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_HCl_DHV_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_HCl_DHV_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Indicates whether the HCl DHV record is valid for calculation purposes.
        /// </summary>
        public static bool? MatsHclDhvValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_HCl_DHV_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HCl_DHV_Valid", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the Method Code for the current 'HCLRE' or 'HCLRH' Monitor Method record.  This parameter's value is null if MATS HCl Method Record is null.
        /// </summary>
        public static string MatsHclMethodCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_HCl_Method_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HCl_Method_Code", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the 'HCLRE' or 'HCLRH' Monitor Method record for the current location that is active for the current hour.  This parameter's value is null if multiple or no active records exist, or if 'HCLRE' and 'HCLRH' derived records are not expected.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodRow MatsHclMethodRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("MATS_HCl_Method_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_HCl_Method_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_HCl_Method_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Plugin parameter used in emission report evaluations.
        /// </summary>
        public static string MatsHclMhvParameterDescription
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_HCl_MHV_Parameter_Description")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HCl_MHV_Parameter_Description", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the Parameter Code for the current 'HCLRE' or 'HCLRH' Monitor Method record.  This parameter's value is null if MATS HCl Method Record is null.
        /// </summary>
        public static string MatsHclParameterCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_HCl_Parameter_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HCl_Parameter_Code", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Boolean value indicating whether a MATS HCLRE DHV Checks should run.
        /// </summary>
        public static bool? MatsHclreDhvChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_HCLRE_DHV_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HCLRE_DHV_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Boolean value indicating whether a MATS HCLRH DHV Checks should run.
        /// </summary>
        public static bool? MatsHclrhDhvChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_HCLRH_DHV_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HCLRH_DHV_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Boolean value indicating whether a MATS HFC MHV Checks should run.
        /// </summary>
        public static bool? MatsHfcMhvChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_HFC_MHV_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HFC_MHV_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the 'HFC' Monitor Hourly Value record for the current location that is active for the current hour.  This parameter's value is null if multiple or no active records exist, or if records are not expected.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSMonitorHourlyValueData MatsHfcMhvRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("MATS_HFC_MHV_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSMonitorHourlyValueData(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_HFC_MHV_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_HFC_MHV_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Boolean value indicating whether a MATS HF Concentration is needed.
        /// </summary>
        public static bool? MatsHfcNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_HFC_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HFC_Needed", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the MATS HF DHV parameter code which is set in the Derived Hourly category and used in the Calculated Hourly category.
        /// </summary>
        public static string MatsHfDhvParameter
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_HF_DHV_Parameter")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HF_DHV_Parameter", value);
            }
        }
        
        /// <summary>
        /// Plubin parameter used in emission report evaluations.
        /// </summary>
        public static string MatsHfDhvParameterDescription
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_HF_DHV_Parameter_Description")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HF_DHV_Parameter_Description", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the 'HFRE' or 'HFRH' Derived Hourly record for the current location that is active for the current hour.  This parameter's value is null if multiple or no active records exist, or if 'HFRE' and 'HFRH' derived records are not expected.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSDerivedHourlyValueData MatsHfDhvRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("MATS_HF_DHV_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSDerivedHourlyValueData(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_HF_DHV_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_HF_DHV_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Indicates whether the HF DHV record is valid for calculation purposes.
        /// </summary>
        public static bool? MatsHfDhvValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_HF_DHV_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HF_DHV_Valid", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the Method Code for the current 'HFRE' or 'HFRH' Monitor Method record.  This parameter's value is null if MATS HF Method Record is null.
        /// </summary>
        public static string MatsHfMethodCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_HF_Method_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HF_Method_Code", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the 'HFRE' or 'HFRH' Monitor Method record for the current location that is active for the current hour.  This parameter's value is null if multiple or no active records exist, or if 'HFRE' and 'HFRH' derived records are not expected.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodRow MatsHfMethodRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("MATS_HF_Method_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_HF_Method_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_HF_Method_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Plugin parameter used in emission report evaluations.
        /// </summary>
        public static string MatsHfMhvParameterDescription
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_HF_MHV_Parameter_Description")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HF_MHV_Parameter_Description", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the Parameter Code for the current 'HFRE' or 'HFRH' Monitor Method record.  This parameter's value is null if MATS HF Method Record is null.
        /// </summary>
        public static string MatsHfParameterCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_HF_Parameter_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HF_Parameter_Code", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Boolean value indicating whether a MATS HFRE DHV Checks should run.
        /// </summary>
        public static bool? MatsHfreDhvChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_HFRE_DHV_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HFRE_DHV_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Boolean value indicating whether a MATS HFRH DHV Checks should run.
        /// </summary>
        public static bool? MatsHfrhDhvChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_HFRH_DHV_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HFRH_DHV_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// Contains an event record located as part of Hg 3-Level Sisytem Integrity processing.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow MatsHg3LevelSiEventRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("MATS_Hg_3_Level_SI_Event_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_Hg_3_Level_SI_Event_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_Hg_3_Level_SI_Event_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Contains a test record located as part of Hg 3-Level Sisytem Integrity processing.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow MatsHg3LevelSiTestRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("MATS_Hg_3_Level_SI_Test_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_Hg_3_Level_SI_Test_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_Hg_3_Level_SI_Test_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Boolean value indicating whether a MATS HGC MHV Checks should run.
        /// </summary>
        public static bool? MatsHgcMhvChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_HGC_MHV_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HGC_MHV_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the 'HGC' Monitor Hourly Value record for the current location that is active for the current hour.  This parameter's value is null if multiple or no active records exist, or if records are not expected.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSMonitorHourlyValueData MatsHgcMhvRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("MATS_HgC_MHV_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSMonitorHourlyValueData(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_HgC_MHV_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_HgC_MHV_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Boolean value indicating whether a MATS Hg Concentration is needed.
        /// </summary>
        public static bool? MatsHgcNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_HgC_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HgC_Needed", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the MATS Hg DHV parameter code which is set in the Derived Hourly category and used in the Calculated Hourly category.
        /// </summary>
        public static string MatsHgDhvParameter
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Hg_DHV_Parameter")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Hg_DHV_Parameter", value);
            }
        }
        
        /// <summary>
        /// Plugin parameter used in emission report evaluations.
        /// </summary>
        public static string MatsHgDhvParameterDescription
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Hg_DHV_Parameter_Description")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Hg_DHV_Parameter_Description", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the 'HGRE' or 'HGRH' Derived Hourly record for the current location that is active for the current hour.  This parameter's value is null if multiple or no active records exist, or if 'HGRE' and 'HGRH' derived records are not expected.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSDerivedHourlyValueData MatsHgDhvRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("MATS_Hg_DHV_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSDerivedHourlyValueData(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_Hg_DHV_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_Hg_DHV_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Indicates whether the Hg DHV record is valid for calculation purposes.
        /// </summary>
        public static bool? MatsHgDhvValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Hg_DHV_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Hg_DHV_Valid", value);
            }
        }
        
        /// <summary>
        /// Contains an event record located as part of Hg Linearity processing.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow MatsHgLinearityEventRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("MATS_Hg_Linearity_Event_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_Hg_Linearity_Event_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_Hg_Linearity_Event_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Jg Linearity QA Supplemental records used for QA Status evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow> MatsHgLinearityRecordsForQaStatus
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MATS_Hg_Linearity_Records_for_QA_Status")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_Hg_Linearity_Records_for_QA_Status", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_Hg_Linearity_Records_for_QA_Status", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains a test record located as part of Hg Linearity processing.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow MatsHgLinearityTestRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("MATS_Hg_Linearity_Test_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_Hg_Linearity_Test_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_Hg_Linearity_Test_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the Method Code for the current 'HGRE' or 'HGRH' Monitor Method record.  This parameter's value is null if MATS Hg Method Record is null.
        /// </summary>
        public static string MatsHgMethodCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Hg_Method_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Hg_Method_Code", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the 'HGRE' or 'HGRH' Monitor Method record for the current location that is active for the current hour.  This parameter's value is null if multiple or no active records exist, or if 'HGRE' and 'HGRH' derived records are not expected.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodRow MatsHgMethodRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("MATS_Hg_Method_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_Hg_Method_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_Hg_Method_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Plugin parameter used in emission report evaluations.
        /// </summary>
        public static string MatsHgMhvParameterDescription
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Hg_MHV_Parameter_Description")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Hg_MHV_Parameter_Description", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the Parameter Code for the current 'HGRE' or 'HGRH' Monitor Method record.  This parameter's value is null if MATS Hg Method Record is null.
        /// </summary>
        public static string MatsHgParameterCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Hg_Parameter_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Hg_Parameter_Code", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Boolean value indicating whether a MATS HGRE DHV Checks should run.
        /// </summary>
        public static bool? MatsHgreDhvChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_HGRE_DHV_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HGRE_DHV_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Boolean value indicating whether a MATS HGRH DHV Checks should run.
        /// </summary>
        public static bool? MatsHgrhDhvChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_HGRH_DHV_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_HGRH_DHV_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the Component Id for the current Hourly Gas Flow Meter record is not null and matches the Component Id for one of the two Sampling Trains.
        /// </summary>
        public static bool? MatsHourlyGfmComponentIdValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Hourly_GFM_Component_Id_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Hourly_GFM_Component_Id_Valid", value);
            }
        }
        
        /// <summary>
        /// MATS hourly GRM records for GFM component of sorbent train.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.MatsHourlyGfmRecord MatsHourlyGfmRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("MATS_Hourly_GFM_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.MatsHourlyGfmRecord(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_Hourly_GFM_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_Hourly_GFM_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Contains the Hourly GFM Records that are active for the current hour and location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MatsHourlyGfmRecord> MatsHourlyGfmRecordsForHourAndLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MATS_Hourly_GFM_Records_for_Hour_and_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MatsHourlyGfmRecord>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_Hourly_GFM_Records_for_Hour_and_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_Hourly_GFM_Records_for_Hour_and_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Identifies that the main trap Hg concentration is in a valid format for susbsequent checks
        /// </summary>
        public static bool? MatsMainTrapHgValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Main_Trap_Hg_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Main_Trap_Hg_Valid", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///The calculated Unadjusted MATS HCl Concentration MHV value in scientific notation.
        /// </summary>
        public static string MatsMhvCalculatedHclcValue
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_MHV_Calculated_HClC_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_MHV_Calculated_HClC_Value", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///The calculated Unadjusted MATS HF Concentration MHV value in scientific notation.
        /// </summary>
        public static string MatsMhvCalculatedHfcValue
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_MHV_Calculated_HFC_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_MHV_Calculated_HFC_Value", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///The calculated Unadjusted MATS Hg Concentration MHV value in scientific notation.
        /// </summary>
        public static string MatsMhvCalculatedHgcValue
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_MHV_Calculated_HgC_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_MHV_Calculated_HgC_Value", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///The calculated Unadjusted MATS MHV value in scientific notation.
        /// </summary>
        public static string MatsMhvCalculatedValue
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_MHV_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_MHV_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the 'HCLC' MATS Monitor Hourly Value records for the current hour and location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSMonitorHourlyValueData> MatsMhvHclcRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MATS_MHV_HClC_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSMonitorHourlyValueData>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_MHV_HClC_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_MHV_HClC_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the 'HGC', 'HCLC' and 'HHFC' MATS Monitor Hourly Value records for the current hour and location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSMonitorHourlyValueData> MatsMhvHfcRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MATS_MHV_HFC_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSMonitorHourlyValueData>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_MHV_HFC_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_MHV_HFC_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the 'HGC' MATS Monitor Hourly Value records for the current hour and location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSMonitorHourlyValueData> MatsMhvHgcRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MATS_MHV_HgC_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSMonitorHourlyValueData>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_MHV_HgC_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_MHV_HgC_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the list of measured MODC for the current MATS MHV parameter.
        /// </summary>
        public static string MatsMhvMeasuredModcList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_MHV_Measured_MODC_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_MHV_Measured_MODC_List", value);
            }
        }
        
        /// <summary>
        /// Contains the list of MODC for which a like-kind analyzer cannot be reported.
        /// </summary>
        public static string MatsMhvNoLikeKindModcList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_MHV_No_Like_Kind_MODC_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_MHV_No_Like_Kind_MODC_List", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the current 'HGC', 'HCLC', or 'HFC' MATS Monitor Hourly Value record.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSMonitorHourlyValueData MatsMhvRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("MATS_MHV_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSMonitorHourlyValueData(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_MHV_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_MHV_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether an active MATS Sorbent Trap exists for the system in an HgC MHV.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MatsSorbentTrapRecord> MatsMhvSorbentTraps
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MATS_MHV_Sorbent_Traps")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MatsSorbentTrapRecord>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_MHV_Sorbent_Traps", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_MHV_Sorbent_Traps", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the list of unavailable MODC for the current MATS MHV parameter.
        /// </summary>
        public static string MatsMhvUnavailableModcList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_MHV_Unavailable_MODC_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_MHV_Unavailable_MODC_List", value);
            }
        }
        
        /// <summary>
        /// Contains the list of Samling Trains that are missing GFM records for an hour.
        /// </summary>
        public static string MatsMissingGfmList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Missing_GFM_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Missing_GFM_List", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Indicates the formula codes used in MATS the include moisture.
        /// </summary>
        public static string MatsMoistureEquationList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Moisture_Equation_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Moisture_Equation_List", value);
            }
        }
        
        /// <summary>
        /// ID for MATS HCL DHV for MS-1 calcultions and to know which MATS DHV record to update. This ID will only have a value if there is an MS-1 calculation, otherwise it will be null.
        /// </summary>
        public static string MatsMs1HclDhvId
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_MS1_HCL_DHV_ID")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_MS1_HCL_DHV_ID", value);
            }
        }
        
        /// <summary>
        /// Primarily used for calculating the percent difference for checking the MS1 calculations.
        /// </summary>
        public static string MatsMs1HclUnadjustedHourlyValue
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_MS1_HCL_Unadjusted_Hourly_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_MS1_HCL_Unadjusted_Hourly_Value", value);
            }
        }
        
        /// <summary>
        /// ID for MATS HF DHV for MS-1 calcultions and to know which MATS DHV record to update. This ID will only have a value if there is an MS-1 calculation, otherwise it will be null.
        /// </summary>
        public static string MatsMs1HfDhvId
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_MS1_HF_DHV_ID")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_MS1_HF_DHV_ID", value);
            }
        }
        
        /// <summary>
        /// Primarily used for calculating the percent difference for checking the MS1 calculations.
        /// </summary>
        public static string MatsMs1HfUnadjustedHourlyValue
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_MS1_HF_Unadjusted_Hourly_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_MS1_HF_Unadjusted_Hourly_Value", value);
            }
        }
        
        /// <summary>
        /// ID for MATS Hg DHV for MS-1 calcultions and to know which MATS DHV record to update. This ID will only have a value if there is an MS-1 calculation, otherwise it will be null.
        /// </summary>
        public static string MatsMs1HgDhvId
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_MS1_Hg_DHV_ID")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_MS1_Hg_DHV_ID", value);
            }
        }
        
        /// <summary>
        /// Primarily used for calculating the percent difference for checking the MS1 calculations.
        /// </summary>
        public static string MatsMs1HgUnadjustedHourlyValue
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_MS1_Hg_Unadjusted_Hourly_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_MS1_Hg_Unadjusted_Hourly_Value", value);
            }
        }
        
        /// <summary>
        /// ID for MATS SO2 DHV for MS-1 calcultions and to know which MATS DHV record to update. This ID will only have a value if there is an MS-1 calculation, otherwise it will be null.
        /// </summary>
        public static string MatsMs1So2DhvId
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_MS1_SO2_DHV_ID")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_MS1_SO2_DHV_ID", value);
            }
        }
        
        /// <summary>
        /// Primarily used for calculating the percent difference for checking the MS1 calculations.
        /// </summary>
        public static string MatsMs1So2UnadjustedHourlyValue
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_MS1_SO2_Unadjusted_Hourly_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_MS1_SO2_Unadjusted_Hourly_Value", value);
            }
        }
        
        /// <summary>
        /// Contains the list of Samling Trains with multiple GFM records for an hour.
        /// </summary>
        public static string MatsMultipleGfmList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Multiple_GFM_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Multiple_GFM_List", value);
            }
        }
        
        /// <summary>
        /// Used in the HOURAPP-11 plugin for displaying which MATS parameter the check is working with (i.e. Hg, HCL, HF or SO2).
        /// </summary>
        public static string MatsParameterPluginHcl
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Parameter_Plugin_HCL")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Parameter_Plugin_HCL", value);
            }
        }
        
        /// <summary>
        /// Used in the HOURAPP-12 plugin for displaying which MATS parameter the check is working with (i.e. Hg, HCL, HF or SO2).
        /// </summary>
        public static string MatsParameterPluginHf
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Parameter_Plugin_HF")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Parameter_Plugin_HF", value);
            }
        }
        
        /// <summary>
        /// Used in the HOURAPP-10 plugin for displaying which MATS parameter the check is working with (i.e. Hg, HCL, HF or SO2).
        /// </summary>
        public static string MatsParameterPluginHg
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Parameter_Plugin_Hg")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Parameter_Plugin_Hg", value);
            }
        }
        
        /// <summary>
        /// Used in the HOURAPP-13 plugin for displaying which MATS parameter the check is working with (i.e. Hg, HCL, HF or SO2).
        /// </summary>
        public static string MatsParameterPluginSo2
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Parameter_Plugin_SO2")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Parameter_Plugin_SO2", value);
            }
        }
        
        /// <summary>
        /// Used for displaying the reported value in the response message for HOURAPP-11 check. 
        /// </summary>
        public static string MatsReportedPluginHcl
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Reported_Plugin_HCL")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Reported_Plugin_HCL", value);
            }
        }
        
        /// <summary>
        /// Used for displaying the reported value in the response message for HOURAPP-12 check. 
        /// </summary>
        public static string MatsReportedPluginHf
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Reported_Plugin_HF")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Reported_Plugin_HF", value);
            }
        }
        
        /// <summary>
        /// Used for displaying the reported value in the response message for HOURAPP-10 check. 
        /// </summary>
        public static string MatsReportedPluginHg
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Reported_Plugin_Hg")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Reported_Plugin_Hg", value);
            }
        }
        
        /// <summary>
        /// Used for displaying the reported value in the response message for HOURAPP-13 check. 
        /// </summary>
        public static string MatsReportedPluginSo2
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Reported_Plugin_SO2")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Reported_Plugin_SO2", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the Sampling Trian component id is not null and has a Sampling Train component type.
        /// </summary>
        public static bool? MatsSamplingTrainComponentIdValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Sampling_Train_Component_Id_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sampling_Train_Component_Id_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates the number of sampling trains for the current sorbent trap.
        /// </summary>
        public static int? MatsSamplingTrainCount
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("MATS_Sampling_Train_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sampling_Train_Count", value);
            }
        }
        
        /// <summary>
        /// Contains a dictionary of sampling train related information with a key for ComponentId and a value as a record containing the following fields:
        ///
        ///1) HgConcentration as a decimal
        ///2) TrainQAStatusCode as a string
        ///3) ReferenceSFSRRatio as an integer
        ///4) TotalSFSRRatioCount as an integer
        ///5) DeviatedSFSRRatioCount as an integer
        ///6) SamplingTrainValid as a boolean
        ///
        /// </summary>
        public static Dictionary<string, SamplingTrainEvalInformation> MatsSamplingTrainDictionary
        {
            get
            {
                return ((Dictionary<string, SamplingTrainEvalInformation>)(EmParameters.GetCheckParameter("MATS_Sampling_Train_Dictionary")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sampling_Train_Dictionary", value);
            }
        }
        
        /// <summary>
        /// Indicates when a sampling train with a missing component id or a component id linked to a non sampling train component exists for the current sorbent trap.
        ///
        ///Used in Emission Report evaluations and set in MATSTRP-9.
        /// </summary>
        public static bool? MatsSamplingTrainProblemComponentExists
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Sampling_Train_Problem_Component_Exists")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sampling_Train_Problem_Component_Exists", value);
            }
        }
        
        /// <summary>
        /// Contains the Train QA Status for Sampling Train assiciated with the current Hourly Gas Flow Meter record.
        ///
        ///Used in Emission Report evaluations.
        /// </summary>
        public static string MatsSamplingTrainQaStatus
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Sampling_Train_QA_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sampling_Train_QA_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the Sampling Train QA Status code is not null and has a valid value.
        ///
        ///Used in Emission Report evaluations.
        /// </summary>
        public static bool? MatsSamplingTrainQaStatusCodeValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Sampling_Train_QA_Status_Code_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sampling_Train_QA_Status_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// Table containing sampling train status codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Lookup.Table.TrainQaStatusCodeRow> MatsSamplingTrainQaStatusLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MATS_Sampling_Train_QA_Status_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Lookup.Table.TrainQaStatusCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_Sampling_Train_QA_Status_Lookup_Table", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_Sampling_Train_QA_Status_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Data records for each sorbent trap sampling train.  Used in emissions reporting process.
        ///
        ///Note: Include component type code and component type description.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.MatsSamplingTrainRecord MatsSamplingTrainRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("MATS_Sampling_Train_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.MatsSamplingTrainRecord(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_Sampling_Train_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_Sampling_Train_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Data records for each sorbent trap sampling train.  Used in emissions reporting process.
        ///
        ///Note: Includes component type code and component type description.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MatsSamplingTrainRecord> MatsSamplingTrainRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MATS_Sampling_Train_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MatsSamplingTrainRecord>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_Sampling_Train_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_Sampling_Train_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether there are two sampling trains.
        ///
        ///This should prevent checks dependent on two trains existing.
        /// </summary>
        public static bool? MatsSamplingTrainsValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Sampling_Trains_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sampling_Trains_Valid", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Boolean value indicating whether a MATS SO2 Concentration is needed.
        /// </summary>
        public static bool? MatsSo2cNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_SO2C_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_SO2C_Needed", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the MATS SO2 DHV parameter code which is set in the Derived Hourly category and used in the Calculated Hourly category.
        /// </summary>
        public static string MatsSo2DhvParameter
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_SO2_DHV_Parameter")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_SO2_DHV_Parameter", value);
            }
        }
        
        /// <summary>
        /// Plugin parameter used in emission report evaluations.
        /// </summary>
        public static string MatsSo2DhvParameterDescription
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_SO2_DHV_Parameter_Description")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_SO2_DHV_Parameter_Description", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the 'SO2RE' or 'SO2RH' Derived Hourly record for the current location that is active for the current hour.  This parameter's value is null if multiple or no active records exist, or if 'SO2RE' and 'SO2RH' derived records are not expected.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSDerivedHourlyValueData MatsSo2DhvRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("MATS_SO2_DHV_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.MATSDerivedHourlyValueData(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_SO2_DHV_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_SO2_DHV_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Indicates whether the SO2 DHV record is valid for calculation purposes.
        /// </summary>
        public static bool? MatsSo2DhvValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_SO2_DHV_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_SO2_DHV_Valid", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the Method Code for the current 'SO2RE' or 'SO2RH' Monitor Method record.  This parameter's value is null if MATS SO2 Method Record is null.
        /// </summary>
        public static string MatsSo2MethodCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_SO2_Method_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_SO2_Method_Code", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the 'SO2RE' or 'SO2RH' Monitor Method record for the current location that is active for the current hour.  This parameter's value is null if multiple or no active records exist, or if 'SO2RE' and 'SO2RH' derived records are not expected.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodRow MatsSo2MethodRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("MATS_SO2_Method_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_SO2_Method_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_SO2_Method_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the Parameter Code for the current 'SO2RE' or 'SO2RH' Monitor Method record.  This parameter's value is null if MATS SO2 Method Record is null.
        /// </summary>
        public static string MatsSo2ParameterCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_SO2_Parameter_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_SO2_Parameter_Code", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Boolean value indicating whether a MATS SO2RE DHV Checks should run.
        /// </summary>
        public static bool? MatsSo2reDhvChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_SO2RE_DHV_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_SO2RE_DHV_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Boolean value indicating whether a MATS SO2RH DHV Checks should run.
        /// </summary>
        public static bool? MatsSo2rhDhvChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_SO2RH_DHV_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_SO2RH_DHV_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// Contains the begin date and hour of the current sorbent trap.
        /// </summary>
        public static DateTime? MatsSorbentTrapBeginDatehour
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("MATS_Sorbent_Trap_Begin_DateHour")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sorbent_Trap_Begin_DateHour", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the sorbent trap begin date and hour are not null and the hour is inclusively between 0 and 23.
        ///
        ///Used in emission report checks.
        /// </summary>
        public static bool? MatsSorbentTrapBeginDateHourValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Sorbent_Trap_Begin_Date_Hour_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sorbent_Trap_Begin_Date_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the Sorbent Trap Begin Date is not null.
        ///
        ///Used in Emission Report checks.
        /// </summary>
        public static bool? MatsSorbentTrapBeginDateValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Sorbent_Trap_Begin_Date_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sorbent_Trap_Begin_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Result of comparison of trap begin and end dates and hours.
        ///
        ///Generically when this is false it should prvevent running other sorbent trap checks.
        /// </summary>
        public static bool? MatsSorbentTrapDatesAndHoursConsistent
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Sorbent_Trap_Dates_and_Hours_Consistent")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sorbent_Trap_Dates_and_Hours_Consistent", value);
            }
        }
        
        /// <summary>
        /// Dictionary with a LocationId (MON_LOC_ID) as a key and containing a record with the following fields:
        ///
        ///1) SorbentTrapValidExists as a boolean
        ///2) SorbentTrapFromPreviousQuarter as a boolean
        ///3) SorbentTrapBeginDateHour as a DateTime
        ///4) SorbentTrapEndDateHour as a DateTime
        ///5) SamplingTrainProblemComponentExists as a boolean
        ///6) SamplingTrainDictionary as the dictionary (see SamplingTrainDictionary parameter)
        ///7) OperatingDateList as a list of dates.
        ///
        ///Initialized in HOURGEN-19.
        /// </summary>
        public static Dictionary<string, SorbentTrapEvalInformation> MatsSorbentTrapDictionary
        {
            get
            {
                return ((Dictionary<string, SorbentTrapEvalInformation>)(EmParameters.GetCheckParameter("MATS_Sorbent_Trap_Dictionary")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sorbent_Trap_Dictionary", value);
            }
        }
        
        /// <summary>
        /// Contains the end date and hour of the current sorbent trap.
        /// </summary>
        public static DateTime? MatsSorbentTrapEndDatehour
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("MATS_Sorbent_Trap_End_DateHour")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sorbent_Trap_End_DateHour", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the sorbent trap end date and hour are not null and the hour is inclusively between 0 and 23.
        ///
        ///Used in emission report checks.
        /// </summary>
        public static bool? MatsSorbentTrapEndDateHourValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Sorbent_Trap_End_Date_Hour_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sorbent_Trap_End_Date_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the Sorbent Trap End Date is not null.
        ///
        ///Used in Emission Report checks.
        /// </summary>
        public static bool? MatsSorbentTrapEndDateValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Sorbent_Trap_End_Date_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sorbent_Trap_End_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether Sorbent Trap data exists in the emission report or Sorbent Trap Supplemental data exists that ends in the quarter of the emission report, and that the hour range information for each trap is correct and does not overlap with another trap or the last trap from the previous emission report..
        ///
        ///Used in Emission Report checks, and initialized in HOURGEN-19.  Updated in MATSTRP 1 through 6.
        /// </summary>
        public static bool? MatsSorbentTrapEvaluationNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Sorbent_Trap_Evaluation_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sorbent_Trap_Evaluation_Needed", value);
            }
        }
        
        /// <summary>
        /// An array with elements for each location in an emission report.  Each element contains a list which contains the sorbent traps associated with the location.
        /// </summary>
        public static List<SorbentTrapEvalInformation>[] MatsSorbentTrapListByLocationArray
        {
            get
            {
                return ((List<SorbentTrapEvalInformation>[])(EmParameters.GetCheckParameter("Mats_Sorbent_Trap_List_By_Location_Array")));
            }
            set
            {
                EmParameters.SetCheckParameter("Mats_Sorbent_Trap_List_By_Location_Array", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the MODC determined for the Sorbent Trap used for the hour.
        /// </summary>
        public static string MatsSorbentTrapModc
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MATS_Sorbent_Trap_MODC")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sorbent_Trap_MODC", value);
            }
        }
        
        /// <summary>
        /// Identifies whether the Sorbent Trap MODC was reported in properly.
        ///
        ///Used in Emissiion Report evaluation.
        /// </summary>
        public static bool? MatsSorbentTrapModcCodeValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Sorbent_TRAP_MODC_Code_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sorbent_TRAP_MODC_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// Identifies whether the paired trap agreement is reported properly for subsequent checks.
        /// </summary>
        public static bool? MatsSorbentTrapPairedTrapAgreementValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Sorbent_Trap_Paired_Trap_Agreement_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sorbent_Trap_Paired_Trap_Agreement_Valid", value);
            }
        }
        
        /// <summary>
        /// Data records for each sorbent trap sampling period.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.MatsSorbentTrapRecord MatsSorbentTrapRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("MATS_Sorbent_Trap_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.MatsSorbentTrapRecord(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_Sorbent_Trap_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_Sorbent_Trap_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Implement in table function ECMPS.CheckEm.SorbentTrap (MON_PLAN_ID, RPT_PERIOD_ID)
        ///
        ///Contains Sorbent Trap Data records where:
        ///
        ///1) The location is in the emission report being evaluated.
        ///2) The reporting period is the same as the reporting period of the emission report.
        ///
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MatsSorbentTrapRecord> MatsSorbentTrapRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MATS_Sorbent_Trap_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MatsSorbentTrapRecord>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_Sorbent_Trap_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_Sorbent_Trap_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains a list of sampling train related information with a value as a record containing the following fields:
        ///
        ///1) HgConcentration as a decimal
        ///2) TrainQAStatusCode as a string
        ///3) ReferenceSFSRRatio as an integer
        ///4) TotalSFSRRatioCount as an integer
        ///5) DeviatedSFSRRatioCount as an integer
        ///6) SamplingTrainValid as a boolean
        ///
        /// </summary>
        public static List<SamplingTrainEvalInformation> MatsSorbentTrapSamplingTrainList
        {
            get
            {
                return ((List<SamplingTrainEvalInformation>)(EmParameters.GetCheckParameter("MATS_Sorbent_Trap_Sampling_Train_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sorbent_Trap_Sampling_Train_List", value);
            }
        }
        
        /// <summary>
        /// Implement in table function ECMPS.CheckEm.SorbentTrapSupplementalData(MON_PLAN_ID, RPT_PERIOD_ID)
        ///
        ///Contains Sorbent Trap Supplemental Data records where:
        ///
        ///1) The location is in the emission report being evaluated.
        ///2) The begin date preceeds the begin date of the emission report.
        ///3) The end date is on or after the begin date of the emission report.
        ///
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MatsSorbentTrapSupplementalDataRecord> MatsSorbentTrapSupplementalDataRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MATS_Sorbent_Trap_Supplemental_Data_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MatsSorbentTrapSupplementalDataRecord>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MATS_Sorbent_Trap_Supplemental_Data_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MATS_Sorbent_Trap_Supplemental_Data_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether a valid sorbent trap exists for the current hour and location.
        ///
        ///Used in the Emission Report evaluation, initialized to true in MATSTRP-9, and updated in MATSTRP 10, 11, 12 and 13.
        /// </summary>
        public static bool? MatsSorbentTrapValidExists
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Sorbent_Trap_Valid_Exists")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Sorbent_Trap_Valid_Exists", value);
            }
        }
        
        /// <summary>
        /// Identifies that reported spike reference value is reported correctly for subsequent checks.
        /// </summary>
        public static bool? MatsSpikeReferenceValueValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Spike_Reference_Value_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Spike_Reference_Value_Valid", value);
            }
        }
        
        /// <summary>
        /// Identifies if the spike trap Hg concentration is reported correctly for subsequent check.
        /// </summary>
        public static bool? MatsSpikeTrapHgValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Spike_Trap_Hg_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Spike_Trap_Hg_Valid", value);
            }
        }
        
        /// <summary>
        /// Identifies that the total sample volume is reported properly for subsequent checks.
        /// </summary>
        public static bool? MatsTotalSampleVolumeDscmValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MATS_Total_Sample_Volume_DSCM_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("MATS_Total_Sample_Volume_DSCM_Valid", value);
            }
        }
        
        /// <summary>
        /// The highest value for NOx rate recorded in the relevant Appendix E Correlation Test
        /// </summary>
        public static decimal? MaximumAppECurveNoxEmissionRate
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Maximum_App_E_Curve_Nox_Emission_Rate")));
            }
            set
            {
                EmParameters.SetCheckParameter("Maximum_App_E_Curve_Nox_Emission_Rate", value);
            }
        }
        
        /// <summary>
        /// Stores the maximum level count for a FLOW system.  Used by the RATA status evaluation.
        /// </summary>
        public static int? MaxLevelCount
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Max_Level_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("Max_Level_Count", value);
            }
        }
        
        /// <summary>
        /// The largest amount of operating time for all stacks associated with the current monitoring plan in the current hour
        /// </summary>
        public static decimal? MaxStackOptime
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Max_Stack_Optime")));
            }
            set
            {
                EmParameters.SetCheckParameter("Max_Stack_Optime", value);
            }
        }
        
        /// <summary>
        /// The largest amount of operating time for all units associated with the current monitoring plan in the current hour
        /// </summary>
        public static decimal? MaxUnitOptime
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Max_Unit_Optime")));
            }
            set
            {
                EmParameters.SetCheckParameter("Max_Unit_Optime", value);
            }
        }
        
        /// <summary>
        /// Records for Methods at Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorMethodRow> MethodRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Method_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorMethodRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Method_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Method_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains a list of CO2M Formula Codes that were missing from the monitoring plan for the hour but were required according to the emissions data.
        /// </summary>
        public static string MissingCo2mFormula
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Missing_CO2M_Formula")));
            }
            set
            {
                EmParameters.SetCheckParameter("Missing_CO2M_Formula", value);
            }
        }
        
        /// <summary>
        /// Contains the list of derived hourly parameters for which the missing data hours exceed the maximum allowed for the year based on that last PMA.
        /// </summary>
        public static string MissingDataPmaProblemDerivedList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Missing_Data_PMA_Problem_Derived_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("Missing_Data_PMA_Problem_Derived_List", value);
            }
        }
        
        /// <summary>
        /// Contains the list of monitored hourly parameters for which the missing data hours exceed the maximum allowed for the year based on that last PMA.
        /// </summary>
        public static string MissingDataPmaProblemMonitorList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Missing_Data_PMA_Problem_Monitor_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("Missing_Data_PMA_Problem_Monitor_List", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the emission report is for an Annual or Ozone Season reporter.
        /// </summary>
        public static string MissingDataPmaReporterType
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Missing_Data_PMA_Reporter_Type")));
            }
            set
            {
                EmParameters.SetCheckParameter("Missing_Data_PMA_Reporter_Type", value);
            }
        }
        
        /// <summary>
        /// Object to track Missing Data Hours and Last PMA Value for each location and monitor and derived parameter value.
        /// </summary>
        public static MissingDataPmaTracking MissingDataPmaTracking
        {
            get
            {
                return ((MissingDataPmaTracking)(EmParameters.GetCheckParameter("Missing_Data_Pma_Tracking")));
            }
            set
            {
                EmParameters.SetCheckParameter("Missing_Data_Pma_Tracking", value);
            }
        }
        
        /// <summary>
        /// The year and quarter for which a fuel-flow-to-load test is missing in the Appendix D status analysis.
        /// </summary>
        public static string MissingFf2lYearQuarter
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Missing_FF2L_Year_Quarter")));
            }
            set
            {
                EmParameters.SetCheckParameter("Missing_FF2L_Year_Quarter", value);
            }
        }
        
        /// <summary>
        /// Contains the MODC for the NOXC or dilient record that does not contain MODC 46 when one but not both of the NOXC or dilient records contains MODC 46, but the other does not.
        /// </summary>
        public static string MissingModc46Non46ModcCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Missing_MODC_46_Non_46_MODC_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("Missing_MODC_46_Non_46_MODC_Code", value);
            }
        }
        
        /// <summary>
        /// Contains the parameter description associated with the NOXC or dilient record that contains MODC 46 when one but not both of the NOXC or dilient records contains MODC 46, but the other does not.
        /// </summary>
        public static string MissingModc46ParameterForModc46
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Missing_MODC_46_Parameter_for_MODC_46")));
            }
            set
            {
                EmParameters.SetCheckParameter("Missing_MODC_46_Parameter_for_MODC_46", value);
            }
        }
        
        /// <summary>
        /// Contains the parameter description associated with the NOXC or dilient record that does not contain MODC 46 when one but not both of the NOXC or dilient records contains MODC 46, but the other does not.
        /// </summary>
        public static string MissingModc46ParameterForNon46
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Missing_MODC_46_Parameter_For_Non_46")));
            }
            set
            {
                EmParameters.SetCheckParameter("Missing_MODC_46_Parameter_For_Non_46", value);
            }
        }
        
        /// <summary>
        /// Indicates if moisture is needed in a calculation.
        /// </summary>
        public static bool? MoistureNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Moisture_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("Moisture_Needed", value);
            }
        }
        
        /// <summary>
        /// The Monitor Default records by a specific hour and location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorDefaultRow> MonitorDefaultRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Monitor_Default_Records_by_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorDefaultRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Monitor_Default_Records_by_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Monitor_Default_Records_by_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Monitor Formula Records By Day and Location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorFormulaRow> MonitorFormulaRecordsByDayLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Monitor_Formula_Records_By_Day_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorFormulaRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Monitor_Formula_Records_By_Day_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Monitor_Formula_Records_By_Day_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Monitor Formula Records By Hour and Location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorFormulaRow> MonitorFormulaRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Monitor_Formula_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorFormulaRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Monitor_Formula_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Monitor_Formula_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the AdjustedHourlyValue in the current MonitorHourlyValueData record is valid.
        /// </summary>
        public static bool? MonitorHourlyAdjustedValueStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Monitor_Hourly_Adjusted_Value_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Monitor_Hourly_Adjusted_Value_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the ComponentID in the current MonitorHourlyValueData record is valid.
        /// </summary>
        public static bool? MonitorHourlyComponentStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Monitor_Hourly_Component_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Monitor_Hourly_Component_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the use of the Missing Data Status MODCs were appropriate.
        /// </summary>
        public static bool? MonitorHourlyMissingDataStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Monitor_Hourly_Missing_Data_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Monitor_Hourly_Missing_Data_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the MODCCode in the current MonitorHourlyValueData record is valid.
        /// </summary>
        public static bool? MonitorHourlyModcStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Monitor_Hourly_Modc_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Monitor_Hourly_Modc_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not extraneous fields in the current MonitorHourlyValueData record are null.
        /// </summary>
        public static bool? MonitorHourlyNullStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Monitor_Hourly_Null_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Monitor_Hourly_Null_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the PercentAvailable in the current MonitorHourlyValueData record is valid.
        /// </summary>
        public static bool? MonitorHourlyPmaStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Monitor_Hourly_Pma_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Monitor_Hourly_Pma_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the UnadjustedHourly Value in the MHV record for SO2C, NOXC, or FLOW being evaluated is valid.
        /// </summary>
        public static bool? MonitorHourlyPreadjustedValueStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Monitor_Hourly_Preadjusted_Value_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Monitor_Hourly_Preadjusted_Value_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the MonitoringSystemID in the current MonitorHourlyValueData record is valid.
        /// </summary>
        public static bool? MonitorHourlySystemStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Monitor_Hourly_System_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Monitor_Hourly_System_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the UnadjustedHourlyValue in the current MonitorHourlyValueData record is valid.
        /// </summary>
        public static bool? MonitorHourlyUnadjustedValueStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Monitor_Hourly_Unadjusted_Value_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Monitor_Hourly_Unadjusted_Value_Status", value);
            }
        }
        
        /// <summary>
        /// Records for MonitoringPlanLocation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorLocationRow> MonitoringPlanLocationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Monitoring_Plan_Location_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorLocationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Monitoring_Plan_Location_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Monitoring_Plan_Location_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Monitor Load records by a specific hour and location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorLoadRow> MonitorLoadRecordsByHourAndLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Monitor_Load_Records_by_Hour_and_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorLoadRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Monitor_Load_Records_by_Hour_and_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Monitor_Load_Records_by_Hour_and_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Monitor Method Records By Day Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodRow> MonitorMethodRecordsByDayLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Monitor_Method_Records_By_Day_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Monitor_Method_Records_By_Day_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Monitor_Method_Records_By_Day_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains the monitor method records active for a particular hour and monitoring plan.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodRow> MonitorMethodRecordsByHour
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Monitor_Method_Records_By_Hour")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Monitor_Method_Records_By_Hour", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Monitor_Method_Records_By_Hour", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Monitor Method Records By Hour Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodRow> MonitorMethodRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Monitor_Method_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Monitor_Method_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Monitor_Method_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The set of Monitor Qualification records that are active during the current hour
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorQualificationRow> MonitorQualificationRecordsByHour
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Monitor_Qualification_Records_By_Hour")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorQualificationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Monitor_Qualification_Records_By_Hour", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Monitor_Qualification_Records_By_Hour", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Monitor Span Records By Hour and Location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSpanRow> MonitorSpanRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Monitor_Span_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSpanRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Monitor_Span_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Monitor_Span_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Monitor System Component records for a specific hour and location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemComponentRow> MonitorSystemComponentRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Monitor_System_Component_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemComponentRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Monitor_System_Component_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Monitor_System_Component_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains the monitor system component records for locations in an emission report that were active during the quarter of the emission report.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemComponentRow> MonitorSystemComponentsForEmEvaluation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Monitor_System_Components_For_Em_Evaluation")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemComponentRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Monitor_System_Components_For_Em_Evaluation", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Monitor_System_Components_For_Em_Evaluation", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// System Records at location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemRow> MonitorSystemRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Monitor_System_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Monitor_System_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Monitor_System_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Monitor System records for a specific hour and location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemRow> MonitorSystemRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Monitor_System_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Monitor_System_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Monitor_System_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains the monitor system records for locations in an emission report that were active during the quarter of the emission report.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemRow> MonitorSystemsForEmEvaluation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Monitor_Systems_For_Em_Evaluation")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Monitor_Systems_For_Em_Evaluation", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Monitor_Systems_For_Em_Evaluation", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Most recent daily interference check summary records for every component, scale, onffline/online ind, and validity status for the location.  Used by the QA Status evaluation.  
        ///The most recent test for a given emission hour is the latest test that meets one of the following critieria:
        ///1.  An aborted or failed test with an injection that failed on or before minute 59 of the current hour.
        ///2.  An aborted or failed test without an injection that failed on or before minute 59 of 
        ///3.  A non-aborted and non-failed test with a test end date on or before minute 44 of the current hour.
        ///
        /// </summary>
        public static cDailyCalibrationData MostRecentDailyCalibrationTestObject
        {
            get
            {
                return ((cDailyCalibrationData)(EmParameters.GetCheckParameter("Most_Recent_Daily_Calibration_Test_Object")));
            }
            set
            {
                EmParameters.SetCheckParameter("Most_Recent_Daily_Calibration_Test_Object", value);
            }
        }
        
        /// <summary>
        /// Indiicates the last time a monitoring plan was evaluated for a message plug-in.
        /// </summary>
        public static string MpLastEvaluatedTimeframe
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MP_Last_Evaluated_Timeframe")));
            }
            set
            {
                EmParameters.SetCheckParameter("MP_Last_Evaluated_Timeframe", value);
            }
        }
        
        /// <summary>
        /// The Load Units of Measure Code for all locations in the MP configuration being evaluated.
        /// </summary>
        public static string MpLoadUom
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MP_Load_UOM")));
            }
            set
            {
                EmParameters.SetCheckParameter("MP_Load_UOM", value);
            }
        }
        
        /// <summary>
        /// This table contains the non-load based indicator for each location at a facility.  If the location is a stack or pipe the indicator is 1 if any connected unit has and indicator of 1.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MpLocationNonLoadBasedIndication> MpLocationNonLoadBasedRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Mp_Location_Non_Load_Based_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MpLocationNonLoadBasedIndication>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Mp_Location_Non_Load_Based_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Mp_Location_Non_Load_Based_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Records for Methods for all locations in the monitoring configuration
        ///
        ///This parameter was originally used in Emissions but will also now be used in Monitoring Plan checks.  For Monitoring Plan checks it will include all the methods in the Monitoring Plan being evaluated.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodRow> MpMethodRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MP_Method_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MP_Method_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MP_Method_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Unit Operating Status Records for all units in the monitoring plan configuration.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpOperatingStatusRow> MpOperatingStatusRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MP_Operating_Status_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpOperatingStatusRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MP_Operating_Status_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MP_Operating_Status_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// A string that contains either "Unit", "CP", "MP", or "Complex" reflecting whether this monitoring plan is for a simple unit, a common pipe, a multipipe, or a complex pipe config, respectively.
        /// </summary>
        public static bool? MpPipeConfigForHourlyChecks
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MP_Pipe_Config_for_Hourly_Checks")));
            }
            set
            {
                EmParameters.SetCheckParameter("MP_Pipe_Config_for_Hourly_Checks", value);
            }
        }
        
        /// <summary>
        /// The Unit Program Exemption Records for all units in the monitoring plan configuration.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpProgramExemptionRow> MpProgramExemptionRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MP_Program_Exemption_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpProgramExemptionRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MP_Program_Exemption_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MP_Program_Exemption_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Program records which apply to all units in the monitoring configuration.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationProgramRow> MpProgramRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MP_Program_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationProgramRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MP_Program_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MP_Program_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Monitor Qualification Percent records for a monitoring plan.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MonitorQualificationPercentData> MpQualificationPercentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MP_Qualification_Percent_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.MonitorQualificationPercentData>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MP_Qualification_Percent_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MP_Qualification_Percent_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Qualification Records for all locations in the monitoring configuration.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorQualificationRow> MpQualificationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MP_Qualification_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorQualificationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MP_Qualification_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MP_Qualification_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Program Reporting Frequency Record for all locations in the monitoring configuration.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationReportingFrequencyRow> MpReportingFrequencyRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MP_Reporting_Frequency_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationReportingFrequencyRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MP_Reporting_Frequency_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MP_Reporting_Frequency_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// A string that contains either "Unit", "CS", "MS", or "Complex" reflecting whether this monitoring plan is for a simple unit, a common stack, a multistack, or a complex config, respectively.
        /// </summary>
        public static string MpStackConfigForHourlyChecks
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("MP_Stack_Config_For_Hourly_Checks")));
            }
            set
            {
                EmParameters.SetCheckParameter("MP_Stack_Config_For_Hourly_Checks", value);
            }
        }
        
        /// <summary>
        /// This parameter indicates whether the associated monitoring plan was successfully evaluated.
        /// </summary>
        public static bool? MpSuccessfullyEvaluated
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("MP_Successfully_Evaluated")));
            }
            set
            {
                EmParameters.SetCheckParameter("MP_Successfully_Evaluated", value);
            }
        }
        
        /// <summary>
        /// The System Component rows associated with a monitoring plan
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemComponentRow> MpSystemComponentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("MP_System_Component_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemComponentRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("MP_System_Component_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("MP_System_Component_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Load for the unit in the MP configuration being evaluated.
        /// </summary>
        public static int? MpUnitLoad
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("MP_Unit_Load")));
            }
            set
            {
                EmParameters.SetCheckParameter("MP_Unit_Load", value);
            }
        }
        
        /// <summary>
        /// Indicates if the monitoring plan contains a standard multiple stack configuration.
        /// </summary>
        public static bool? MultipleStackConfiguration
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Multiple_Stack_Configuration")));
            }
            set
            {
                EmParameters.SetCheckParameter("Multiple_Stack_Configuration", value);
            }
        }
        
        /// <summary>
        /// Contains the the hourly tolerance for MW Load as definited in the Hourly Emissions Tolerances crosscheck table.
        /// </summary>
        public static int? MwLoadHourlyTolerance
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("MW_Load_Hourly_Tolerance")));
            }
            set
            {
                EmParameters.SetCheckParameter("MW_Load_Hourly_Tolerance", value);
            }
        }
        
        /// <summary>
        /// Resulting value when the NOx Mass Rate is calculated.
        ///
        ///Field to be updated: Current DHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? NoxCalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("NOX_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOX_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// Resulting value when the NOx Mass Rate is calculated from apportioned or summed heat input.
        ///
        ///Field to be updated: Current DHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? NoxCalculatedApportionmentBasedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("NOX_Calculated_Apportionment_Based_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOX_Calculated_Apportionment_Based_Value", value);
            }
        }
        
        /// <summary>
        /// Updated NOx Concentration value, based on the Unadjusted Value multiplied by the Bias Adjustment Factor from the most recent successful RATA test.
        ///
        ///Field to be updated: Current MHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? NoxcCalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("NOXC_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOXC_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// the number of MonitorHourlyValueData records reported for NOx Conc during the current day and hour
        /// </summary>
        public static int? NoxcMonitorHourlyCount
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("NOxC_Monitor_Hourly_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOxC_Monitor_Hourly_Count", value);
            }
        }
        
        /// <summary>
        /// The NOx Concentration value that should be used in the NOx Emission Rate calcualtion
        /// </summary>
        public static decimal? NoxConcForNoxRateCalculation
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Nox_Conc_For_Nox_Rate_Calculation")));
            }
            set
            {
                EmParameters.SetCheckParameter("Nox_Conc_For_Nox_Rate_Calculation", value);
            }
        }
        
        /// <summary>
        /// The Method of Determination Code for the NOx Concentration Record during the current hour
        /// </summary>
        public static string NoxConcModc
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("NOx_Conc_Modc")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOx_Conc_Modc", value);
            }
        }
        
        /// <summary>
        /// Indicates that NOx Concentration (MonitorHourlyValue) checks must be run in support of the NOx Mass Calculation
        /// </summary>
        public static bool? NoxConcNeededForNoxMassCalc
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("NOx_Conc_Needed_for_NOx_Mass_Calc")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOx_Conc_Needed_for_NOx_Mass_Calc", value);
            }
        }
        
        /// <summary>
        /// Boolean flag that indicates whether or not to look for a required NOx Conc record based on the status of the NOx Rate Derived Hourly Record
        /// </summary>
        public static bool? NoxConcNeededForNoxRateCalc
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("NOx_Conc_Needed_for_NOx_Rate_Calc")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOx_Conc_Needed_for_NOx_Rate_Calc", value);
            }
        }
        
        /// <summary>
        /// indicates whether or not the NOX Derived Hourly Value checks were all run successfully
        /// </summary>
        public static bool? NoxDerivedHourlyStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("NOX_Derived_Hourly_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOX_Derived_Hourly_Status", value);
            }
        }
        
        /// <summary>
        /// The NOX and NOXM Derived Hourly Value Records By Hour and Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueNoxRow> NoxDerivedHourlyValueRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("NOx_Derived_Hourly_Value_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueNoxRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("NOx_Derived_Hourly_Value_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("NOx_Derived_Hourly_Value_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The MODC code from the NOx Emission Rate record
        /// </summary>
        public static string NoxEmissionRateModc
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("NOx_Emission_Rate_Modc")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOx_Emission_Rate_Modc", value);
            }
        }
        
        /// <summary>
        /// A list of Appendix E Nox Systems used during the reporting period for each location
        /// </summary>
        public static string NoxeSystemIdArray
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("NOXE_System_ID_Array")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOXE_System_ID_Array", value);
            }
        }
        
        /// <summary>
        /// Bypass Approach Code of active NOX Monitor Method entries for the current configuration during the current hour
        /// </summary>
        public static string NoxMassBypassCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("NOx_Mass_Bypass_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOx_Mass_Bypass_Code", value);
            }
        }
        
        /// <summary>
        /// Indicates that DerivedHourlyValue checks for NOx Mass Rate (NOX) Category checks should be run
        /// </summary>
        public static bool? NoxMassDerivedChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("NOx_Mass_Derived_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOx_Mass_Derived_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// The equation code used to calculate NOx Mass for the current DerivedHourlyValue record
        /// </summary>
        public static string NoxMassEquationCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("NOx_Mass_Equation_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOx_Mass_Equation_Code", value);
            }
        }
        
        /// <summary>
        /// Indicates if active NOX Monitor Method entries for the current configuration during the current hour uses fuel-specific missing data approach
        /// </summary>
        public static bool? NoxMassFuelSpecificMissingData
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("NOx_Mass_Fuel_Specific_Missing_Data")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOx_Mass_Fuel_Specific_Missing_Data", value);
            }
        }
        
        /// <summary>
        /// Indicates that a Monitor Method record for NOx Mass is active during the current hour, and thus a DerivedHourlyValue record should be present
        /// </summary>
        public static bool? NoxMassMethodActiveForHour
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("NOx_Mass_Method_Active_For_Hour")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOx_Mass_Method_Active_For_Hour", value);
            }
        }
        
        /// <summary>
        /// The Method Code associated with the Monitor Method record for NOX Mass for the current location that is active during the current hour.  Typically, this code will be either "NOXR" or "CEM"
        /// </summary>
        public static string NoxMassMonitorMethodCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("NOx_Mass_Monitor_Method_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOx_Mass_Monitor_Method_Code", value);
            }
        }
        
        /// <summary>
        /// Resulting value when the NOx Mass is calculated for LME
        ///
        ///Field to be updated: Current DHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? NoxmCalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("NOXM_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOXM_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// Indicates that DerivedHourlyValue checks for NOXM Category checks should be run
        /// </summary>
        public static bool? NoxmDerivedChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("NOXM_Derived_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOXM_Derived_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// indicates whether or not the NOXM Derived Hourly Value checks were all run successfully
        /// </summary>
        public static bool? NoxmDerivedHourlyStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("NOXM_Derived_Hourly_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOXM_Derived_Hourly_Status", value);
            }
        }
        
        /// <summary>
        /// The NOx Monitor Method records for a specific hour and location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodNoxRow> NoxMonitorMethodRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("NOx_Monitor_Method_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodNoxRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("NOx_Monitor_Method_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("NOx_Monitor_Method_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The fieldnames of invalid data in the NOX Summary Value record.
        /// </summary>
        public static string NoxmSummaryInvalidFields
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("NOXM_Summary_Invalid_Fields")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOXM_Summary_Invalid_Fields", value);
            }
        }
        
        /// <summary>
        /// This variable sums the Appendix E NOXR values from all fuel sources
        /// </summary>
        public static decimal? NoxrAppEAccumulator
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Noxr_App_E_Accumulator")));
            }
            set
            {
                EmParameters.SetCheckParameter("Noxr_App_E_Accumulator", value);
            }
        }
        
        /// <summary>
        /// Bypass Approach Code of active NOXR Monitor Method entries for the current configuration during the current hour
        /// </summary>
        public static string NoxRateBypassCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("NOx_Rate_Bypass_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOx_Rate_Bypass_Code", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the NOx Emission Rate Derived Hourly checks must be run in support of the NOx Mass Calculation
        /// </summary>
        public static bool? NoxRateChecksNeededForNoxMassCalc
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("NOx_Rate_Checks_Needed_for_NOx_Mass_Calc")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOx_Rate_Checks_Needed_for_NOx_Mass_Calc", value);
            }
        }
        
        /// <summary>
        /// The Equation Code used to derive NOx Rate for the current NOx Rate Derived Hourly Record
        /// </summary>
        public static string NoxRateEquationCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Nox_Rate_Equation_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("Nox_Rate_Equation_Code", value);
            }
        }
        
        /// <summary>
        /// Indicates if active NOXR Monitor Method entries for the current configuration during the current hour uses fuel-specific missing data approach
        /// </summary>
        public static bool? NoxRateFuelSpecificMissingData
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("NOx_Rate_Fuel_Specific_Missing_Data")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOx_Rate_Fuel_Specific_Missing_Data", value);
            }
        }
        
        /// <summary>
        /// Resulting value when the NOx Emission Rate is calculated.
        ///
        ///Field to be updated: Current DHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? NoxrCalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("NOXR_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOXR_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// Resulting value when the NOx Emission Rate is calculated (pre-BAF).
        ///
        ///Field to be updated: Current DHV Record.CalcUnadjustedHourlyValue
        /// </summary>
        public static decimal? NoxrCalculatedUnadjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("NOXR_Calculated_Unadjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOXR_Calculated_Unadjusted_Value", value);
            }
        }
        
        /// <summary>
        /// Flag to indicate whether or not it is necessary to perform NOx Rate Derived Hourly checks at this location for the current hour
        /// </summary>
        public static bool? NoxrDerivedHourlyChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("NOxR_Derived_Hourly_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOxR_Derived_Hourly_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// The number of DerivedHourlyValueData records with parameter "NOXR" that have been reported for the Current Hour
        /// </summary>
        public static int? NoxrDerivedHourlyCount
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("NoxR_Derived_Hourly_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("NoxR_Derived_Hourly_Count", value);
            }
        }
        
        /// <summary>
        /// indicates whether or not the NOXR Derived Hourly Value checks were all run successfully
        /// </summary>
        public static bool? NoxrDerivedHourlyStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("NOXR_Derived_Hourly_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOXR_Derived_Hourly_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether an NOXR DHV record has a measured MODC.
        /// </summary>
        public static bool? NoxrHasMeasuredDhvModc
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("NOXR_Has_Measured_DHV_MODC")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOXR_Has_Measured_DHV_MODC", value);
            }
        }
        
        /// <summary>
        /// The Data and Maps hourly measure code for NOXR.
        /// </summary>
        public static string NoxrMeasureCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("NOXR_Measure_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOXR_Measure_Code", value);
            }
        }
        
        /// <summary>
        /// The NOx Rate Monitor Method records for a specific hour and location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodNoxrRow> NoxrMonitorMethodRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("NOxR_Monitor_Method_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodNoxrRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("NOxR_Monitor_Method_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("NOxR_Monitor_Method_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains the NOX system related MHV records for the hour with either MODC 47 or 48.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.NoxrPrimaryAndPrimaryBypassMhv> NoxrPrimaryOrPrimaryBypassMhvRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("NOXR_Primary_or_Primary_Bypass_MHV_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.NoxrPrimaryAndPrimaryBypassMhv>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("NOXR_Primary_or_Primary_Bypass_MHV_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("NOXR_Primary_or_Primary_Bypass_MHV_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The first quarter in the current year of the reporting period when NOXR method was active for the location.
        /// </summary>
        public static int? NoxrStartQuarter
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("NOXR_Start_Quarter")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOXR_Start_Quarter", value);
            }
        }
        
        /// <summary>
        /// Contains rows for units in emission reports.  Each row contains an indicator column for each of the four quarters of the emission report's year.  The indicator indicates when the unit is in an MS configuartion during the quarter, and that at least one of the MS reported NOxR during the quarter.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.NoxrSummaryRequiredForLmeAnnual> NoxrSummaryRequiredForLmeAnnualRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("NOxR_Summary_Required_for_LME_Annual_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.NoxrSummaryRequiredForLmeAnnual>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("NOxR_Summary_Required_for_LME_Annual_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("NOxR_Summary_Required_for_LME_Annual_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The first quarter in the current year of the reporting period when NOX method was active for the location.
        /// </summary>
        public static int? NoxStartQuarter
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("NOX_Start_Quarter")));
            }
            set
            {
                EmParameters.SetCheckParameter("NOX_Start_Quarter", value);
            }
        }
        
        /// <summary>
        /// Contains the NSPS4T Annual rows for an emission report.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.Nsps4tAnnual> Nsps4tAnnualRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("NSPS4T_Annual_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.Nsps4tAnnual>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("NSPS4T_Annual_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("NSPS4T_Annual_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains the NSPS4T Compliance Period rows for an emission report.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.Nsps4tCompliancePeriod> Nsps4tCompliancePeriodRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("NSPS4T_Compliance_Period_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.Nsps4tCompliancePeriod>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("NSPS4T_Compliance_Period_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("NSPS4T_Compliance_Period_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The current NSPS4T Annual record.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.Nsps4tAnnual Nsps4tCurrentAnnualRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("NSPS4T_Current_Annual_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.Nsps4tAnnual(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("NSPS4T_Current_Annual_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("NSPS4T_Current_Annual_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The first of the current Compliance Period records.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.Nsps4tCompliancePeriod Nsps4tCurrentCompliancePeriod1Record
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("NSPS4T_Current_Compliance_Period_1_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.Nsps4tCompliancePeriod(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("NSPS4T_Current_Compliance_Period_1_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("NSPS4T_Current_Compliance_Period_1_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The second of the current Compliance Period records.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.Nsps4tCompliancePeriod Nsps4tCurrentCompliancePeriod2Record
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("NSPS4T_Current_Compliance_Period_2_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.Nsps4tCompliancePeriod(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("NSPS4T_Current_Compliance_Period_2_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("NSPS4T_Current_Compliance_Period_2_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The third of the current Compliance Period records.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.Nsps4tCompliancePeriod Nsps4tCurrentCompliancePeriod3Record
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("NSPS4T_Current_Compliance_Period_3_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.Nsps4tCompliancePeriod(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("NSPS4T_Current_Compliance_Period_3_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("NSPS4T_Current_Compliance_Period_3_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current NSPS4T Summary record
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.Nsps4tSummary Nsps4tCurrentSummaryRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("NSPS4T_Current_Summary_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.Nsps4tSummary(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("NSPS4T_Current_Summary_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("NSPS4T_Current_Summary_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// List of invlaid CO2 Emission Rate UOM codes.
        /// </summary>
        public static string Nsps4tInvalidCo2EmissionRateUomList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("NSPS4T_Invalid_CO2_Emission_Rate_UOM_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("NSPS4T_Invalid_CO2_Emission_Rate_UOM_List", value);
            }
        }
        
        /// <summary>
        /// Contains the NSPS4T Summary rows for an emission report.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.Nsps4tSummary> Nsps4tSummaryRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("NSPS4T_Summary_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.Nsps4tSummary>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("NSPS4T_Summary_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("NSPS4T_Summary_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The O2 Concentration value to be used in the CO2C Calculation
        /// </summary>
        public static decimal? O2ConcForCo2cCalc
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("O2_Conc_For_Co2c_Calc")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Conc_For_Co2c_Calc", value);
            }
        }
        
        /// <summary>
        /// The O2 concentration used in Heat Input calculations for the current location during the current hour
        ///
        ///Field to be updated: Current MHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? O2cSdCalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("O2C_SD_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2C_SD_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// The O2 concentration used in subsequent calculations for the current location during the current hour
        ///
        ///Field to be updated: Current MHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? O2DryCalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("O2_Dry_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Dry_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the O2 Dry Hourly record needs to be checked
        /// </summary>
        public static bool? O2DryChecksNeededForH2o
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("O2_Dry_Checks_Needed_For_H2O")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Dry_Checks_Needed_For_H2O", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the O2 Dry Checks must be run in support of the current Heat Input Calculation
        /// </summary>
        public static bool? O2DryChecksNeededForHeatInput
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("O2_Dry_Checks_Needed_for_Heat_Input")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Dry_Checks_Needed_for_Heat_Input", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not O2 Dry Checks must be run in support of the NOx Rate Calculation
        /// </summary>
        public static bool? O2DryChecksNeededForNoxRateCalc
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("O2_Dry_Checks_Needed_For_Nox_Rate_Calc")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Dry_Checks_Needed_For_Nox_Rate_Calc", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the MHV O2 Dry MODC value used in calcultion checks to determine whether O2 Dry was substituted and is set in the O2 Dry section of HOURMHV-8.
        /// </summary>
        public static string O2DryModc
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("O2_Dry_MODC")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Dry_MODC", value);
            }
        }
        
        /// <summary>
        /// flag to indicate whether or not checks need to be launched for O2 Dry (or null) Monitor Hourly data
        /// </summary>
        public static bool? O2DryMonitorHourlyChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("O2_Dry_Monitor_Hourly_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Dry_Monitor_Hourly_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// the number of MonitorHourlyValueData records in the current hour that have the parameter_cd = "O2C" and a Moisture Basis of "D"
        /// </summary>
        public static int? O2DryMonitorHourlyCount
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("O2_Dry_Monitor_Hourly_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Dry_Monitor_Hourly_Count", value);
            }
        }
        
        /// <summary>
        /// The O2 Dry Monitor Hourly Value Records By Hour and Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueO2DryRow> O2DryMonitorHourlyValueRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("O2_Dry_Monitor_Hourly_Value_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueO2DryRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("O2_Dry_Monitor_Hourly_Value_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("O2_Dry_Monitor_Hourly_Value_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Indicates whether O2 Dry values are needed to support the reporting of MATS parameters.
        /// </summary>
        public static bool? O2DryNeededForMats
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("O2_Dry_Needed_for_MATS")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Dry_Needed_for_MATS", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Indicates whether O2 Dry values are needed to support the calculation of MATS parameters.
        /// </summary>
        public static bool? O2DryNeededForMatsCalculation
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("O2_Dry_Needed_for_MATS_Calculation")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Dry_Needed_for_MATS_Calculation", value);
            }
        }
        
        /// <summary>
        /// Defines whether or not a Monitor Hourly Value is required for O2 in support of the CO2 Concentration Calculation
        /// </summary>
        public static bool? O2DryNeededToSupportCo2Calculation
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("O2_Dry_Needed_To_Support_Co2_Calculation")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Dry_Needed_To_Support_Co2_Calculation", value);
            }
        }
        
        /// <summary>
        /// the number of MonitorHourlyValueData records in the current hour that have the parameter_cd = "O2C" and  Moisture Basis is NULL
        /// </summary>
        public static int? O2NullMonitorHourlyCount
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("O2_Null_Monitor_Hourly_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Null_Monitor_Hourly_Count", value);
            }
        }
        
        /// <summary>
        /// The O2 Monitor Hourly Value Records with a Null Basis By Hour and Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueO2NullRow> O2NullMonitorHourlyValueRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("O2_Null_Monitor_Hourly_Value_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueO2NullRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("O2_Null_Monitor_Hourly_Value_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("O2_Null_Monitor_Hourly_Value_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The O2 concentration used in subsequent calculations for the current location during the current hour
        ///
        ///Field to be updated: Current MHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? O2WetCalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("O2_Wet_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Wet_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the O2 Wet Hourly record needs to be checked
        /// </summary>
        public static bool? O2WetChecksNeededForH2o
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("O2_Wet_Checks_Needed_For_H2O")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Wet_Checks_Needed_For_H2O", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the O2 Wet Checks must be run in support of the current Heat Input Calculation
        /// </summary>
        public static bool? O2WetChecksNeededForHeatInput
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("O2_Wet_Checks_Needed_for_Heat_Input")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Wet_Checks_Needed_for_Heat_Input", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not O2 Wet Checks must be run in support of the NOx Rate Calculation
        /// </summary>
        public static bool? O2WetChecksNeededForNoxRateCalc
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("O2_Wet_Checks_Needed_For_Nox_Rate_Calc")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Wet_Checks_Needed_For_Nox_Rate_Calc", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Contains the MHV O2 Wet MODC value used in calcultion checks to determine whether O2 Wet was substituted and is set in the O2 Wet section of HOURMHV-8.
        /// </summary>
        public static string O2WetModc
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("O2_Wet_MODC")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Wet_MODC", value);
            }
        }
        
        /// <summary>
        /// flag to indicate whether or not checks need to be launched for O2 Wet (or null) Monitor Hourly data
        /// </summary>
        public static bool? O2WetMonitorHourlyChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("O2_Wet_Monitor_Hourly_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Wet_Monitor_Hourly_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// the number of MonitorHourlyValueData records in the current hour that have the parameter_cd = "O2C" and a Moisture Basis of "W"
        /// </summary>
        public static int? O2WetMonitorHourlyCount
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("O2_Wet_Monitor_Hourly_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Wet_Monitor_Hourly_Count", value);
            }
        }
        
        /// <summary>
        /// The O2 Wet Monitor Hourly Value Records By Hour and Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueO2WetRow> O2WetMonitorHourlyValueRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("O2_Wet_Monitor_Hourly_Value_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueO2WetRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("O2_Wet_Monitor_Hourly_Value_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("O2_Wet_Monitor_Hourly_Value_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Indicates whether O2 Wet values are needed to support the calculation of MATS parameters.
        /// </summary>
        public static bool? O2WetNeededForMats
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("O2_Wet_Needed_for_MATS")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Wet_Needed_for_MATS", value);
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Indicates whether O2 Wet values are needed to support the calculation of MATS parameters.
        /// </summary>
        public static bool? O2WetNeededForMatsCalculation
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("O2_Wet_Needed_for_MATS_Calculation")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Wet_Needed_for_MATS_Calculation", value);
            }
        }
        
        /// <summary>
        /// Defines whether or not a Monitor Hourly Value is required for O2 in support of the CO2 Concentration Calculation
        /// </summary>
        public static bool? O2WetNeededToSupportCo2Calculation
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("O2_Wet_Needed_To_Support_Co2_Calculation")));
            }
            set
            {
                EmParameters.SetCheckParameter("O2_Wet_Needed_To_Support_Co2_Calculation", value);
            }
        }
        
        /// <summary>
        /// The O2X Monitor Default records by a specific hour and location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorDefaultO2xRow> O2xMonitorDefaultRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("O2x_Monitor_Default_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorDefaultO2xRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("O2x_Monitor_Default_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("O2x_Monitor_Default_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the test record that is the ignored Prior daily int check, because the check was conducted when the unit was offline.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.DailyMiscellaneousTestPeriodData OfflineDailyIntRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Offline_Daily_Int_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.DailyMiscellaneousTestPeriodData(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Offline_Daily_Int_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Offline_Daily_Int_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Contain the object representing an online Daily Interference Check and including the row for that check.
        /// </summary>
        public static cLastDailyInterferenceCheckTest OnlineDailyIntCheck
        {
            get
            {
                return ((cLastDailyInterferenceCheckTest)(EmParameters.GetCheckParameter("Online_Daily_Int_Check")));
            }
            set
            {
                EmParameters.SetCheckParameter("Online_Daily_Int_Check", value);
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the test record that is the Prior daily interference check
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.DailyMiscellaneousTestPeriodData OnlineDailyIntRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Online_Daily_Int_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.DailyMiscellaneousTestPeriodData(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Online_Daily_Int_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Online_Daily_Int_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The on/off calibration test records for a particular location.
        ///
        ///Rows filtered to current location and sorted by End_Date descending, End_Hour descending and End_Min descending.
        ///
        ///This parameter is for the emission processes and is loaded through the CheckEm.OnOffCalibrationTestAllData() table function.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.OnOffCalibrationTestAllData> OocTestRecordsByLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("OOC_Test_Records_by_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.OnOffCalibrationTestAllData>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("OOC_Test_Records_by_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("OOC_Test_Records_by_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// An array of date list.  Each element represents a location in a monitoring plan, and contains a list of operating dates for the location that are less than or equal to the current date.
        /// </summary>
        public static List<DateTime>[] OperatingDateArray
        {
            get
            {
                return ((List<DateTime>[])(EmParameters.GetCheckParameter("Operating_Date_Array")));
            }
            set
            {
                EmParameters.SetCheckParameter("Operating_Date_Array", value);
            }
        }
        
        /// <summary>
        /// Operating Supp Data Records for the location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpOpSuppDataRow> OperatingSuppDataRecordsByLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Operating_Supp_Data_Records_by_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpOpSuppDataRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Operating_Supp_Data_Records_by_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Operating_Supp_Data_Records_by_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The fieldnames of invalid data in the OPHOURS Summary Value record.
        /// </summary>
        public static string OphoursSummaryInvalidFields
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("OPHOURS_Summary_Invalid_Fields")));
            }
            set
            {
                EmParameters.SetCheckParameter("OPHOURS_Summary_Invalid_Fields", value);
            }
        }
        
        /// <summary>
        /// The fieldnames of invalid data in the OPTIME Summary Value record.
        /// </summary>
        public static string OptimeSummaryInvalidFields
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("OPTIME_Summary_Invalid_Fields")));
            }
            set
            {
                EmParameters.SetCheckParameter("OPTIME_Summary_Invalid_Fields", value);
            }
        }
        
        /// <summary>
        /// The recalculated ozone-season-to-date value for total heat input.
        /// </summary>
        public static decimal? OsHitCalculatedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("OS_HIT_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("OS_HIT_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// The recalculated ozone-season-to-date value for NOx Mass.
        /// </summary>
        public static decimal? OsNoxMassCalculatedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("OS_NOx_Mass_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("OS_NOx_Mass_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// The recalculated ozone-season-to-date value for total operating hours.
        /// </summary>
        public static int? OsOphoursCalculatedValue
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("OS_OPHOURS_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("OS_OPHOURS_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// The recalculated ozone-season-to-date value for total operating time.
        /// </summary>
        public static decimal? OsOptimeCalculatedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("OS_OPTIME_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("OS_OPTIME_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// Indicates if the units in the configuration report ozone season totals.
        /// </summary>
        public static bool? OsReportingRequirement
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("OS_Reporting_Requirement")));
            }
            set
            {
                EmParameters.SetCheckParameter("OS_Reporting_Requirement", value);
            }
        }
        
        /// <summary>
        /// Contians the override Bias Adjustment Factor to use primarily for RATA Status OOC results.
        /// </summary>
        public static decimal? OverrideRataBaf
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Override_RATA_BAF")));
            }
            set
            {
                EmParameters.SetCheckParameter("Override_RATA_BAF", value);
            }
        }
        
        /// <summary>
        /// Lists all combinations of valid Parameter Codes and  Units of Measure codes with min and max values.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.ParameterUomRow> ParameterUnitsOfMeasureLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Parameter_Units_Of_Measure_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.ParameterUomRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Parameter_Units_Of_Measure_Lookup_Table", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Parameter_Units_Of_Measure_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains the year/qtr information when Missing Op data is the result for PEI Status.
        /// </summary>
        public static string PeiMissingOpDataInfo
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("PEI_Missing_Op_Data_Info")));
            }
            set
            {
                EmParameters.SetCheckParameter("PEI_Missing_Op_Data_Info", value);
            }
        }
        
        /// <summary>
        /// Indicates if the fuel flow component record is required to undergo PEI checking as part of the Appendix D Status evaluation
        /// </summary>
        public static bool? PeiRequired
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("PEI_Required")));
            }
            set
            {
                EmParameters.SetCheckParameter("PEI_Required", value);
            }
        }
        
        /// <summary>
        /// All PEI test summary records for the location.  Used by the QA Status evaluation.
        ///
        ///PEI tests.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow> PeiTestRecordsByLocationForQaStatus
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("PEI_Test_Records_By_Location_For_QA_Status")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("PEI_Test_Records_By_Location_For_QA_Status", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("PEI_Test_Records_By_Location_For_QA_Status", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains the sum of the products "Pipe Load" times "Pipe Operating Time" for all pipes in the monitoring plan during the current hour
        /// </summary>
        public static decimal? PipeLoadtimesoptimeAccumulator
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Pipe_LoadTimesOpTime_Accumulator")));
            }
            set
            {
                EmParameters.SetCheckParameter("Pipe_LoadTimesOpTime_Accumulator", value);
            }
        }
        
        /// <summary>
        /// Contains the System Id of the primary bypass system when a primary bypass system is active.
        /// </summary>
        public static string PrimaryBypassActiveBypassSystemId
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Primary_Bypass_Active_Bypass_System_Id")));
            }
            set
            {
                EmParameters.SetCheckParameter("Primary_Bypass_Active_Bypass_System_Id", value);
            }
        }
        
        /// <summary>
        /// Indicates whether a primary bypass system (stack) was active during the current hour.
        /// </summary>
        public static bool? PrimaryBypassActiveForHour
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Primary_Bypass_Active_For_Hour")));
            }
            set
            {
                EmParameters.SetCheckParameter("Primary_Bypass_Active_For_Hour", value);
            }
        }
        
        /// <summary>
        /// Indicates whether a primary bypass system (stack) was active during the quarter of an emission report.
        /// </summary>
        public static bool? PrimaryBypassActiveInQuarter
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Primary_Bypass_Active_In_Quarter")));
            }
            set
            {
                EmParameters.SetCheckParameter("Primary_Bypass_Active_In_Quarter", value);
            }
        }
        
        /// <summary>
        /// Contains the System Id of the primary system when a primary bypass system is active.
        /// </summary>
        public static string PrimaryBypassActivePrimarySystemId
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Primary_Bypass_Active_Primary_System_Id")));
            }
            set
            {
                EmParameters.SetCheckParameter("Primary_Bypass_Active_Primary_System_Id", value);
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the event record that is the Prior event in the Appendix D (Accuracy) Status evaluation.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow PriorAccuracyEventRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Prior_Accuracy_Event_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Prior_Accuracy_Event_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Prior_Accuracy_Event_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the event record that is the Prior event in the Daily Calibration Status evaluation.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow PriorDailyCalEventRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Prior_Daily_Cal_Event_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Prior_Daily_Cal_Event_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Prior_Daily_Cal_Event_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The first op hour after the last non op hour covered by the Prior Daily Cal Record.
        /// </summary>
        public static DateTime? PriorDailyCalFirstOpHourAfterLastNonOpHour
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("Prior_Daily_Cal_First_Op_Hour_After_Last_Non_Op_Hour")));
            }
            set
            {
                EmParameters.SetCheckParameter("Prior_Daily_Cal_First_Op_Hour_After_Last_Non_Op_Hour", value);
            }
        }
        
        /// <summary>
        /// Contains the last covered non-op hour covered by the Prior Daily Cal Record.
        /// </summary>
        public static DateTime? PriorDailyCalLastCoveredNonOpHour
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("Prior_Daily_Cal_Last_Covered_Non_Op_Hour")));
            }
            set
            {
                EmParameters.SetCheckParameter("Prior_Daily_Cal_Last_Covered_Non_Op_Hour", value);
            }
        }
        
        /// <summary>
        /// Calc Test Res corresponding to a Daily Cal Record
        /// </summary>
        public static string PriorDailyCalRecCalcTestRes
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Prior_Daily_Cal_Rec_Calc_Test_Res")));
            }
            set
            {
                EmParameters.SetCheckParameter("Prior_Daily_Cal_Rec_Calc_Test_Res", value);
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the test record that is the Prior daily cal test.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDailyCalibrationRow PriorDailyCalRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Prior_Daily_Cal_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDailyCalibrationRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Prior_Daily_Cal_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Prior_Daily_Cal_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the event record that is the Prior event in the Leak Check evaluation.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow PriorLeakEventRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Prior_Leak_Event_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Prior_Leak_Event_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Prior_Leak_Event_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The date the prior leak check expires (with and without extension).
        /// </summary>
        public static DateTime? PriorLeakExpirationDate
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("Prior_Leak_Expiration_Date")));
            }
            set
            {
                EmParameters.SetCheckParameter("Prior_Leak_Expiration_Date", value);
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the test record that is the Prior Leak Check.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow PriorLeakRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Prior_Leak_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Prior_Leak_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Prior_Leak_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the event record that is the Prior event in the Linearity Status evaluation.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow PriorLinearityEventRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Prior_Linearity_Event_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Prior_Linearity_Event_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Prior_Linearity_Event_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the test record that is the Prior linearity test.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow PriorLinearityRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Prior_Linearity_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Prior_Linearity_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Prior_Linearity_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the test record that is the Prior max level RATA test.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow PriorMaxLevelRataRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Prior_Max_Level_RATA_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Prior_Max_Level_RATA_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Prior_Max_Level_RATA_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the test record that is the Prior Multi level RATA test.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow PriorMultiLevelRataRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Prior_Multi_Level_RATA_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Prior_Multi_Level_RATA_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Prior_Multi_Level_RATA_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the event record that is the Prior event in the Appendix D (PEI) Status evaluation.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow PriorPeiEventRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Prior_PEI_Event_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Prior_PEI_Event_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Prior_PEI_Event_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the test record that is the Prior PEI test.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow PriorPeiRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Prior_PEI_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Prior_PEI_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Prior_PEI_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the event record that is the Prior event in the RATA Status evaluation.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow PriorRataEventRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Prior_RATA_Event_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Prior_RATA_Event_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Prior_RATA_Event_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the Prior RATA record for hourly RATA status is an Alternate Single Level RATA.
        /// </summary>
        public static bool? PriorRataIsAlternateSingleLevelRata
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Prior_Rata_Is_Alternate_Single_Level_RATA")));
            }
            set
            {
                EmParameters.SetCheckParameter("Prior_Rata_Is_Alternate_Single_Level_RATA", value);
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the test record that is the Prior RATA test.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow PriorRataRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Prior_RATA_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Prior_RATA_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Prior_RATA_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Contains the program code information needed to produce program list for checks.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Lookup.Table.ProgramCodeRow> ProgramCodeTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Program_Code_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Lookup.Table.ProgramCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Program_Code_Table", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Program_Code_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains a list of ozone season program codes.
        /// </summary>
        public static string ProgramIsOzoneSeasonList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Program_is_Ozone_Season_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("Program_is_Ozone_Season_List", value);
            }
        }
        
        /// <summary>
        /// Contains a list of program codes for programs that require NOXC system certification.
        /// </summary>
        public static string ProgramRequiresNoxcSystemCertificationList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Program_Requires_NOXC_System_Certification_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("Program_Requires_NOXC_System_Certification_List", value);
            }
        }
        
        /// <summary>
        /// Contains a list of program codes for programs that require NOX system certification.
        /// </summary>
        public static string ProgramRequiresNoxSystemCertificationList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Program_Requires_NOX_System_Certification_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("Program_Requires_NOX_System_Certification_List", value);
            }
        }
        
        /// <summary>
        /// Contains a list of program codes for programs that require SO2 certification.
        /// </summary>
        public static string ProgramRequiresSo2SystemCertificationList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Program_Requires_SO2_System_Certification_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("Program_Requires_SO2_System_Certification_List", value);
            }
        }
        
        /// <summary>
        /// Contains a list of program codes for programs that use the RUE excemption.
        /// </summary>
        public static string ProgramUsesRueList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Program_Uses_RUE_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("Program_Uses_RUE_List", value);
            }
        }
        
        /// <summary>
        /// Contains the list of gas component codes in a Protocol Gas row that are balance components.
        /// </summary>
        public static string ProtocolGasBalanceComponentList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Protocol_Gas_Balance_Component_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("Protocol_Gas_Balance_Component_List", value);
            }
        }
        
        /// <summary>
        /// Contains the list of gas component codes in a Protocol Gas row that are duplicates.
        /// </summary>
        public static string ProtocolGasDuplicateComponentList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Protocol_Gas_Duplicate_Component_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("Protocol_Gas_Duplicate_Component_List", value);
            }
        }
        
        /// <summary>
        /// Contains the list of gas component codes in a Protocol Gas row that a source should only use exclusive of other gas component codes.
        /// </summary>
        public static string ProtocolGasExclusiveComponentList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Protocol_Gas_Exclusive_Component_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("Protocol_Gas_Exclusive_Component_List", value);
            }
        }
        
        /// <summary>
        /// Contains the list of invalid Gas Component Codes.
        /// </summary>
        public static string ProtocolGasInvalidComponentList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Protocol_Gas_Invalid_Component_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("Protocol_Gas_Invalid_Component_List", value);
            }
        }
        
        /// <summary>
        /// A lookup table of Protocol Gas Vendors.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.ProtocolGasVendorRow> ProtocolGasVendorLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Protocol_Gas_Vendor_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.ProtocolGasVendorRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Protocol_Gas_Vendor_Lookup_Table", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Protocol_Gas_Vendor_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The QA Cert Events records for the monitoring configuration in the EM file being evaluated.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow> QaCertEventsForEmEvaluation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("QA_Cert_Events_for_EM_Evaluation")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("QA_Cert_Events_for_EM_Evaluation", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("QA_Cert_Events_for_EM_Evaluation", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Array of dictionaries containing QaCertficationSupplementalDataClass objects that are used to hold and increament operating day and hour counts for QA Certification Events.
        /// </summary>
        public static Dictionary<string, QaCertificationSupplementalData>[] QaCertEventSuppDataDictionaryArray
        {
            get
            {
                return ((Dictionary<string, QaCertificationSupplementalData>[])(EmParameters.GetCheckParameter("QA_Cert_Event_Supp_Data_Dictionary_Array")));
            }
            set
            {
                EmParameters.SetCheckParameter("QA_Cert_Event_Supp_Data_Dictionary_Array", value);
            }
        }
        
        /// <summary>
        /// A dictionary with a COMPONENT_ID as a key and a list of associated QA Cert Event Supp Data objects as a value.
        /// </summary>
        public static Dictionary<string, List<QaCertificationSupplementalData>> QaCertEventSuppDataDictionaryByComponent
        {
            get
            {
                return ((Dictionary<string, List<QaCertificationSupplementalData>>)(EmParameters.GetCheckParameter("QA_Cert_Event_Supp_Data_Dictionary_by_Component")));
            }
            set
            {
                EmParameters.SetCheckParameter("QA_Cert_Event_Supp_Data_Dictionary_by_Component", value);
            }
        }
        
        /// <summary>
        /// A dictionary with a MON_SYS_ID as a key and a list of associated QA Cert Event Supp Data objects as a value.
        /// </summary>
        public static Dictionary<string, List<QaCertificationSupplementalData>> QaCertEventSuppDataDictionaryBySystem
        {
            get
            {
                return ((Dictionary<string, List<QaCertificationSupplementalData>>)(EmParameters.GetCheckParameter("QA_Cert_Event_Supp_Data_Dictionary_by_System")));
            }
            set
            {
                EmParameters.SetCheckParameter("QA_Cert_Event_Supp_Data_Dictionary_by_System", value);
            }
        }
        
        /// <summary>
        /// The QA Certification Event records for the location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow> QaCertificationEventRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Qa_Certification_Event_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Qa_Certification_Event_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Qa_Certification_Event_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The QA Cert Test records for the monitoring configuration in the EM file being evaluated.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow> QaCertTestsForEmEvaluation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("QA_Cert_Tests_for_EM_Evaluation")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("QA_Cert_Tests_for_EM_Evaluation", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("QA_Cert_Tests_for_EM_Evaluation", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains the earliest System Component begin date for a component.
        ///
        ///Currently used in the Weekly System Integrity Status checks.
        /// </summary>
        public static DateTime? QaStatusComponentBeginDate
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("QA_Status_Component_Begin_Date")));
            }
            set
            {
                EmParameters.SetCheckParameter("QA_Status_Component_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// Contains the earliest System Component begin date/hour for a component.
        ///
        ///Currently used in the Daily Calibration Status checks.
        /// </summary>
        public static DateTime? QaStatusComponentBeginDatehour
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("QA_Status_Component_Begin_Datehour")));
            }
            set
            {
                EmParameters.SetCheckParameter("QA_Status_Component_Begin_Datehour", value);
            }
        }
        
        /// <summary>
        /// Contains the COMPONENT_ID for the current MHV or MATS MHV record.  
        ///
        ///Used in some QA status checks.
        /// </summary>
        public static string QaStatusComponentId
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("QA_Status_Component_Id")));
            }
            set
            {
                EmParameters.SetCheckParameter("QA_Status_Component_Id", value);
            }
        }
        
        /// <summary>
        /// Contains the COMPONENT_IDENTIFIER for the current MHV or MATS MHV record.  
        ///
        ///Used in some QA status checks.
        /// </summary>
        public static string QaStatusComponentIdentifier
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("QA_Status_Component_Identifier")));
            }
            set
            {
                EmParameters.SetCheckParameter("QA_Status_Component_Identifier", value);
            }
        }
        
        /// <summary>
        /// Contains the currennt MHV or MATS MHV row's component type for use with status checking.
        /// </summary>
        public static string QaStatusComponentTypeCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("QA_Status_Component_Type_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("QA_Status_Component_Type_Code", value);
            }
        }
        
        /// <summary>
        /// Contains the parameter code of the derived or monitor hourly record for which a QA status will run.
        /// </summary>
        public static string QaStatusHourlyParameterCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("QA_Status_Hourly_Parameter_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("QA_Status_Hourly_Parameter_Code", value);
            }
        }
        
        /// <summary>
        /// Contains the MATS Emission Recording Begin Date for the current MATS monitor hourly value row.
        ///
        ///* Never set this parameter as a required parameter. *
        ///
        ///This parameter is set in MatsMhv-13 and is only populated for MATS systems/components.
        /// </summary>
        public static DateTime? QaStatusMatsErbDate
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("QA_Status_MATS_ERB_Date")));
            }
            set
            {
                EmParameters.SetCheckParameter("QA_Status_MATS_ERB_Date", value);
            }
        }
        
        /// <summary>
        /// Contains the primary or primary bypass system id on which to perform a QA status when a primary bypass system is involved.
        /// </summary>
        public static string QaStatusPrimaryOrPrimaryBypassSystemId
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("QA_Status_Primary_Or_Primary_Bypass_System_Id")));
            }
            set
            {
                EmParameters.SetCheckParameter("QA_Status_Primary_Or_Primary_Bypass_System_Id", value);
            }
        }
        
        /// <summary>
        /// Contains the SYS_DESIGNATION_CD for the current MHV or MATS MHV record.  
        ///
        ///Used in some QA status checks.
        /// </summary>
        public static string QaStatusSystemDesignationCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("QA_Status_System_Designation_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("QA_Status_System_Designation_Code", value);
            }
        }
        
        /// <summary>
        /// Contains the MON_SYS_ID for the current MHV or MATS MHV record.  
        ///
        ///Used in some QA status checks.
        /// </summary>
        public static string QaStatusSystemId
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("QA_Status_System_Id")));
            }
            set
            {
                EmParameters.SetCheckParameter("QA_Status_System_Id", value);
            }
        }
        
        /// <summary>
        /// Contains the SYSTEM_IDENTIFIER for the current MHV or MATS MHV record.  
        ///
        ///Used in some QA status checks.
        /// </summary>
        public static string QaStatusSystemIdentifier
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("QA_Status_System_Identifier")));
            }
            set
            {
                EmParameters.SetCheckParameter("QA_Status_System_Identifier", value);
            }
        }
        
        /// <summary>
        /// Contains the System Type for the current Monitor Hour Value or MATS Monitor Hourly Value record for which a QA status is being evaluated.
        /// </summary>
        public static string QaStatusSystemTypeCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("QA_Status_System_Type_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("QA_Status_System_Type_Code", value);
            }
        }
        
        /// <summary>
        /// The QA Supplemental Attribute records for the location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppAttributeRow> QaSupplementalAttributeRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("QA_Supplemental_Attribute_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppAttributeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("QA_Supplemental_Attribute_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("QA_Supplemental_Attribute_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// This parameter contains a list of Location Names with missing peeking qualification percent entries.
        /// </summary>
        public static string QualificationPercentMissingList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Qualification_Percent_Missing_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("Qualification_Percent_Missing_List", value);
            }
        }
        
        /// <summary>
        /// Cross-Check Table defining a tolerance (amount of error that is allowable in a calculation) per parameter and unit of measure
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.QuarterlyEmissionsTolerancesRow> QuarterlyEmissionsTolerancesCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Quarterly_Emissions_Tolerances_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.QuarterlyEmissionsTolerancesRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Quarterly_Emissions_Tolerances_Cross_Check_Table", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Quarterly_Emissions_Tolerances_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Indicates wheather an MHV record requires a Quarterly Gas Audit Status Evaluation.
        /// </summary>
        public static bool? QuarterlyGasAuditStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Quarterly_Gas_Audit_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Quarterly_Gas_Audit_Status", value);
            }
        }
        
        /// <summary>
        /// The number of operating levels that must be or were performed in a RATA following a certification event.
        /// </summary>
        public static int? RataEventOperatingLevelCount
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("RATA_Event_Operating_Level_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("RATA_Event_Operating_Level_Count", value);
            }
        }
        
        /// <summary>
        /// Contains the year/qtr information when Missing Op data is the result for RATA Status.
        /// </summary>
        public static string RataMissingOpDataInfo
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("RATA_Missing_Op_Data_Info")));
            }
            set
            {
                EmParameters.SetCheckParameter("RATA_Missing_Op_Data_Info", value);
            }
        }
        
        /// <summary>
        /// The bias adjustment factor from the prior test.
        /// </summary>
        public static decimal? RataStatusBaf
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("RATA_Status_BAF")));
            }
            set
            {
                EmParameters.SetCheckParameter("RATA_Status_BAF", value);
            }
        }
        
        /// <summary>
        /// Indicates if an MHV or DHV record requires the RATA Status Evaluation.
        /// </summary>
        public static bool? RataStatusRequired
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("RATA_Status_Required")));
            }
            set
            {
                EmParameters.SetCheckParameter("RATA_Status_Required", value);
            }
        }
        
        /// <summary>
        /// All RATA test summary records for the location.  Used by the QA Status evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow> RataTestRecordsByLocationForQaStatus
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("RATA_Test_Records_By_Location_For_QA_Status")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("RATA_Test_Records_By_Location_For_QA_Status", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("RATA_Test_Records_By_Location_For_QA_Status", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Generic field used to display a reported emissions value in an error message.
        /// </summary>
        public static string ReportedEmissionsValue
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Reported_Emissions_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Reported_Emissions_Value", value);
            }
        }
        
        /// <summary>
        /// Returns the Reporting Frequency Code for each location in a monitoring plan, starting with the current quarter and going back to the earliest quarter for which each location was in an MP.
        ///
        ///Columns: Mon_Loc_Id, Oris_Code, Location_Name, Calendar_Year, Quarter, Reprt_Freq_Cd
        ///
        ///Primarily used by Emission Report QA Status checks.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.ReportingFrequencyByLocationQuarter> ReportingFrequencyByLocationQuarter
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Reporting_Frequency_by_Location_Quarter")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.ReportingFrequencyByLocationQuarter>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Reporting_Frequency_by_Location_Quarter", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Reporting_Frequency_by_Location_Quarter", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether there are any hours of operation in the reporting period in the emissions file being evaluated.
        /// </summary>
        public static bool? ReportingPeriodOperating
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Reporting_Period_Operating")));
            }
            set
            {
                EmParameters.SetCheckParameter("Reporting_Period_Operating", value);
            }
        }
        
        /// <summary>
        /// The first day of emissions reporting for the RGGI program.
        /// </summary>
        public static DateTime? RggiBeginDate
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("RGGI_Begin_Date")));
            }
            set
            {
                EmParameters.SetCheckParameter("RGGI_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// The first quarter in the current year of the reporting period when a location was affected by RGGI.
        /// </summary>
        public static int? RggiStartQuarter
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("RGGI_Start_Quarter")));
            }
            set
            {
                EmParameters.SetCheckParameter("RGGI_Start_Quarter", value);
            }
        }
        
        /// <summary>
        /// The recalculated quarterly value for CO2 Mass.
        /// </summary>
        public static decimal? RptPeriodCo2MassCalculatedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Rpt_Period_CO2_Mass_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Rpt_Period_CO2_Mass_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// The recalculated quarterly value for heat input.
        /// </summary>
        public static decimal? RptPeriodHiCalculatedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Rpt_Period_HI_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Rpt_Period_HI_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// The recalculated quarterly value for NOx Mass.
        /// </summary>
        public static decimal? RptPeriodNoxMassCalculatedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Rpt_Period_NOx_Mass_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Rpt_Period_NOx_Mass_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// The recalculated quarterly value for NOx Emission Rate.
        /// </summary>
        public static decimal? RptPeriodNoxRateCalculatedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Rpt_Period_NOx_Rate_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Rpt_Period_NOx_Rate_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// The total number of operating hours that NOx Rate was calculated for this location in the reporting period.
        /// </summary>
        public static int? RptPeriodNoxRateHours
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Rpt_Period_NOx_Rate_Hours")));
            }
            set
            {
                EmParameters.SetCheckParameter("Rpt_Period_NOx_Rate_Hours", value);
            }
        }
        
        /// <summary>
        /// The sum of the hourly NOx Rate values calculated for this location in the reporting period.
        /// </summary>
        public static string RptPeriodNoxRateSum
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Rpt_Period_NOx_Rate_Sum")));
            }
            set
            {
                EmParameters.SetCheckParameter("Rpt_Period_NOx_Rate_Sum", value);
            }
        }
        
        /// <summary>
        /// The recalculated quarterly value for operating days.
        /// </summary>
        public static int? RptPeriodOpDaysCalculatedValue
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Rpt_Period_Op_Days_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Rpt_Period_Op_Days_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// The recalculated quarterly value for operating hours.
        /// </summary>
        public static int? RptPeriodOpHoursCalculatedValue
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Rpt_Period_Op_Hours_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Rpt_Period_Op_Hours_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// The recalculated quarterly value for operating time.
        /// </summary>
        public static decimal? RptPeriodOpTimeCalculatedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Rpt_Period_Op_Time_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Rpt_Period_Op_Time_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// The recalculated quarterly value for SO2 Mass.
        /// </summary>
        public static decimal? RptPeriodSo2MassCalculatedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Rpt_Period_SO2_Mass_Calculated_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Rpt_Period_SO2_Mass_Calculated_Value", value);
            }
        }
        
        /// <summary>
        /// Accumulator variable used to sum up the Appendix D SO2 Mass Rate from all fuel sources
        /// </summary>
        public static decimal? So2AppDAccumulator
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("So2_App_D_Accumulator")));
            }
            set
            {
                EmParameters.SetCheckParameter("So2_App_D_Accumulator", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the active method for SO2 at the current location during the current hour is for Appendix D
        /// </summary>
        public static bool? So2AppDMethodActiveForHour
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("SO2_App_D_Method_Active_For_Hour")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2_App_D_Method_Active_For_Hour", value);
            }
        }
        
        /// <summary>
        /// Bypass Approach Code of active SO2 Monitor Method entries for the current configuration during the current hour
        /// </summary>
        public static string So2BypassCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("SO2_Bypass_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2_Bypass_Code", value);
            }
        }
        
        /// <summary>
        /// Resulting value when the SO2 Mass Rate is calculated.
        ///
        ///Field to be updated: Current DHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? So2CalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("SO2_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// Resulting value when the SO2 Concentration record's Unadjusted Hourly Value is multiplied by the appropriate BAF from the most recent successful RATA test.
        ///
        ///Field to be updated: Current MHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? So2cCalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("SO2C_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2C_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// Boolean value to describe whether or not there is an SO2 method for CEM defined in the monitoring plan that is active during the current hour
        /// </summary>
        public static bool? So2CemMethodActiveForHour
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("SO2_CEM_Method_Active_For_Hour")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2_CEM_Method_Active_For_Hour", value);
            }
        }
        
        /// <summary>
        /// Indicates whether reported SO2C is only used for the MATS program and that ARP, both C-SAPR SO2, and older SO2 programs are not active for the hour.
        /// </summary>
        public static bool? So2cIsOnlyForMats
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("SO2C_Is_Only_for_MATS")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2C_Is_Only_for_MATS", value);
            }
        }
        
        /// <summary>
        /// Flag to indicate whether or not it is necessary to perform SO2 Derived Hourly checks at this location for the current hour
        /// </summary>
        public static bool? So2DerivedHourlyChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("SO2_Derived_Hourly_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2_Derived_Hourly_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// The number of DerivedHourlyValueData records with parameter "SO2" that have been reported for the Current Hour
        /// </summary>
        public static int? So2DerivedHourlyCount
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("SO2_Derived_Hourly_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2_Derived_Hourly_Count", value);
            }
        }
        
        /// <summary>
        /// flag to indicate whether or not all Derived Hourly checks for SO2 have passed successfully
        /// </summary>
        public static bool? So2DerivedHourlyStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("SO2_Derived_Hourly_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2_Derived_Hourly_Status", value);
            }
        }
        
        /// <summary>
        /// The SO2 and SO2M Derived Hourly Value Records By Hour and Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueSo2Row> So2DerivedHourlyValueRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("SO2_Derived_Hourly_Value_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueSo2Row>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("SO2_Derived_Hourly_Value_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("SO2_Derived_Hourly_Value_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// A code that references an equation in MonitoringFormulaData that will be used for calculations for the current record (specific to Parameter SO2)
        /// </summary>
        public static bool? So2EquationCode
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("SO2_Equation_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2_Equation_Code", value);
            }
        }
        
        /// <summary>
        /// Boolean value to describe whether or not there is an SO2 method for F23 defined in the monitoring plan that is active during the current hour
        /// </summary>
        public static bool? So2F23MethodActiveForHour
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("SO2_F23_Method_Active_For_Hour")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2_F23_Method_Active_For_Hour", value);
            }
        }
        
        /// <summary>
        /// Indicates if SO2 Monitor Method for the current configuration during the current hour uses fuel-specific missing data approach
        /// </summary>
        public static bool? So2FuelSpecificMissingData
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("So2_Fuel_Specific_Missing_Data")));
            }
            set
            {
                EmParameters.SetCheckParameter("So2_Fuel_Specific_Missing_Data", value);
            }
        }
        
        /// <summary>
        /// Indicates whether an SO2 HPFF record exists for the current hour.
        ///
        ///This parameter is initialized to false in HOUROP-3 and set to true in HOURAD-24.
        /// </summary>
        public static bool? So2HpffExists
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("SO2_HPFF_Exists")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2_HPFF_Exists", value);
            }
        }
        
        /// <summary>
        /// Resulting value when the SO2 Mass is calculated for LME.
        ///
        ///Field to be updated: Current DHV Record.CalcAdjustedHourlyValue
        /// </summary>
        public static decimal? So2mCalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("SO2M_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2M_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// Flag to indicate whether or not it is necessary to perform SO2M Derived Hourly checks at this location for the current hour
        /// </summary>
        public static bool? So2mDerivedChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("SO2M_Derived_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2M_Derived_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// flag to indicate whether or not all Derived Hourly checks for SO2M have passed successfully
        /// </summary>
        public static bool? So2mDerivedHourlyStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("SO2M_Derived_Hourly_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2M_Derived_Hourly_Status", value);
            }
        }
        
        /// <summary>
        /// Method Code of active SO2 Monitor Method entries for the current configuration during the current hour
        /// </summary>
        public static string So2MethodCode
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("SO2_Method_Code")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2_Method_Code", value);
            }
        }
        
        /// <summary>
        /// flag to indicate whether or not checks need to be launched for SO2 Monitor Hourly data
        /// </summary>
        public static bool? So2MonitorHourlyChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("SO2_Monitor_Hourly_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2_Monitor_Hourly_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// The number of MonitorHourlyValueData records that have been defined with paramter "SO2C" for the current hour
        /// </summary>
        public static int? So2MonitorHourlyCount
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("So2_Monitor_Hourly_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("So2_Monitor_Hourly_Count", value);
            }
        }
        
        /// <summary>
        /// The SO2 Monitor Hourly Value Records By Hour and Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueSo2cRow> So2MonitorHourlyValueRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("SO2_Monitor_Hourly_Value_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorHrlyValueSo2cRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("SO2_Monitor_Hourly_Value_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("SO2_Monitor_Hourly_Value_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Flag to indicate whether or not it is necessary to perform SO2R Derived Hourly checks at this location for the current hour
        /// </summary>
        public static bool? So2rDerivedChecksNeeded
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("SO2R_Derived_Checks_Needed")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2R_Derived_Checks_Needed", value);
            }
        }
        
        /// <summary>
        /// The number of DerivedHourlyValueData records with parameter "SO2R" that have been reported for the Current Hour
        /// </summary>
        public static int? So2rDerivedHourlyCount
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("SO2R_Derived_Hourly_Count")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2R_Derived_Hourly_Count", value);
            }
        }
        
        /// <summary>
        /// flag to indicate whether or not all Derived Hourly checks for SO2R have passed successfully
        /// </summary>
        public static bool? So2rDerivedHourlyStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("SO2R_Derived_Hourly_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2R_Derived_Hourly_Status", value);
            }
        }
        
        /// <summary>
        /// The SO2R Derived Hourly Value Records By Hour and Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueSo2rRow> So2rDerivedHourlyValueRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("SO2R_Derived_Hourly_Value_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpDerivedHrlyValueSo2rRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("SO2R_Derived_Hourly_Value_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("SO2R_Derived_Hourly_Value_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The first quarter in the current year of the reporting period when SO2 method was active for the location.
        /// </summary>
        public static int? So2StartQuarter
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("SO2_Start_Quarter")));
            }
            set
            {
                EmParameters.SetCheckParameter("SO2_Start_Quarter", value);
            }
        }
        
        /// <summary>
        /// Span Records at location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.MonitorSpanRow> SpanRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Span_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.MonitorSpanRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Span_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Span_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the unit (or units linked to the location) burned OOL, PRS, PRG, or PRS fuel during the hour.
        /// </summary>
        public static bool? SpecialFuelBurned
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Special_Fuel_Burned")));
            }
            set
            {
                EmParameters.SetCheckParameter("Special_Fuel_Burned", value);
            }
        }
        
        /// <summary>
        /// Indicates if it has been determined that the unit (or units linked to the location) burned OOL, PRS, PRG, or PRS fuel during the hour.
        /// </summary>
        public static bool? SpecialFuelDetermined
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Special_Fuel_Determined")));
            }
            set
            {
                EmParameters.SetCheckParameter("Special_Fuel_Determined", value);
            }
        }
        
        /// <summary>
        /// The value calculated for Stack Flow based on the Bias Adjustment Facotr
        /// </summary>
        public static decimal? StackFlowCalculatedAdjustedValue
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Stack_Flow_Calculated_Adjusted_Value")));
            }
            set
            {
                EmParameters.SetCheckParameter("Stack_Flow_Calculated_Adjusted_Value", value);
            }
        }
        
        /// <summary>
        /// Sums the total heat input at all common and multiple stacks for a given hour in a monitoring plan by multiplying heat input rate times op time at each unit
        /// </summary>
        public static decimal? StackHeatinputtimesoptimeAccumulator
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Stack_HeatInputTimesOpTime_Accumulator")));
            }
            set
            {
                EmParameters.SetCheckParameter("Stack_HeatInputTimesOpTime_Accumulator", value);
            }
        }
        
        /// <summary>
        /// Contains the sum of the products "Stack Load" times "Stack Operating Time" for all stacks in the monitoring plan during the current hour
        /// </summary>
        public static decimal? StackLoadtimesoptimeAccumulator
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Stack_Loadtimesoptime_Accumulator")));
            }
            set
            {
                EmParameters.SetCheckParameter("Stack_Loadtimesoptime_Accumulator", value);
            }
        }
        
        /// <summary>
        /// Sums Operating Time for all stacks in Monitoring Plan during current hour
        /// </summary>
        public static decimal? StackOptimeAccumulator
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Stack_Optime_Accumulator")));
            }
            set
            {
                EmParameters.SetCheckParameter("Stack_Optime_Accumulator", value);
            }
        }
        
        /// <summary>
        /// The first quarter in the current year of the reporting period when any method was active for the location.
        /// </summary>
        public static int? StartQuarter
        {
            get
            {
                return ((int?)(EmParameters.GetCheckParameter("Start_Quarter")));
            }
            set
            {
                EmParameters.SetCheckParameter("Start_Quarter", value);
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the test record that is the subsequent recertification linearity test.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow SubsequentLinearityRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Subsequent_Linearity_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Subsequent_Linearity_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Subsequent_Linearity_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Used by the Hourly QA Status checks to store the test record that is the subsequent recertification RATA test.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow SubsequentRataRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("Subsequent_RATA_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Subsequent_RATA_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Subsequent_RATA_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Records in SummaryValue table that are consistent with the current reporting period
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemSummaryValueRow> SummaryValueRecordsByReportingPeriodLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Summary_Value_Records_By_Reporting_Period_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemSummaryValueRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Summary_Value_Records_By_Reporting_Period_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Summary_Value_Records_By_Reporting_Period_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Monitor_System_Component records linked to the current component including the fields from the associated system record.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemComponentRow> SystemComponentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("System_Component_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemComponentRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("System_Component_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("System_Component_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// System Fuel Flow and associated system data for the current system and hour.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpSystemFuelFlowRow> SystemFuelFlowRecordsForHour
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("System_Fuel_Flow_Records_For_Hour")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpSystemFuelFlowRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("System_Fuel_Flow_Records_For_Hour", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("System_Fuel_Flow_Records_For_Hour", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Constains the system operating supplemental data for system and reporting period combinations.
        /// </summary>
        public static Dictionary<string, SystemOperatingSupplementalData>[] SystemOperatingSuppDataDictionaryArray
        {
            get
            {
                return ((Dictionary<string, SystemOperatingSupplementalData>[])(EmParameters.GetCheckParameter("System_Operating_Supp_Data_Dictionary_Array")));
            }
            set
            {
                EmParameters.SetCheckParameter("System_Operating_Supp_Data_Dictionary_Array", value);
            }
        }
        
        /// <summary>
        /// The System Operating Supplemental Data records for the current location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.SystemOpSuppData> SystemOperatingSuppDataRecordsByLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("System_Operating_Supp_Data_Records_by_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckEm.Function.SystemOpSuppData>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("System_Operating_Supp_Data_Records_by_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("System_Operating_Supp_Data_Records_by_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Lookup table that stores system-wide values.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwSystemParameterRow> SystemParameterLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("System_Parameter_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwSystemParameterRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("System_Parameter_Lookup_Table", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("System_Parameter_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Cross check table linking parameter, units of measure, and fuel to the Table D-6 default value.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.TableD6MissingDataValuesRow> TableD6MissingDataValues
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Table_D-6_Missing_Data_Values")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.TableD6MissingDataValuesRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Table_D-6_Missing_Data_Values", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Table_D-6_Missing_Data_Values", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates that a test hour is valid (between 0 and 23 inclusively) and that the date and hour are also valid.
        ///
        ///Should be set and used with in the same category.  Do not use in the child category of the category in which it is set.  It can be used within two different categories as long is one category is not a descendant of the other.
        /// </summary>
        public static bool? TestDateTimeValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Test_Date_Time_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("Test_Date_Time_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates that a test date is valid.
        ///
        ///Should be set and used with in the same category.  Do not use in the child category of the category in which it is set.  It can be used within two different categories as long is one category is not a descendant of the other.
        /// </summary>
        public static bool? TestDateValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Test_Date_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("Test_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// The Test Extension Exemption records for the location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestExtensionExemptionRow> TestExtensionExemptionRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Test_Extension_Exemption_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestExtensionExemptionRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Test_Extension_Exemption_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Test_Extension_Exemption_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Test Extension Exemption records for the monitoring configuration in the EM file being evaluated.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow> TestExtensionExemptionsForEmEvaluation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Test_Extension_Exemptions_for_EM_Evaluation")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Test_Extension_Exemptions_for_EM_Evaluation", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Test_Extension_Exemptions_for_EM_Evaluation", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates that a test hour is valid (between 0 and 23 inclusively).
        ///
        ///Should be set and used with in the same category.  Do not use in the child category of the category in which it is set.  It can be used within two different categories as long is one category is not a descendant of the other.
        /// </summary>
        public static bool? TestHourValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Test_Hour_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("Test_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// Contains a comma delimited list of the valid Test Result Codes.
        /// </summary>
        public static string TestResultCodeList
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("Test_Result_Code_List")));
            }
            set
            {
                EmParameters.SetCheckParameter("Test_Result_Code_List", value);
            }
        }
        
        /// <summary>
        /// A list of valid test result codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.TestResultCodeRow> TestResultCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Test_Result_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.TestResultCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Test_Result_Code_Lookup_Table", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Test_Result_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether the test result is valid.
        /// </summary>
        public static bool? TestResultValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Test_Result_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("Test_Result_Valid", value);
            }
        }
        
        /// <summary>
        /// Acceptable tolerances between reported and calculated values for tests.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.TestTolerancesRow> TestTolerancesCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Test_Tolerances_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.TestTolerancesRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Test_Tolerances_Cross_Check_Table", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Test_Tolerances_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Total heat input (mmBtu) reported from fuel flow meters at the location.
        /// </summary>
        public static decimal? TotalHeatInputFromFuelFlow
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Total_Heat_Input_From_Fuel_Flow")));
            }
            set
            {
                EmParameters.SetCheckParameter("Total_Heat_Input_From_Fuel_Flow", value);
            }
        }
        
        /// <summary>
        /// The expiration date of the most recent Unit Default Test for the location and fuel during the current hour.
        /// </summary>
        public static DateTime? UdefExpirationDate
        {
            get
            {
                return ((DateTime?)(EmParameters.GetCheckParameter("UDEF_Expiration_Date")));
            }
            set
            {
                EmParameters.SetCheckParameter("UDEF_Expiration_Date", value);
            }
        }
        
        /// <summary>
        /// The status of the Unit Default Test for the location and fuel during the current hour.
        /// </summary>
        public static string UdefStatus
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("UDEF_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("UDEF_Status", value);
            }
        }
        
        /// <summary>
        /// All records Unit Default tests for the location in the QA_SUPP_DATA table.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow> UnitDefaultTestRecordsByLocationForQaStatus
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Unit_Default_Test_Records_By_Location_For_QA_Status")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataHourlyStatusRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Unit_Default_Test_Records_By_Location_For_QA_Status", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Unit_Default_Test_Records_By_Location_For_QA_Status", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Sums the total heat input at all units for a given hour in a monitoring plan by multiplying heat input rate times op time at each unit
        /// </summary>
        public static decimal? UnitHeatinputtimesoptimeAccumulator
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Unit_HeatInputTimesOpTime_Accumulator")));
            }
            set
            {
                EmParameters.SetCheckParameter("Unit_HeatInputTimesOpTime_Accumulator", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Current unit operated during the Current Hour
        /// </summary>
        public static bool? UnitHourlyOperationalStatus
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Unit_Hourly_Operational_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("Unit_Hourly_Operational_Status", value);
            }
        }
        
        /// <summary>
        /// Describes whether or not the NonLoadBasedUnit flag is set in the Unit record
        /// </summary>
        public static bool? UnitIsLoadBased
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Unit_Is_Load_Based")));
            }
            set
            {
                EmParameters.SetCheckParameter("Unit_Is_Load_Based", value);
            }
        }
        
        /// <summary>
        /// Contains the sum of the products "Unit Load" times "Unit Operating Time" for all units in the monitoring plan during the current hour
        /// </summary>
        public static decimal? UnitLoadtimesoptimeAccumulator
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Unit_Loadtimesoptime_Accumulator")));
            }
            set
            {
                EmParameters.SetCheckParameter("Unit_Loadtimesoptime_Accumulator", value);
            }
        }
        
        /// <summary>
        /// Sums Operating Time for all units in Monitoring Plan during current hour
        /// </summary>
        public static decimal? UnitOptimeAccumulator
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Unit_Optime_Accumulator")));
            }
            set
            {
                EmParameters.SetCheckParameter("Unit_Optime_Accumulator", value);
            }
        }
        
        /// <summary>
        /// The Unit Stack Configuration records for all of a facility's locations that were retrieved for the evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUnitStackConfigurationRow> UnitStackConfigurationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Unit_Stack_Configuration_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUnitStackConfigurationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Unit_Stack_Configuration_Records", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Unit_Stack_Configuration_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The list of Unit Stack Configuration Records active for the current hour and associated with the current location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpUnitStackConfigurationRow> UnitStackConfigurationRecordsByHourLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Unit_Stack_Configuration_Records_By_Hour_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpUnitStackConfigurationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Unit_Stack_Configuration_Records_By_Hour_Location", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Unit_Stack_Configuration_Records_By_Hour_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The list of Unit Stack Configuration Records active for the current hour and associated with the current monitor plan
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpUnitStackConfigurationRow> UnitStackConfigurationRecordsByHourMonitorPlan
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(EmParameters.GetCheckParameter("Unit_Stack_Configuration_Records_By_Hour_Monitor_Plan")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpUnitStackConfigurationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("Unit_Stack_Configuration_Records_By_Hour_Monitor_Plan", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("Unit_Stack_Configuration_Records_By_Hour_Monitor_Plan", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether the UpscaleGasTypeCode in the Daily Calibration Test is valid.
        /// </summary>
        public static bool? UpscaleGasTypeValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Upscale_Gas_Type_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("Upscale_Gas_Type_Valid", value);
            }
        }
        
        /// <summary>
        /// The percent of span value of the reference value of a upscale injection of a daily calibration test.
        /// </summary>
        public static decimal? UpscaleReferencePercentOfSpan
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Upscale_Reference_Percent_of_Span")));
            }
            set
            {
                EmParameters.SetCheckParameter("Upscale_Reference_Percent_of_Span", value);
            }
        }
        
        /// <summary>
        /// This boolean is based on the Diluent Cap Indicator field in the CO2 Mass Derived hourly record and indicates whether or not the diluent cap should be used in the CO2 Mass Calculation
        /// </summary>
        public static bool? UseCo2DiluentCapForCo2MassCalc
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Use_Co2_Diluent_Cap_For_Co2_Mass_Calc")));
            }
            set
            {
                EmParameters.SetCheckParameter("Use_Co2_Diluent_Cap_For_Co2_Mass_Calc", value);
            }
        }
        
        /// <summary>
        /// This boolean is based on the Diluent Cap Indicator field in the CO2 Mass Derived hourly record and indicates whether or not the diluent cap should be used in the CO2 Concentration Calculation
        /// </summary>
        public static bool? UseO2DiluentCapForCo2ConcCalc
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Use_O2_Diluent_Cap_for_Co2_Conc_Calc")));
            }
            set
            {
                EmParameters.SetCheckParameter("Use_O2_Diluent_Cap_for_Co2_Conc_Calc", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not a range-checked FC Factor was reported in the Hourly Operating Data record for the hour
        /// </summary>
        public static bool? ValidFcFactorExists
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Valid_Fc_Factor_Exists")));
            }
            set
            {
                EmParameters.SetCheckParameter("Valid_Fc_Factor_Exists", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not a range-checked value was reported for FD Factor in the Hourly Operating Data record
        /// </summary>
        public static bool? ValidFdFactorExists
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Valid_Fd_Factor_Exists")));
            }
            set
            {
                EmParameters.SetCheckParameter("Valid_Fd_Factor_Exists", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not a range-checked FW Factor was reported in the Hourly Operating Data record for the hour
        /// </summary>
        public static bool? ValidFwFactorExists
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Valid_Fw_Factor_Exists")));
            }
            set
            {
                EmParameters.SetCheckParameter("Valid_Fw_Factor_Exists", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the Weekly System Integrity APS is valid.
        ///
        ///Used in emission report evaluations.
        /// </summary>
        public static bool? WeeklySystemIntegrityApsIsValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Weekly_System_Integrity_APS_Is_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("Weekly_System_Integrity_APS_Is_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the Weekly System Integrity Error is valid.
        ///
        ///Used in emission report evaluations.
        /// </summary>
        public static bool? WeeklySystemIntegrityErrorIsValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Weekly_System_Integrity_Error_Is_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("Weekly_System_Integrity_Error_Is_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the weekly test summary record failed any internal (not compared to other data) checks.
        ///
        ///Runs in the emission report evaluation.
        /// </summary>
        public static bool? WeeklyTestSummaryValid
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("Weekly_Test_Summary_Valid")));
            }
            set
            {
                EmParameters.SetCheckParameter("Weekly_Test_Summary_Valid", value);
            }
        }
        
        /// <summary>
        /// Contains the QA certification event that occurs after the WSI Prior Test Record, but before the current hour.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow WsiInterveningEventRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("WSI_Intervening_Event_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("WSI_Intervening_Event_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("WSI_Intervening_Event_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Contains the QA certification like kind event that occurs before the current hour.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow WsiInterveningLikeKindEventRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("WSI_Intervening_Like_Kind_Event_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("WSI_Intervening_Like_Kind_Event_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("WSI_Intervening_Like_Kind_Event_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Contains the QA certification event to use for plug-in values in result messages.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow WsiPluginEventRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("WSI_Plugin_Event_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("WSI_Plugin_Event_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("WSI_Plugin_Event_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Contains the most recent weekly system integrity test prior to the current hour.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckEm.Function.WeeklySystemIntegrity WsiPriorTestRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(EmParameters.GetCheckParameter("WSI_Prior_Test_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckEm.Function.WeeklySystemIntegrity(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    EmParameters.SetCheckParameter("WSI_Prior_Test_Record", null);
                }
                else
                {
                    EmParameters.SetCheckParameter("WSI_Prior_Test_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Contains the check result for the Weekly System Integrity Status checks.
        /// </summary>
        public static string WsiStatus
        {
            get
            {
                return ((string)(EmParameters.GetCheckParameter("WSI_Status")));
            }
            set
            {
                EmParameters.SetCheckParameter("WSI_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether Weekly System Integrity status checks are needed for the current MATS MHV record.
        /// </summary>
        public static bool? WsiStatusRequired
        {
            get
            {
                return ((bool?)(EmParameters.GetCheckParameter("WSI_Status_Required")));
            }
            set
            {
                EmParameters.SetCheckParameter("WSI_Status_Required", value);
            }
        }
        
        /// <summary>
        /// A dictionary that for each component contains the most recent test prior to the current hour, and the list of operating days exclusively between test date and the current date.
        /// </summary>
        public static Dictionary<string, WsiTestStatusInformation> WsiTestDictionary
        {
            get
            {
                return ((Dictionary<string, WsiTestStatusInformation>)(EmParameters.GetCheckParameter("WSI_Test_Dictionary")));
            }
            set
            {
                EmParameters.SetCheckParameter("WSI_Test_Dictionary", value);
            }
        }
        
        /// <summary>
        /// The percent of span value of the reference value of a zero injection of a daily calibration test.
        /// </summary>
        public static decimal? ZeroReferencePercentOfSpan
        {
            get
            {
                return ((decimal?)(EmParameters.GetCheckParameter("Zero_Reference_Percent_of_Span")));
            }
            set
            {
                EmParameters.SetCheckParameter("Zero_Reference_Percent_of_Span", value);
            }
        }
        
        /// <summary>
        /// Gets the parameter value using the category property if it is not null, otherwise using the Process object if it is not null, and otherwise returning null.
        /// </summary>
        /// <param name="parameterId">The string id used to access the parameter in the check parameter collection.</param>
        /// <returns>Returns the requested check parameter as an object if it exists, and as a null if it does not.</returns>
        public static object GetCheckParameter(string parameterId)
        {
            cLegacyCheckParameter checkParameter;
            if (((EmParameters.Category == null) 
                        == false))
            {
                checkParameter = EmParameters.Category.GetCheckParameter(parameterId);
            }
            else
            {
                if (((EmParameters.Process == null) 
                            == false))
                {
                    checkParameter = EmParameters.Process.GetCheckParameter(parameterId);
                }
                else
                {
                    checkParameter = null;
                }
            }
            if ((checkParameter == null))
            {
                return null;
            }
            else
            {
                return checkParameter.ParameterValue;
            }
        }
        
        /// <summary>
        /// Sets the parameter value using the category property if it is not null, otherwise using the Process object if it is not null, and otherwise does nothing.
        /// </summary>
        /// <param name="parameterId">The string id used to access the parameter in the check parameter collection.</param>
        /// <param name="parameterValue">The value to which to set the parameter.</param>
        public static void SetCheckParameter(string parameterId, object parameterValue)
        {
            if (((EmParameters.Category == null) 
                        == false))
            {
                EmParameters.Category.SetCheckParameter(parameterId, parameterValue);
            }
            else
            {
                if (((EmParameters.Process == null) 
                            == false))
                {
                    EmParameters.Process.SetCheckParameter(parameterId, parameterValue);
                }
            }
        }
        
        /// <summary>
        /// Initializes the values in the check parameter object.
        /// </summary>
        public static void Init(cProcess process)
        {
            EmParameters._process = process;
            EmParameters.Category = null;
            EmParameters.RegisterParameters();
        }
        
        /// <summary>
        /// Registers each check parameter.
        /// </summary>
        public static void RegisterParameters()
        {
            if (((EmParameters.Process == null) 
                        || (EmParameters.Process.ProcessParameters == null)))
            {
                return;
            }
            Process.ProcessParameters.RegisterParameter(2252, "Abort_Hourly_Checks");
            Process.ProcessParameters.RegisterParameter(3080, "Accuracy_Missing_Op_Data_Info");
            Process.ProcessParameters.RegisterParameter(3072, "Accuracy_Test_Records_By_Location_For_QA_Status");
            Process.ProcessParameters.RegisterParameter(1257, "All_Required_Heat_Input_Calculation_Elements");
            Process.ProcessParameters.RegisterParameter(2898, "Alternate_Invalid_Linearity_Record");
            Process.ProcessParameters.RegisterParameter(2997, "Alternate_Invalid_RATA_Record");
            Process.ProcessParameters.RegisterParameter(2897, "Alternate_Linearity_Record");
            Process.ProcessParameters.RegisterParameter(2998, "Alternate_RATA_Record");
            Process.ProcessParameters.RegisterParameter(3552, "Analyzer_Range_Records_by_Component");
            Process.ProcessParameters.RegisterParameter(2808, "Analyzer_Range_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(3123, "Annual_BCO2_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(2853, "Annual_CO2M_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(2857, "Annual_HIT_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(2855, "Annual_NOXM_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(2856, "Annual_NOXR_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(2858, "Annual_OPHOURS_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(2859, "Annual_OPTIME_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(2850, "Annual_Reporting_Requirement");
            Process.ProcessParameters.RegisterParameter(2854, "Annual_SO2_Mass_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(1953, "App_E_Calc_Hi");
            Process.ProcessParameters.RegisterParameter(1949, "App_E_Calc_Segment_Num");
            Process.ProcessParameters.RegisterParameter(2352, "App_E_Calculated_Nox_Rate_For_Source");
            Process.ProcessParameters.RegisterParameter(3208, "App_E_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(1935, "App_E_Constant_Fuel_Mix");
            Process.ProcessParameters.RegisterParameter(1937, "App_E_Correlation_Heat_Input_Array");
            Process.ProcessParameters.RegisterParameter(1938, "App_E_Correlation_Nox_Rate_Array");
            Process.ProcessParameters.RegisterParameter(2685, "App_E_Fuel_Code");
            Process.ProcessParameters.RegisterParameter(1929, "Appendix_D_Method_Active");
            Process.ProcessParameters.RegisterParameter(3011, "Appendix_E_Missing_Op_Data_Info");
            Process.ProcessParameters.RegisterParameter(2908, "Appendix_E_Status_Required");
            Process.ProcessParameters.RegisterParameter(2914, "Appendix_E_Test_Records_By_Location_For_QA_Status");
            Process.ProcessParameters.RegisterParameter(2684, "App_E_NOXE_System_ID");
            Process.ProcessParameters.RegisterParameter(2716, "App_E_NOXE_System_Identifier");
            Process.ProcessParameters.RegisterParameter(2686, "App_E_NOx_MER");
            Process.ProcessParameters.RegisterParameter(1941, "App_E_Noxr_Mon_Sys_Is_Valid");
            Process.ProcessParameters.RegisterParameter(1942, "App_E_Op_Code");
            Process.ProcessParameters.RegisterParameter(1943, "App_E_Reported_Value");
            Process.ProcessParameters.RegisterParameter(1932, "App_E_Reporting_Method");
            Process.ProcessParameters.RegisterParameter(1947, "App_E_Segment_Number");
            Process.ProcessParameters.RegisterParameter(2244, "App_E_Segment_Total");
            Process.ProcessParameters.RegisterParameter(2809, "Applicable_Component_ID");
            Process.ProcessParameters.RegisterParameter(3189, "Applicable_System_ID_List");
            Process.ProcessParameters.RegisterParameter(2810, "Applicable_System_IDs");
            Process.ProcessParameters.RegisterParameter(3122, "BCO2_Quarterly_Reported_Value");
            Process.ProcessParameters.RegisterParameter(3174, "Calc_CO2_Unadj");
            Process.ProcessParameters.RegisterParameter(3119, "Calc_Fuel_Carbon_Burned");
            Process.ProcessParameters.RegisterParameter(3125, "Calc_TDE");
            Process.ProcessParameters.RegisterParameter(3124, "Calc_Total_Carbon_Burned");
            Process.ProcessParameters.RegisterParameter(2694, "Calculate_Apportioned_HI");
            Process.ProcessParameters.RegisterParameter(3126, "Calculate_CO2M_TDE");
            Process.ProcessParameters.RegisterParameter(3614, "Calculated_CS_Load_Range");
            Process.ProcessParameters.RegisterParameter(2631, "Calculated_Diluent_for_CO2");
            Process.ProcessParameters.RegisterParameter(2632, "Calculated_Diluent_for_CO2C");
            Process.ProcessParameters.RegisterParameter(2629, "Calculated_Diluent_for_HI");
            Process.ProcessParameters.RegisterParameter(2630, "Calculated_Diluent_for_NOXR");
            Process.ProcessParameters.RegisterParameter(4655, "Calculated_Flow_Weighted_HCL");
            Process.ProcessParameters.RegisterParameter(4656, "Calculated_Flow_Weighted_HF");
            Process.ProcessParameters.RegisterParameter(4643, "Calculated_Flow_Weighted_Hg");
            Process.ProcessParameters.RegisterParameter(4657, "Calculated_Flow_Weighted_SO2");
            Process.ProcessParameters.RegisterParameter(3613, "Calculated_Load_Range");
            Process.ProcessParameters.RegisterParameter(3617, "Calculated_MATS_MS_Load");
            Process.ProcessParameters.RegisterParameter(2626, "Calculated_Moisture_for_CO2");
            Process.ProcessParameters.RegisterParameter(2627, "Calculated_Moisture_for_CO2C");
            Process.ProcessParameters.RegisterParameter(2628, "Calculated_Moisture_for_HI");
            Process.ProcessParameters.RegisterParameter(2624, "Calculated_Moisture_for_NOX");
            Process.ProcessParameters.RegisterParameter(2625, "Calculated_Moisture_for_NOXR");
            Process.ProcessParameters.RegisterParameter(2623, "Calculated_Moisture_for_SO2");
            Process.ProcessParameters.RegisterParameter(3527, "Calculated_System_Integrity_APS_Indicator");
            Process.ProcessParameters.RegisterParameter(3526, "Calculated_System_Integrity_Error");
            Process.ProcessParameters.RegisterParameter(3473, "Calculated_Unadjusted_Value");
            Process.ProcessParameters.RegisterParameter(3525, "Calculated_Weekly_Test_Summary_Result");
            Process.ProcessParameters.RegisterParameter(3184, "Calculate_NOXM_From_Apportioned_HI");
            Process.ProcessParameters.RegisterParameter(3462, "Calculation_Concentration");
            Process.ProcessParameters.RegisterParameter(3463, "Calculation_Concentration_Substituted");
            Process.ProcessParameters.RegisterParameter(3458, "Calculation_Conversion_Factor");
            Process.ProcessParameters.RegisterParameter(3468, "Calculation_Diluent");
            Process.ProcessParameters.RegisterParameter(3469, "Calculation_Diluent_Substituted");
            Process.ProcessParameters.RegisterParameter(3478, "Calculation_Flow");
            Process.ProcessParameters.RegisterParameter(3479, "Calculation_Flow_Substituted");
            Process.ProcessParameters.RegisterParameter(3464, "Calculation_Moisture");
            Process.ProcessParameters.RegisterParameter(3465, "Calculation_Moisture_Substituted");
            Process.ProcessParameters.RegisterParameter(3612, "Check_CS_Load_Range_Value");
            Process.ProcessParameters.RegisterParameter(2995, "Check_For_Ignored_FLOW_RATA");
            Process.ProcessParameters.RegisterParameter(2778, "Check_For_Ignored_Linearity");
            Process.ProcessParameters.RegisterParameter(3611, "Check_Load_Range_Value");
            Process.ProcessParameters.RegisterParameter(1814, "Co2_App_D_Accumulator");
            Process.ProcessParameters.RegisterParameter(1645, "CO2_App_D_Method_Active_For_Hour");
            Process.ProcessParameters.RegisterParameter(2582, "CO2_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(2241, "Co2c_Derived_Hourly_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(1415, "CO2C_Derived_Hourly_Status");
            Process.ProcessParameters.RegisterParameter(2583, "CO2C_DHV_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(1263, "CO2_CEM_Method_Active_For_Hour");
            Process.ProcessParameters.RegisterParameter(4689, "CO2C_Has_Measured_DHV_MODC");
            Process.ProcessParameters.RegisterParameter(2552, "CO2C_MHV_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(3472, "CO2C_MHV_MODC");
            Process.ProcessParameters.RegisterParameter(2240, "Co2c_Monitor_Hourly_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(1774, "CO2_Conc_Cem_Equation_Code");
            Process.ProcessParameters.RegisterParameter(1344, "CO2_Conc_Checks_Needed_For_CO2_Mass_Calc");
            Process.ProcessParameters.RegisterParameter(1250, "CO2_Conc_Checks_Needed_for_Heat_Input");
            Process.ProcessParameters.RegisterParameter(1353, "CO2_Conc_Derived_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(1856, "CO2_Conc_Derived_Hourly_Count");
            Process.ProcessParameters.RegisterParameter(1780, "CO2_Conc_Monitor_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(1857, "CO2_Conc_Monitor_Hourly_Count");
            Process.ProcessParameters.RegisterParameter(2645, "CO2C_SD_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(1772, "CO2_Derived_Hourly_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(2613, "CO2_Derived_Hourly_Status");
            Process.ProcessParameters.RegisterParameter(1072, "CO2_Diluent_Checks_Needed_For_Nox_Rate_Calc");
            Process.ProcessParameters.RegisterParameter(3438, "CO2_Diluent_Needed_for_MATS");
            Process.ProcessParameters.RegisterParameter(4692, "CO2_Diluent_Needed_for_MATS_Calculation");
            Process.ProcessParameters.RegisterParameter(2476, "CO2_Fuel_Specific_Missing_Data");
            Process.ProcessParameters.RegisterParameter(4626, "CO2_HPFF_Exists");
            Process.ProcessParameters.RegisterParameter(1336, "CO2_Mass_CEM_Equation_Code");
            Process.ProcessParameters.RegisterParameter(1265, "CO2_Mass_Derived_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(1765, "CO2_Mass_Derived_Hourly_Count");
            Process.ProcessParameters.RegisterParameter(2589, "CO2M_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(2827, "CO2M_Daily_Emission_Records_For_Day_Location");
            Process.ProcessParameters.RegisterParameter(2875, "CO2M_Derived_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(2618, "CO2M_Derived_Hourly_Status");
            Process.ProcessParameters.RegisterParameter(2479, "CO2_Method_Code");
            Process.ProcessParameters.RegisterParameter(1773, "CO2_Monitor_Method_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(1595, "CO2_Monitor_Span_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(2358, "Co2n_Monitor_Default_Records_For_Nfs_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(3151, "CO2_RATA_Required");
            Process.ProcessParameters.RegisterParameter(3142, "CO2_Start_Quarter");
            Process.ProcessParameters.RegisterParameter(2562, "Complete_MHV_Record_Needed");
            Process.ProcessParameters.RegisterParameter(4679, "Component_Operating_Supp_Data_Dictionary_Array");
            Process.ProcessParameters.RegisterParameter(4714, "Component_Operating_Supp_Data_Records_for_MP_and_Year");
            Process.ProcessParameters.RegisterParameter(4715, "Component_Record_for_Audit");
            Process.ProcessParameters.RegisterParameter(968, "Component_Records_By_Location");
            Process.ProcessParameters.RegisterParameter(2719, "Config_HeatInput_Accumulator");
            Process.ProcessParameters.RegisterParameter(2094, "Config_HeatInputTimesOpTime_Accumulator");
            Process.ProcessParameters.RegisterParameter(2718, "Config_NOxRateTimesHeatInput_Accumulator");
            Process.ProcessParameters.RegisterParameter(3173, "Config_NOxRateTimesOptime_Accumulator");
            Process.ProcessParameters.RegisterParameter(3172, "Config_Optime_Accumulator");
            Process.ProcessParameters.RegisterParameter(4731, "Configuration_Change_Occured_Durring_Quarter");
            Process.ProcessParameters.RegisterParameter(3215, "Configuration_Emissions_File");
            Process.ProcessParameters.RegisterParameter(3183, "CP_Fuel_Count");
            Process.ProcessParameters.RegisterParameter(3284, "CrossCheck_TestTypeToRequiredTestCode");
            Process.ProcessParameters.RegisterParameter(3069, "Current_Accuracy_Status");
            Process.ProcessParameters.RegisterParameter(2724, "Current_Analyzer_Range_Used");
            Process.ProcessParameters.RegisterParameter(3068, "Current_Appendix_D_Status");
            Process.ProcessParameters.RegisterParameter(2912, "Current_Appendix_E_Status");
            Process.ProcessParameters.RegisterParameter(1951, "Current_App_E_Noxr_Record");
            Process.ProcessParameters.RegisterParameter(3120, "Current_BCO2_Summary_Value_Record");
            Process.ProcessParameters.RegisterParameter(2642, "Current_CO2C_DHV_HBHA_Value");
            Process.ProcessParameters.RegisterParameter(1354, "Current_CO2_Conc_Derived_Hourly_Record");
            Process.ProcessParameters.RegisterParameter(2459, "Current_CO2_Conc_Missing_Data_Monitor_Hourly_Record");
            Process.ProcessParameters.RegisterParameter(1477, "Current_CO2_Conc_Monitor_Hourly_Record");
            Process.ProcessParameters.RegisterParameter(2722, "Current_CO2_Mass_Daily_Record");
            Process.ProcessParameters.RegisterParameter(2709, "Current_CO2_Summary_Value_Record");
            Process.ProcessParameters.RegisterParameter(2744, "Current_Daily_Calibration_Test");
            Process.ProcessParameters.RegisterParameter(3131, "Current_Daily_Cal_Status");
            Process.ProcessParameters.RegisterParameter(2747, "Current_Daily_Emission_Test");
            Process.ProcessParameters.RegisterParameter(3118, "Current_Daily_Fuel_Record");
            Process.ProcessParameters.RegisterParameter(3430, "Current_Date_Hour");
            Process.ProcessParameters.RegisterParameter(2663, "Current_Density_Record");
            Process.ProcessParameters.RegisterParameter(2593, "Current_DHV_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(2591, "Current_DHV_Default_Parameter");
            Process.ProcessParameters.RegisterParameter(2610, "Current_DHV_Formula_Record");
            Process.ProcessParameters.RegisterParameter(2592, "Current_DHV_Fuel_Specific_Hour");
            Process.ProcessParameters.RegisterParameter(2639, "Current_DHV_HBHA_Value");
            Process.ProcessParameters.RegisterParameter(2594, "Current_DHV_Max_Min_Value");
            Process.ProcessParameters.RegisterParameter(2606, "Current_DHV_Method");
            Process.ProcessParameters.RegisterParameter(2595, "Current_DHV_Missing_Data_Fuel");
            Process.ProcessParameters.RegisterParameter(2596, "Current_DHV_Mon_Sys_Record");
            Process.ProcessParameters.RegisterParameter(2611, "Current_DHV_Multiple_Fuel_Equation_Code");
            Process.ProcessParameters.RegisterParameter(2545, "Current_DHV_Parameter");
            Process.ProcessParameters.RegisterParameter(2598, "Current_DHV_Record");
            Process.ProcessParameters.RegisterParameter(2620, "Current_DHV_Record_Valid");
            Process.ProcessParameters.RegisterParameter(2597, "Current_DHV_System_Type");
            Process.ProcessParameters.RegisterParameter(2922, "Current_Emission_Comment");
            Process.ProcessParameters.RegisterParameter(2080, "Current_Entity_Type");
            Process.ProcessParameters.RegisterParameter(892, "Current_Flow_Monitor_Hourly_Record");
            Process.ProcessParameters.RegisterParameter(3272, "Current_Flow_to_Load_Status_Check");
            Process.ProcessParameters.RegisterParameter(2646, "Current_Fuel_Flow_Record");
            Process.ProcessParameters.RegisterParameter(2647, "Current_Fuel_Group");
            Process.ProcessParameters.RegisterParameter(2665, "Current_GCV_Record");
            Process.ProcessParameters.RegisterParameter(907, "Current_H2O_Derived_Hourly_Record");
            Process.ProcessParameters.RegisterParameter(2641, "Current_H2O_DHV_HBHA_Value");
            Process.ProcessParameters.RegisterParameter(912, "Current_H2O_Monitor_Hourly_Record");
            Process.ProcessParameters.RegisterParameter(1243, "Current_Heat_Input_Derived_Hourly_Record");
            Process.ProcessParameters.RegisterParameter(2695, "Current_HI_Apportionment_Record");
            Process.ProcessParameters.RegisterParameter(2693, "Current_HI_Entity_Type");
            Process.ProcessParameters.RegisterParameter(2710, "Current_HI_Summary_Value_Record");
            Process.ProcessParameters.RegisterParameter(1080, "Current_Hourly_H2O_Table_Reference");
            Process.ProcessParameters.RegisterParameter(862, "Current_Hourly_Op_Record");
            Process.ProcessParameters.RegisterParameter(2999, "Current_Hourly_Record_for_RATA_Status");
            Process.ProcessParameters.RegisterParameter(2727, "Current_Linearity_Status");
            Process.ProcessParameters.RegisterParameter(2792, "Current_LME_Hourly_Op_Record");
            Process.ProcessParameters.RegisterParameter(2224, "Current_Location_Count");
            Process.ProcessParameters.RegisterParameter(2775, "Current_LTFF_Record");
            Process.ProcessParameters.RegisterParameter(3610, "Current_Maximum_Load_Value");
            Process.ProcessParameters.RegisterParameter(3165, "Current_Measure_Code");
            Process.ProcessParameters.RegisterParameter(2578, "Current_MHV_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(2556, "Current_MHV_Component_Type");
            Process.ProcessParameters.RegisterParameter(2559, "Current_MHV_Default_Parameter");
            Process.ProcessParameters.RegisterParameter(4700, "Current_MHV_Duplicate");
            Process.ProcessParameters.RegisterParameter(4698, "Current_MHV_Extraneous_Fields");
            Process.ProcessParameters.RegisterParameter(2557, "Current_MHV_Fuel_Specific_Hour");
            Process.ProcessParameters.RegisterParameter(2637, "Current_MHV_HBHA_Value");
            Process.ProcessParameters.RegisterParameter(2572, "Current_MHV_Max_Min_Value");
            Process.ProcessParameters.RegisterParameter(4699, "Current_MHV_Missing");
            Process.ProcessParameters.RegisterParameter(2575, "Current_MHV_Missing_Data_Fuel");
            Process.ProcessParameters.RegisterParameter(2567, "Current_MHV_Mon_Sys_Record");
            Process.ProcessParameters.RegisterParameter(2544, "Current_MHV_Parameter");
            Process.ProcessParameters.RegisterParameter(2561, "Current_MHV_Parameter_Description");
            Process.ProcessParameters.RegisterParameter(4696, "Current_MHV_Parameter_Status");
            Process.ProcessParameters.RegisterParameter(2554, "Current_MHV_Record");
            Process.ProcessParameters.RegisterParameter(2573, "Current_MHV_Span_Description");
            Process.ProcessParameters.RegisterParameter(2555, "Current_MHV_System_Type");
            Process.ProcessParameters.RegisterParameter(2251, "Current_Monitoring_Plan_Record");
            Process.ProcessParameters.RegisterParameter(2894, "Current_Monitor_Location_Id");
            Process.ProcessParameters.RegisterParameter(2238, "Current_Monitor_Plan_Location_Postion");
            Process.ProcessParameters.RegisterParameter(2229, "Current_Monitor_Plan_Location_Record");
            Process.ProcessParameters.RegisterParameter(2851, "Current_Month");
            Process.ProcessParameters.RegisterParameter(2698, "Current_NOX_Apportionment_Based_Record");
            Process.ProcessParameters.RegisterParameter(1052, "Current_Nox_Conc_Monitor_Hourly_Record");
            Process.ProcessParameters.RegisterParameter(1347, "Current_NOXC_System_BAF");
            Process.ProcessParameters.RegisterParameter(1223, "Current_NOx_Mass_Derived_Hourly_Record");
            Process.ProcessParameters.RegisterParameter(1210, "Current_NOx_Mass_Monitor_Method_Record");
            Process.ProcessParameters.RegisterParameter(2707, "Current_NOX_Mass_Summary_Value_Record");
            Process.ProcessParameters.RegisterParameter(2708, "Current_NOX_Rate_Summary_Value_Record");
            Process.ProcessParameters.RegisterParameter(1057, "Current_NoxR_Derived_Hourly_Record");
            Process.ProcessParameters.RegisterParameter(2640, "Current_NOXR_HBHA_Value");
            Process.ProcessParameters.RegisterParameter(1386, "Current_NOxR_Method_Code");
            Process.ProcessParameters.RegisterParameter(4697, "Current_NOxR_Primary_Or_Primary_Bypass_MHV_Max_Value_Description");
            Process.ProcessParameters.RegisterParameter(4695, "Current_NOXR_Primary_Or_Primary_Bypass_MHV_Record");
            Process.ProcessParameters.RegisterParameter(2202, "Current_NOX_System_Baf");
            Process.ProcessParameters.RegisterParameter(2643, "Current_NOX_System_Status");
            Process.ProcessParameters.RegisterParameter(2460, "Current_O2_Dry_Missing_Data_Monitor_Hourly_Record");
            Process.ProcessParameters.RegisterParameter(988, "Current_O2_Dry_Monitor_Hourly_Record");
            Process.ProcessParameters.RegisterParameter(2461, "Current_O2_Wet_Missing_Data_Monitor_Hourly_Record");
            Process.ProcessParameters.RegisterParameter(977, "Current_O2_Wet_Monitor_Hourly_Record");
            Process.ProcessParameters.RegisterParameter(1011, "Current_Operating_Date");
            Process.ProcessParameters.RegisterParameter(3442, "Current_Operating_DateHour");
            Process.ProcessParameters.RegisterParameter(1012, "Current_Operating_Hour");
            Process.ProcessParameters.RegisterParameter(2356, "Current_Operating_Time");
            Process.ProcessParameters.RegisterParameter(2852, "Current_Op_Hours_Summary_Value_Record");
            Process.ProcessParameters.RegisterParameter(2711, "Current_Op_Time_Summary_Value_Record");
            Process.ProcessParameters.RegisterParameter(3082, "Current_PEI_Status");
            Process.ProcessParameters.RegisterParameter(2926, "Current_RATA_Status");
            Process.ProcessParameters.RegisterParameter(2228, "Current_Reporting_Period");
            Process.ProcessParameters.RegisterParameter(4630, "Current_Reporting_Period_Begin_Date");
            Process.ProcessParameters.RegisterParameter(3265, "Current_Reporting_Period_Begin_Hour");
            Process.ProcessParameters.RegisterParameter(4631, "Current_Reporting_Period_End_Date");
            Process.ProcessParameters.RegisterParameter(3266, "Current_Reporting_Period_End_Hour");
            Process.ProcessParameters.RegisterParameter(3113, "Current_Reporting_Period_Object");
            Process.ProcessParameters.RegisterParameter(2899, "Current_Reporting_Period_Quarter");
            Process.ProcessParameters.RegisterParameter(2900, "Current_Reporting_Period_Year");
            Process.ProcessParameters.RegisterParameter(2673, "Current_SO2_HPFF_Record");
            Process.ProcessParameters.RegisterParameter(883, "Current_SO2_Monitor_Hourly_Record");
            Process.ProcessParameters.RegisterParameter(2706, "Current_SO2_Summary_Value_Record");
            Process.ProcessParameters.RegisterParameter(1345, "Current_SO2_System_BAF");
            Process.ProcessParameters.RegisterParameter(2679, "Current_Sulfur_Record");
            Process.ProcessParameters.RegisterParameter(3212, "Current_Unit_Count");
            Process.ProcessParameters.RegisterParameter(1915, "Current_Unit_Is_Arp");
            Process.ProcessParameters.RegisterParameter(1676, "Current_Unit_is_Peaking");
            Process.ProcessParameters.RegisterParameter(3522, "Current_Weekly_System_Integrity_Test");
            Process.ProcessParameters.RegisterParameter(3517, "Current_Weekly_Test_Summary");
            Process.ProcessParameters.RegisterParameter(2884, "Daily_Cal_Calc_Online_Ind");
            Process.ProcessParameters.RegisterParameter(2742, "Daily_Cal_Calc_Result");
            Process.ProcessParameters.RegisterParameter(2743, "Daily_Cal_Component_Type_Valid");
            Process.ProcessParameters.RegisterParameter(3156, "Daily_Cal_Fail_Date");
            Process.ProcessParameters.RegisterParameter(3157, "Daily_Cal_Fail_Hour");
            Process.ProcessParameters.RegisterParameter(4710, "Daily_Calibration_Supp_Data_Exists");
            Process.ProcessParameters.RegisterParameter(2751, "Daily_Cal_Injection_Times_Valid");
            Process.ProcessParameters.RegisterParameter(3221, "Daily_Cal_PGVP_Rule_Date");
            Process.ProcessParameters.RegisterParameter(2752, "Daily_Cal_Span_Scale_Valid");
            Process.ProcessParameters.RegisterParameter(2753, "Daily_Cal_Span_Value");
            Process.ProcessParameters.RegisterParameter(3134, "Daily_Cal_Status_Required");
            Process.ProcessParameters.RegisterParameter(2754, "Daily_Cal_Upscale_Gas_Level_Valid");
            Process.ProcessParameters.RegisterParameter(2758, "Daily_Cal_Upscale_Injection_Calc_APS_Indicator");
            Process.ProcessParameters.RegisterParameter(2759, "Daily_Cal_Upscale_Injection_Calc_Result");
            Process.ProcessParameters.RegisterParameter(2755, "Daily_Cal_Upscale_Injection_Time_Valid");
            Process.ProcessParameters.RegisterParameter(2760, "Daily_Cal_Zero_Injection_Calc_APS_Indicator");
            Process.ProcessParameters.RegisterParameter(2761, "Daily_Cal_Zero_Injection_Calc_Result");
            Process.ProcessParameters.RegisterParameter(3293, "Daily_Int_No_Prior_Test_Check_Indicator");
            Process.ProcessParameters.RegisterParameter(3288, "Daily_Int_Status_Required");
            Process.ProcessParameters.RegisterParameter(3292, "Daily_Int_Status_Result");
            Process.ProcessParameters.RegisterParameter(3176, "Daily_Op_Time");
            Process.ProcessParameters.RegisterParameter(2599, "Derived_Hourly_Adjusted_Value_Status");
            Process.ProcessParameters.RegisterParameter(864, "Derived_Hourly_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(2621, "Derived_Hourly_Default_Status");
            Process.ProcessParameters.RegisterParameter(2608, "Derived_Hourly_Equation_Status");
            Process.ProcessParameters.RegisterParameter(2609, "Derived_Hourly_Formula_Status");
            Process.ProcessParameters.RegisterParameter(2638, "Derived_Hourly_Missing_Data_Status");
            Process.ProcessParameters.RegisterParameter(2600, "Derived_Hourly_Modc_Status");
            Process.ProcessParameters.RegisterParameter(2601, "Derived_Hourly_Null_Status");
            Process.ProcessParameters.RegisterParameter(2602, "Derived_Hourly_Pma_Status");
            Process.ProcessParameters.RegisterParameter(2604, "Derived_Hourly_System_Status");
            Process.ProcessParameters.RegisterParameter(2635, "Derived_Hourly_Unadjusted_Calculation_Status");
            Process.ProcessParameters.RegisterParameter(2605, "Derived_Hourly_Unadjusted_Value_Status");
            Process.ProcessParameters.RegisterParameter(2882, "Derived_Hourly_Value_Records");
            Process.ProcessParameters.RegisterParameter(2357, "Diluent_For_Heat_Input");
            Process.ProcessParameters.RegisterParameter(2723, "Dual_Range_Status");
            Process.ProcessParameters.RegisterParameter(3111, "Earliest_Location_Report_Date");
            Process.ProcessParameters.RegisterParameter(2923, "Emission_Comment_Records");
            Process.ProcessParameters.RegisterParameter(3104, "Emissions_File_Records");
            Process.ProcessParameters.RegisterParameter(3180, "Emissions_Tolerance_Deviators");
            Process.ProcessParameters.RegisterParameter(3575, "EM_Location_Program_Records");
            Process.ProcessParameters.RegisterParameter(3247, "EM_Test_Calc_Result");
            Process.ProcessParameters.RegisterParameter(2748, "EM_Test_Date_Valid");
            Process.ProcessParameters.RegisterParameter(2749, "EM_Test_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(2750, "EM_Test_Minute_Valid");
            Process.ProcessParameters.RegisterParameter(4730, "EM_Unit_Stack_Configuration_Records");
            Process.ProcessParameters.RegisterParameter(3003, "Evaluate_Multi_Level_RATA");
            Process.ProcessParameters.RegisterParameter(2746, "Evaluate_Upscale_Injection");
            Process.ProcessParameters.RegisterParameter(2745, "Evaluate_Zero_Injection");
            Process.ProcessParameters.RegisterParameter(3245, "Expiration_Text");
            Process.ProcessParameters.RegisterParameter(3242, "Expired_Systems");
            Process.ProcessParameters.RegisterParameter(3244, "Expiring_Systems");
            Process.ProcessParameters.RegisterParameter(2483, "F23_Default_Max_Value");
            Process.ProcessParameters.RegisterParameter(2484, "F23_Default_Min_Value");
            Process.ProcessParameters.RegisterParameter(2437, "F23_Default_Value");
            Process.ProcessParameters.RegisterParameter(2436, "F23_Monitor_Default_Records_by_Hour_Location");
            Process.ProcessParameters.RegisterParameter(3270, "F2L_Check_Records_For_QA_Status");
            Process.ProcessParameters.RegisterParameter(4737, "F2L_QA_Certification_Event_Records");
            Process.ProcessParameters.RegisterParameter(3277, "F2L_Status_Earliest_Valid_Required_Test");
            Process.ProcessParameters.RegisterParameter(3285, "F2L_Status_Event_Requires_Abbreviated_Check");
            Process.ProcessParameters.RegisterParameter(3282, "F2L_Status_Event_Requires_Rata");
            Process.ProcessParameters.RegisterParameter(3274, "F2L_Status_Intervening_Rata");
            Process.ProcessParameters.RegisterParameter(3278, "F2L_Status_Missing_Op_Data_Info");
            Process.ProcessParameters.RegisterParameter(3268, "F2L_Status_Prior_Test_Required_Quarter");
            Process.ProcessParameters.RegisterParameter(3286, "F2L_Status_Prior_Test_Required_Quarter_Missing_Op_Data");
            Process.ProcessParameters.RegisterParameter(4736, "F2L_Status_Prior_Test_Required_Quarter_Set_From_System");
            Process.ProcessParameters.RegisterParameter(3275, "F2L_Status_Qa_Cert_Event ");
            Process.ProcessParameters.RegisterParameter(3279, "F2L_Status_Required");
            Process.ProcessParameters.RegisterParameter(3271, "F2L_Status_Result");
            Process.ProcessParameters.RegisterParameter(3281, "F2L_Status_System_Check_Dictionary");
            Process.ProcessParameters.RegisterParameter(3287, "F2L_Status_System_Missing_Op_Dictionary");
            Process.ProcessParameters.RegisterParameter(3269, "F2L_Status_System_Result_Dictionary");
            Process.ProcessParameters.RegisterParameter(3035, "Facility_Location_Records");
            Process.ProcessParameters.RegisterParameter(3065, "Facility_Operating_Supp_Data_Records");
            Process.ProcessParameters.RegisterParameter(3318, "Facility_Unit_Fuel_Records");
            Process.ProcessParameters.RegisterParameter(2440, "Fc_Factor_Maximum");
            Process.ProcessParameters.RegisterParameter(2439, "Fc_Factor_Minimum");
            Process.ProcessParameters.RegisterParameter(2453, "FC_Factor_Needed");
            Process.ProcessParameters.RegisterParameter(2443, "Fd_Factor_Maximum");
            Process.ProcessParameters.RegisterParameter(2442, "Fd_Factor_Minimum");
            Process.ProcessParameters.RegisterParameter(2454, "FD_Factor_Needed");
            Process.ProcessParameters.RegisterParameter(3078, "FF2L_Accuracy_Begin_Year_Quarter");
            Process.ProcessParameters.RegisterParameter(3217, "FF2L_Accuracy_Check_Date");
            Process.ProcessParameters.RegisterParameter(3075, "FF2L_Accuracy_Eligible");
            Process.ProcessParameters.RegisterParameter(3079, "FF2L_Accuracy_End_Year_Quarter");
            Process.ProcessParameters.RegisterParameter(3216, "FF2L_Baseline_Records_By_Location_For_QA_Status");
            Process.ProcessParameters.RegisterParameter(3086, "FF2L_PEI_Begin_Year_Quarter");
            Process.ProcessParameters.RegisterParameter(3218, "FF2L_PEI_Check_Date");
            Process.ProcessParameters.RegisterParameter(3085, "FF2L_PEI_Eligible");
            Process.ProcessParameters.RegisterParameter(3087, "FF2L_PEI_End_Year_Quarter");
            Process.ProcessParameters.RegisterParameter(3076, "FF2L_Test_Records_By_Location_For_QA_Status");
            Process.ProcessParameters.RegisterParameter(2441, "F-factor_Range_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(3624, "Final_Conversion_Factor");
            Process.ProcessParameters.RegisterParameter(3135, "First_Day_of_Operation");
            Process.ProcessParameters.RegisterParameter(3114, "First_ECMPS_Reporting_Period_Object");
            Process.ProcessParameters.RegisterParameter(3136, "First_Hour_of_Operation");
            Process.ProcessParameters.RegisterParameter(4723, "Flow_Averaging_Component_List");
            Process.ProcessParameters.RegisterParameter(4725, "Flow_Averaging_Component_Record");
            Process.ProcessParameters.RegisterParameter(2549, "FLOW_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(3591, "Flow_MHV_Optionally_Allowed");
            Process.ProcessParameters.RegisterParameter(882, "Flow_Monitor_Hourly_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(1031, "Flow_Monitor_Hourly_Count");
            Process.ProcessParameters.RegisterParameter(1406, "Flow_Monitor_Hourly_Value_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(4707, "Flow_Needed_For_Part_75");
            Process.ProcessParameters.RegisterParameter(3187, "Flow_RATA_Exemption");
            Process.ProcessParameters.RegisterParameter(3238, "FLOW_System_ID_Array");
            Process.ProcessParameters.RegisterParameter(3626, "Formatted_Cylinder_Id_List");
            Process.ProcessParameters.RegisterParameter(430, "Fuel_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(3073, "Fuel_Flow_Component_Record_to_Check");
            Process.ProcessParameters.RegisterParameter(3141, "Fuel_Records_By_Date_and_Location");
            Process.ProcessParameters.RegisterParameter(2451, "Fuel_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(2890, "Fuels_Used_List");
            Process.ProcessParameters.RegisterParameter(2322, "Fuel_Type_Reality_Checks_For_Density_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(2320, "Fuel_Type_Reality_Checks_For_Fc_Factor_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(2667, "Fuel_Type_Reality_Checks_for_GCV_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(2324, "Fuel_Type_Reality_Checks_For_Sulfur_Content_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(2321, "Fuel_Type_Warning_Levels_For_Density_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(2668, "Fuel_Type_Warning_Levels_for_GCV_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(2323, "Fuel_Type_Warning_Levels_For_Sulfur_Content_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(2446, "Fw_Factor_Maximum");
            Process.ProcessParameters.RegisterParameter(2447, "Fw_Factor_Minimum");
            Process.ProcessParameters.RegisterParameter(2455, "FW_Factor_Needed");
            Process.ProcessParameters.RegisterParameter(3222, "Gas_Type_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(2793, "Generate_LME");
            Process.ProcessParameters.RegisterParameter(1006, "H2o_Calculated_Percent");
            Process.ProcessParameters.RegisterParameter(1005, "H2o_Calculation_Status");
            Process.ProcessParameters.RegisterParameter(909, "H2o_Cem_Equation_Code");
            Process.ProcessParameters.RegisterParameter(2434, "H2O_Default_Max_Value");
            Process.ProcessParameters.RegisterParameter(2435, "H2O_Default_Min_Value");
            Process.ProcessParameters.RegisterParameter(1008, "H2O_Default_Value");
            Process.ProcessParameters.RegisterParameter(879, "H2O_Derived_Hourly_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(1032, "H2O_Derived_Hourly_Count");
            Process.ProcessParameters.RegisterParameter(953, "H2O_Derived_Hourly_Status");
            Process.ProcessParameters.RegisterParameter(2584, "H2O_DHV_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(3466, "H2O_DHV_MODC");
            Process.ProcessParameters.RegisterParameter(2478, "H2O_Fuel_Specific_Missing_Data");
            Process.ProcessParameters.RegisterParameter(4687, "H2O_Has_Measured_DHV_MODC");
            Process.ProcessParameters.RegisterParameter(957, "H2O_Method_Code");
            Process.ProcessParameters.RegisterParameter(2547, "H2O_MHV_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(3467, "H2O_MHV_MODC");
            Process.ProcessParameters.RegisterParameter(2523, "H2O_Missing_Data_Approach");
            Process.ProcessParameters.RegisterParameter(878, "H2O_Monitor_Hourly_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(1033, "H2O_Monitor_Hourly_Count");
            Process.ProcessParameters.RegisterParameter(972, "H2O_Monitor_Method_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(980, "H2O_Reported_Value");
            Process.ProcessParameters.RegisterParameter(1657, "Heat_Input_App_D_Method_Active_For_Hour");
            Process.ProcessParameters.RegisterParameter(1248, "Heat_Input_CEM_Equation_Code");
            Process.ProcessParameters.RegisterParameter(1656, "Heat_Input_CEM_Method_Active_For_Hour");
            Process.ProcessParameters.RegisterParameter(1232, "Heat_Input_Checks_Needed_for_NOx_Mass_Calc");
            Process.ProcessParameters.RegisterParameter(2481, "Heat_Input_Derived_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(1242, "Heat_Input_Derived_Hourly_Count");
            Process.ProcessParameters.RegisterParameter(2477, "Heat_Input_Fuel_Specific_Missing_Data");
            Process.ProcessParameters.RegisterParameter(3146, "Heat_Input_Start_Quarter");
            Process.ProcessParameters.RegisterParameter(2682, "HFF_Calc_CO2");
            Process.ProcessParameters.RegisterParameter(2669, "HFF_Calc_HI_Rate");
            Process.ProcessParameters.RegisterParameter(2661, "HFF_Calc_Mass_Oil_Rate");
            Process.ProcessParameters.RegisterParameter(2678, "HFF_Calc_SO2");
            Process.ProcessParameters.RegisterParameter(2658, "HFF_Calc_Volumetric_Rate");
            Process.ProcessParameters.RegisterParameter(2664, "HFF_Density");
            Process.ProcessParameters.RegisterParameter(2681, "HFF_Fc_Factor");
            Process.ProcessParameters.RegisterParameter(2652, "HFF_Fuel_Indicator_Code");
            Process.ProcessParameters.RegisterParameter(2655, "HFF_Gas_Record_Initialized");
            Process.ProcessParameters.RegisterParameter(2666, "HFF_GCV");
            Process.ProcessParameters.RegisterParameter(2672, "HFF_Mass_Oil_Calculated");
            Process.ProcessParameters.RegisterParameter(2662, "HFF_Mass_Oil_Default_Parameter");
            Process.ProcessParameters.RegisterParameter(2660, "HFF_Mass_SODC_Status");
            Process.ProcessParameters.RegisterParameter(3057, "HFF_Max_Heat_Input_for_Mass");
            Process.ProcessParameters.RegisterParameter(3056, "HFF_Max_Heat_Input_for_Volume");
            Process.ProcessParameters.RegisterParameter(2654, "HFF_Oil_Record_Initialized");
            Process.ProcessParameters.RegisterParameter(2677, "HFF_SO2_Emission_Rate");
            Process.ProcessParameters.RegisterParameter(2674, "HFF_SO2_Equation_Code");
            Process.ProcessParameters.RegisterParameter(2649, "HFF_SODC_Status");
            Process.ProcessParameters.RegisterParameter(2676, "HFF_Sulfur");
            Process.ProcessParameters.RegisterParameter(2653, "HFF_System_Fuel");
            Process.ProcessParameters.RegisterParameter(2651, "HFF_System_Type");
            Process.ProcessParameters.RegisterParameter(2656, "HFF_UOM_Status");
            Process.ProcessParameters.RegisterParameter(2648, "HFF_Usage_Time_Status");
            Process.ProcessParameters.RegisterParameter(2659, "HFF_Volumetric_Default_Parameter");
            Process.ProcessParameters.RegisterParameter(1802, "Hi_App_D_Accumulator");
            Process.ProcessParameters.RegisterParameter(2585, "HI_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(2696, "HI_Calculated_Apportioned_Value");
            Process.ProcessParameters.RegisterParameter(2614, "HI_Derived_Hourly_Status");
            Process.ProcessParameters.RegisterParameter(2714, "HI_Derived_Hourly_System_Status_Validated");
            Process.ProcessParameters.RegisterParameter(1405, "HI_Derived_Hourly_Value_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(2822, "High_Range_Component_ID");
            Process.ProcessParameters.RegisterParameter(4629, "HI_HPFF_Exists");
            Process.ProcessParameters.RegisterParameter(3178, "HI_Measure_Code");
            Process.ProcessParameters.RegisterParameter(2239, "Hi_Monitor_Method_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(2876, "HIT_Derived_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(2619, "HIT_Derived_Hourly_Status");
            Process.ProcessParameters.RegisterParameter(3092, "HIT_DHV_Load_Sum_Records");
            Process.ProcessParameters.RegisterParameter(2867, "HIT_Summary_Invalid_Fields");
            Process.ProcessParameters.RegisterParameter(1801, "Hourly_Emissions_Tolerances_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(2482, "Hourly_Extraneous_Fields");
            Process.ProcessParameters.RegisterParameter(1874, "Hourly_Fuel_Flow_Checks_Needed_For_Co2");
            Process.ProcessParameters.RegisterParameter(1875, "Hourly_Fuel_Flow_Checks_Needed_For_Heat_Input");
            Process.ProcessParameters.RegisterParameter(1872, "Hourly_Fuel_Flow_Checks_Needed_For_So2");
            Process.ProcessParameters.RegisterParameter(1661, "Hourly_Fuel_Flow_Count_For_Gas");
            Process.ProcessParameters.RegisterParameter(1662, "Hourly_Fuel_Flow_Count_For_Oil");
            Process.ProcessParameters.RegisterParameter(1873, "Hourly_Fuel_Flow_Needed_For_Nox_Rate_Calc");
            Process.ProcessParameters.RegisterParameter(2888, "Hourly_Fuel_Flow_Records");
            Process.ProcessParameters.RegisterParameter(2242, "Hourly_Fuel_Flow_Records_For_Hour_Location");
            Process.ProcessParameters.RegisterParameter(3139, "Hourly_Non_Operating_Data_Records_for_Location");
            Process.ProcessParameters.RegisterParameter(918, "Hourly_Operating_Data_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(3091, "Hourly_Operating_Data_Records_for_Configuration");
            Process.ProcessParameters.RegisterParameter(2769, "Hourly_Operating_Data_Records_for_LME_Configuration");
            Process.ProcessParameters.RegisterParameter(2741, "Hourly_Operating_Data_Records_for_Location");
            Process.ProcessParameters.RegisterParameter(2314, "Hourly_Param_Fuel_Flow_Records_For_Current_Fuel_Flow");
            Process.ProcessParameters.RegisterParameter(3160, "Ignored_Daily_Calibration_Tests");
            Process.ProcessParameters.RegisterParameter(3248, "Ignored_Daily_Interference_Tests");
            Process.ProcessParameters.RegisterParameter(3190, "Inappropriate_Transmitter_Transducer_Test");
            Process.ProcessParameters.RegisterParameter(3392, "Initial_Certification_Event_Record");
            Process.ProcessParameters.RegisterParameter(3524, "Injection_Measured_Value_Valid");
            Process.ProcessParameters.RegisterParameter(3523, "Injection_Reference_Value_Valid");
            Process.ProcessParameters.RegisterParameter(3625, "Invalid_Cylinder_Id_List");
            Process.ProcessParameters.RegisterParameter(3128, "Invalid_Daily_Cal_Record");
            Process.ProcessParameters.RegisterParameter(3098, "Invalid_FF2L_Test_Number");
            Process.ProcessParameters.RegisterParameter(2779, "Invalid_Linearity_Record");
            Process.ProcessParameters.RegisterParameter(2929, "Invalid_RATA_Record");
            Process.ProcessParameters.RegisterParameter(3105, "Invalid_RATA_Test_Number");
            Process.ProcessParameters.RegisterParameter(3249, "Last_Failed_Or_Aborted_Daily_Cal_Object");
            Process.ProcessParameters.RegisterParameter(4680, "Last_Quality_Assured_Value_Supp_Data_Dictionary_Array");
            Process.ProcessParameters.RegisterParameter(3289, "Latest_Daily_Interference_Check_Object");
            Process.ProcessParameters.RegisterParameter(3298, "Leak_Check_Records_By_Location_For_QA_Status");
            Process.ProcessParameters.RegisterParameter(3302, "Leak_Missing_Op_Data_Info");
            Process.ProcessParameters.RegisterParameter(3294, "Leak_Status_Required");
            Process.ProcessParameters.RegisterParameter(3300, "Leak_Status_Result");
            Process.ProcessParameters.RegisterParameter(2253, "Legacy_Data_Evaluation");
            Process.ProcessParameters.RegisterParameter(4716, "Like_Kind_Hours");
            Process.ProcessParameters.RegisterParameter(4721, "Linearity_Exists_Location_Array");
            Process.ProcessParameters.RegisterParameter(3012, "Linearity_Missing_Op_Data_Info");
            Process.ProcessParameters.RegisterParameter(4722, "Linearity_Offline_List");
            Process.ProcessParameters.RegisterParameter(2762, "Linearity_Status_Required");
            Process.ProcessParameters.RegisterParameter(2812, "Linearity_Test_Records_By_Location_For_QA_Status");
            Process.ProcessParameters.RegisterParameter(2839, "LME_Annual");
            Process.ProcessParameters.RegisterParameter(2840, "LME_April_Load");
            Process.ProcessParameters.RegisterParameter(3171, "LME_April_OpTime");
            Process.ProcessParameters.RegisterParameter(2798, "LME_Calc_Heat_Input");
            Process.ProcessParameters.RegisterParameter(2877, "LME_CP_April_Heat_Input");
            Process.ProcessParameters.RegisterParameter(2878, "LME_CP_Total_Heat_Input");
            Process.ProcessParameters.RegisterParameter(2920, "LME_Derived_Hourly_Value_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(3066, "LME_Exceeding_Parameters");
            Process.ProcessParameters.RegisterParameter(3239, "LME_Fuel_Array");
            Process.ProcessParameters.RegisterParameter(2883, "LME_Fuel_Code_List");
            Process.ProcessParameters.RegisterParameter(2788, "LME_Gen_Annual");
            Process.ProcessParameters.RegisterParameter(2786, "LME_Gen_April_Load");
            Process.ProcessParameters.RegisterParameter(2787, "LME_Gen_April_Load_Array");
            Process.ProcessParameters.RegisterParameter(3167, "LME_Gen_April_Optime");
            Process.ProcessParameters.RegisterParameter(2784, "LME_Gen_CP_April_Heat_Input");
            Process.ProcessParameters.RegisterParameter(2774, "LME_Gen_CP_Total_Heat_Input");
            Process.ProcessParameters.RegisterParameter(2921, "LME_Gen_Fuel_Code");
            Process.ProcessParameters.RegisterParameter(2770, "LME_Gen_HI_Method");
            Process.ProcessParameters.RegisterParameter(2844, "LME_Gen_HI_Substitute_Data_Code");
            Process.ProcessParameters.RegisterParameter(2776, "LME_Gen_LTFF_Heat_Input");
            Process.ProcessParameters.RegisterParameter(2789, "LME_Gen_OS");
            Process.ProcessParameters.RegisterParameter(2791, "LME_Gen_Parameters");
            Process.ProcessParameters.RegisterParameter(2771, "LME_Gen_Total_Load");
            Process.ProcessParameters.RegisterParameter(2773, "LME_Gen_Total_Load_Array");
            Process.ProcessParameters.RegisterParameter(3166, "LME_Gen_Total_Optime");
            Process.ProcessParameters.RegisterParameter(2799, "LME_Gen_Validated");
            Process.ProcessParameters.RegisterParameter(2764, "LME_HI_Method");
            Process.ProcessParameters.RegisterParameter(2849, "LME_HI_Substitute_Data_Code");
            Process.ProcessParameters.RegisterParameter(2838, "LME_OS");
            Process.ProcessParameters.RegisterParameter(2837, "LME_Total_Load");
            Process.ProcessParameters.RegisterParameter(3170, "LME_Total_Optime");
            Process.ProcessParameters.RegisterParameter(2843, "LME_Year_Start_Quarter");
            Process.ProcessParameters.RegisterParameter(3008, "Location_Attribute_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(2671, "Location_Capacity_Records_for_Hour_Location");
            Process.ProcessParameters.RegisterParameter(3316, "LocationPos");
            Process.ProcessParameters.RegisterParameter(4717, "Location_Position_Lookup");
            Process.ProcessParameters.RegisterParameter(301, "Location_Program_Records");
            Process.ProcessParameters.RegisterParameter(2259, "Location_Program_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(859, "Location_Reporting_Frequency_Records");
            Process.ProcessParameters.RegisterParameter(2823, "Low_Range_Component_ID");
            Process.ProcessParameters.RegisterParameter(2841, "LTFF_Records");
            Process.ProcessParameters.RegisterParameter(3571, "MATS_3_Level_System_Integrity_Records_for_QA_Status");
            Process.ProcessParameters.RegisterParameter(3401, "MATS_BT_Trap_Hg_Valid");
            Process.ProcessParameters.RegisterParameter(3426, "MATS_Calc_Hg_System_Concentration");
            Process.ProcessParameters.RegisterParameter(3395, "MATS_Calc_Hourly_SFSR_Ratio");
            Process.ProcessParameters.RegisterParameter(3416, "MATS_Calc_Train_Hg_Concentration");
            Process.ProcessParameters.RegisterParameter(3411, "MATS_Calc_Train_Percent_Breakthrough");
            Process.ProcessParameters.RegisterParameter(3408, "MATS_Calc_Train_Percent_Spike_Recovery");
            Process.ProcessParameters.RegisterParameter(3422, "MATS_Calc_Trap_Absolute_Difference");
            Process.ProcessParameters.RegisterParameter(3533, "MATS_Calc_Trap_Percent_Difference");
            Process.ProcessParameters.RegisterParameter(3475, "MATS_Calculated_HCl_Rate_Value");
            Process.ProcessParameters.RegisterParameter(3476, "MATS_Calculated_HF_Rate_Value");
            Process.ProcessParameters.RegisterParameter(3474, "MATS_Calculated_Hg_Rate_Value");
            Process.ProcessParameters.RegisterParameter(3477, "MATS_Calculated_SO2_Rate_Value");
            Process.ProcessParameters.RegisterParameter(3573, "MATS_Check_for_HGSI3_Ran");
            Process.ProcessParameters.RegisterParameter(3568, "MATS_Daily_Cal_Required_DateHour");
            Process.ProcessParameters.RegisterParameter(3460, "MATS_DHV_Measured_MODC_List");
            Process.ProcessParameters.RegisterParameter(3433, "MATS_DHV_Record");
            Process.ProcessParameters.RegisterParameter(3336, "MATS_DHV_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(3461, "MATS_DHV_Unavailable_MODC_List");
            Process.ProcessParameters.RegisterParameter(3434, "MATS_Equation_Code_With_H2O");
            Process.ProcessParameters.RegisterParameter(3435, "MATS_Equation_Code_Without_H2O");
            Process.ProcessParameters.RegisterParameter(3335, "MATS_Expected");
            Process.ProcessParameters.RegisterParameter(3602, "MATS_GFM_Sampling_Train_Records");
            Process.ProcessParameters.RegisterParameter(3359, "MATS_HCLC_MHV_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(3360, "MATS_HClC_MHV_Record");
            Process.ProcessParameters.RegisterParameter(3344, "MATS_HClC_Needed");
            Process.ProcessParameters.RegisterParameter(3451, "MATS_HCl_DHV_Parameter");
            Process.ProcessParameters.RegisterParameter(3538, "MATS_HCl_DHV_Parameter_Description");
            Process.ProcessParameters.RegisterParameter(3341, "MATS_HCl_DHV_Record");
            Process.ProcessParameters.RegisterParameter(3452, "MATS_HCl_DHV_Valid");
            Process.ProcessParameters.RegisterParameter(3580, "MATS_HCl_Method_Code");
            Process.ProcessParameters.RegisterParameter(3331, "MATS_HCl_Method_Record");
            Process.ProcessParameters.RegisterParameter(3542, "MATS_HCl_MHV_Parameter_Description");
            Process.ProcessParameters.RegisterParameter(3328, "MATS_HCl_Parameter_Code");
            Process.ProcessParameters.RegisterParameter(3345, "MATS_HCLRE_DHV_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(3346, "MATS_HCLRH_DHV_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(3361, "MATS_HFC_MHV_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(3362, "MATS_HFC_MHV_Record");
            Process.ProcessParameters.RegisterParameter(3348, "MATS_HFC_Needed");
            Process.ProcessParameters.RegisterParameter(3453, "MATS_HF_DHV_Parameter");
            Process.ProcessParameters.RegisterParameter(3539, "MATS_HF_DHV_Parameter_Description");
            Process.ProcessParameters.RegisterParameter(3347, "MATS_HF_DHV_Record");
            Process.ProcessParameters.RegisterParameter(3455, "MATS_HF_DHV_Valid");
            Process.ProcessParameters.RegisterParameter(3581, "MATS_HF_Method_Code");
            Process.ProcessParameters.RegisterParameter(3333, "MATS_HF_Method_Record");
            Process.ProcessParameters.RegisterParameter(3543, "MATS_HF_MHV_Parameter_Description");
            Process.ProcessParameters.RegisterParameter(3329, "MATS_HF_Parameter_Code");
            Process.ProcessParameters.RegisterParameter(3349, "MATS_HFRE_DHV_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(3350, "MATS_HFRH_DHV_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(3586, "MATS_Hg_3_Level_SI_Event_Record");
            Process.ProcessParameters.RegisterParameter(3590, "MATS_Hg_3_Level_SI_Test_Record");
            Process.ProcessParameters.RegisterParameter(3357, "MATS_HGC_MHV_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(3358, "MATS_HgC_MHV_Record");
            Process.ProcessParameters.RegisterParameter(3339, "MATS_HgC_Needed");
            Process.ProcessParameters.RegisterParameter(3449, "MATS_Hg_DHV_Parameter");
            Process.ProcessParameters.RegisterParameter(3537, "MATS_Hg_DHV_Parameter_Description");
            Process.ProcessParameters.RegisterParameter(3340, "MATS_Hg_DHV_Record");
            Process.ProcessParameters.RegisterParameter(3450, "MATS_Hg_DHV_Valid");
            Process.ProcessParameters.RegisterParameter(3585, "MATS_Hg_Linearity_Event_Record");
            Process.ProcessParameters.RegisterParameter(3583, "MATS_Hg_Linearity_Records_for_QA_Status");
            Process.ProcessParameters.RegisterParameter(3589, "MATS_Hg_Linearity_Test_Record");
            Process.ProcessParameters.RegisterParameter(3579, "MATS_Hg_Method_Code");
            Process.ProcessParameters.RegisterParameter(3326, "MATS_Hg_Method_Record");
            Process.ProcessParameters.RegisterParameter(3541, "MATS_Hg_MHV_Parameter_Description");
            Process.ProcessParameters.RegisterParameter(3327, "MATS_Hg_Parameter_Code");
            Process.ProcessParameters.RegisterParameter(3337, "MATS_HGRE_DHV_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(3338, "MATS_HGRH_DHV_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(3506, "MATS_Hourly_GFM_Component_Id_Valid");
            Process.ProcessParameters.RegisterParameter(3485, "MATS_Hourly_GFM_Record");
            Process.ProcessParameters.RegisterParameter(3603, "MATS_Hourly_GFM_Records_for_Hour_and_Location");
            Process.ProcessParameters.RegisterParameter(3400, "MATS_Main_Trap_Hg_Valid");
            Process.ProcessParameters.RegisterParameter(3447, "MATS_MHV_Calculated_HClC_Value");
            Process.ProcessParameters.RegisterParameter(3448, "MATS_MHV_Calculated_HFC_Value");
            Process.ProcessParameters.RegisterParameter(3446, "MATS_MHV_Calculated_HgC_Value");
            Process.ProcessParameters.RegisterParameter(3445, "MATS_MHV_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(3558, "MATS_MHV_HClC_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(3559, "MATS_MHV_HFC_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(3557, "MATS_MHV_HgC_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(3440, "MATS_MHV_Measured_MODC_List");
            Process.ProcessParameters.RegisterParameter(4719, "MATS_MHV_No_Like_Kind_MODC_List");
            Process.ProcessParameters.RegisterParameter(3439, "MATS_MHV_Record");
            Process.ProcessParameters.RegisterParameter(3607, "MATS_MHV_Sorbent_Traps");
            Process.ProcessParameters.RegisterParameter(3441, "MATS_MHV_Unavailable_MODC_List");
            Process.ProcessParameters.RegisterParameter(3604, "MATS_Missing_GFM_List");
            Process.ProcessParameters.RegisterParameter(3459, "MATS_Moisture_Equation_List");
            Process.ProcessParameters.RegisterParameter(4644, "MATS_MS1_HCL_DHV_ID");
            Process.ProcessParameters.RegisterParameter(4651, "MATS_MS1_HCL_Unadjusted_Hourly_Value");
            Process.ProcessParameters.RegisterParameter(4645, "MATS_MS1_HF_DHV_ID");
            Process.ProcessParameters.RegisterParameter(4652, "MATS_MS1_HF_Unadjusted_Hourly_Value");
            Process.ProcessParameters.RegisterParameter(4641, "MATS_MS1_Hg_DHV_ID");
            Process.ProcessParameters.RegisterParameter(4650, "MATS_MS1_Hg_Unadjusted_Hourly_Value");
            Process.ProcessParameters.RegisterParameter(4646, "MATS_MS1_SO2_DHV_ID");
            Process.ProcessParameters.RegisterParameter(4653, "MATS_MS1_SO2_Unadjusted_Hourly_Value");
            Process.ProcessParameters.RegisterParameter(3605, "MATS_Multiple_GFM_List");
            Process.ProcessParameters.RegisterParameter(4669, "MATS_Parameter_Plugin_HCL");
            Process.ProcessParameters.RegisterParameter(4670, "MATS_Parameter_Plugin_HF");
            Process.ProcessParameters.RegisterParameter(4658, "MATS_Parameter_Plugin_Hg");
            Process.ProcessParameters.RegisterParameter(4671, "MATS_Parameter_Plugin_SO2");
            Process.ProcessParameters.RegisterParameter(4666, "MATS_Reported_Plugin_HCL");
            Process.ProcessParameters.RegisterParameter(4667, "MATS_Reported_Plugin_HF");
            Process.ProcessParameters.RegisterParameter(4659, "MATS_Reported_Plugin_Hg");
            Process.ProcessParameters.RegisterParameter(4668, "MATS_Reported_Plugin_SO2");
            Process.ProcessParameters.RegisterParameter(3504, "MATS_Sampling_Train_Component_Id_Valid");
            Process.ProcessParameters.RegisterParameter(3563, "MATS_Sampling_Train_Count");
            Process.ProcessParameters.RegisterParameter(3503, "MATS_Sampling_Train_Dictionary");
            Process.ProcessParameters.RegisterParameter(3502, "MATS_Sampling_Train_Problem_Component_Exists");
            Process.ProcessParameters.RegisterParameter(3507, "MATS_Sampling_Train_QA_Status");
            Process.ProcessParameters.RegisterParameter(3505, "MATS_Sampling_Train_QA_Status_Code_Valid");
            Process.ProcessParameters.RegisterParameter(3481, "MATS_Sampling_Train_QA_Status_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(3480, "MATS_Sampling_Train_Record");
            Process.ProcessParameters.RegisterParameter(3562, "MATS_Sampling_Train_Records");
            Process.ProcessParameters.RegisterParameter(3489, "MATS_Sampling_Trains_Valid");
            Process.ProcessParameters.RegisterParameter(3352, "MATS_SO2C_Needed");
            Process.ProcessParameters.RegisterParameter(3456, "MATS_SO2_DHV_Parameter");
            Process.ProcessParameters.RegisterParameter(3540, "MATS_SO2_DHV_Parameter_Description");
            Process.ProcessParameters.RegisterParameter(3351, "MATS_SO2_DHV_Record");
            Process.ProcessParameters.RegisterParameter(3457, "MATS_SO2_DHV_Valid");
            Process.ProcessParameters.RegisterParameter(3582, "MATS_SO2_Method_Code");
            Process.ProcessParameters.RegisterParameter(3334, "MATS_SO2_Method_Record");
            Process.ProcessParameters.RegisterParameter(3330, "MATS_SO2_Parameter_Code");
            Process.ProcessParameters.RegisterParameter(3353, "MATS_SO2RE_DHV_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(3355, "MATS_SO2RH_DHV_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(3534, "MATS_Sorbent_Trap_Begin_DateHour");
            Process.ProcessParameters.RegisterParameter(3496, "MATS_Sorbent_Trap_Begin_Date_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(3495, "MATS_Sorbent_Trap_Begin_Date_Valid");
            Process.ProcessParameters.RegisterParameter(3488, "MATS_Sorbent_Trap_Dates_and_Hours_Consistent");
            Process.ProcessParameters.RegisterParameter(3491, "MATS_Sorbent_Trap_Dictionary");
            Process.ProcessParameters.RegisterParameter(3535, "MATS_Sorbent_Trap_End_DateHour");
            Process.ProcessParameters.RegisterParameter(3498, "MATS_Sorbent_Trap_End_Date_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(3497, "MATS_Sorbent_Trap_End_Date_Valid");
            Process.ProcessParameters.RegisterParameter(3490, "MATS_Sorbent_Trap_Evaluation_Needed");
            Process.ProcessParameters.RegisterParameter(3565, "Mats_Sorbent_Trap_List_By_Location_Array");
            Process.ProcessParameters.RegisterParameter(3444, "MATS_Sorbent_Trap_MODC");
            Process.ProcessParameters.RegisterParameter(3419, "MATS_Sorbent_TRAP_MODC_Code_Valid");
            Process.ProcessParameters.RegisterParameter(3421, "MATS_Sorbent_Trap_Paired_Trap_Agreement_Valid");
            Process.ProcessParameters.RegisterParameter(3487, "MATS_Sorbent_Trap_Record");
            Process.ProcessParameters.RegisterParameter(3493, "MATS_Sorbent_Trap_Records");
            Process.ProcessParameters.RegisterParameter(3564, "MATS_Sorbent_Trap_Sampling_Train_List");
            Process.ProcessParameters.RegisterParameter(3492, "MATS_Sorbent_Trap_Supplemental_Data_Records");
            Process.ProcessParameters.RegisterParameter(3501, "MATS_Sorbent_Trap_Valid_Exists");
            Process.ProcessParameters.RegisterParameter(3403, "MATS_Spike_Reference_Value_Valid");
            Process.ProcessParameters.RegisterParameter(3402, "MATS_Spike_Trap_Hg_Valid");
            Process.ProcessParameters.RegisterParameter(3410, "MATS_Total_Sample_Volume_DSCM_Valid");
            Process.ProcessParameters.RegisterParameter(2245, "Maximum_App_E_Curve_Nox_Emission_Rate");
            Process.ProcessParameters.RegisterParameter(3000, "Max_Level_Count");
            Process.ProcessParameters.RegisterParameter(2074, "Max_Stack_Optime");
            Process.ProcessParameters.RegisterParameter(2068, "Max_Unit_Optime");
            Process.ProcessParameters.RegisterParameter(340, "Method_Records");
            Process.ProcessParameters.RegisterParameter(2735, "Missing_CO2M_Formula");
            Process.ProcessParameters.RegisterParameter(4727, "Missing_Data_PMA_Problem_Derived_List");
            Process.ProcessParameters.RegisterParameter(4728, "Missing_Data_PMA_Problem_Monitor_List");
            Process.ProcessParameters.RegisterParameter(4729, "Missing_Data_PMA_Reporter_Type");
            Process.ProcessParameters.RegisterParameter(4726, "Missing_Data_Pma_Tracking");
            Process.ProcessParameters.RegisterParameter(3099, "Missing_FF2L_Year_Quarter");
            Process.ProcessParameters.RegisterParameter(4735, "Missing_MODC_46_Non_46_MODC_Code");
            Process.ProcessParameters.RegisterParameter(4733, "Missing_MODC_46_Parameter_for_MODC_46");
            Process.ProcessParameters.RegisterParameter(4734, "Missing_MODC_46_Parameter_For_Non_46");
            Process.ProcessParameters.RegisterParameter(2456, "Moisture_Needed");
            Process.ProcessParameters.RegisterParameter(2525, "Monitor_Default_Records_by_Hour_Location");
            Process.ProcessParameters.RegisterParameter(2828, "Monitor_Formula_Records_By_Day_Location");
            Process.ProcessParameters.RegisterParameter(981, "Monitor_Formula_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(2577, "Monitor_Hourly_Adjusted_Value_Status");
            Process.ProcessParameters.RegisterParameter(2569, "Monitor_Hourly_Component_Status");
            Process.ProcessParameters.RegisterParameter(2636, "Monitor_Hourly_Missing_Data_Status");
            Process.ProcessParameters.RegisterParameter(2563, "Monitor_Hourly_Modc_Status");
            Process.ProcessParameters.RegisterParameter(2566, "Monitor_Hourly_Null_Status");
            Process.ProcessParameters.RegisterParameter(2564, "Monitor_Hourly_Pma_Status");
            Process.ProcessParameters.RegisterParameter(2571, "Monitor_Hourly_Preadjusted_Value_Status");
            Process.ProcessParameters.RegisterParameter(2568, "Monitor_Hourly_System_Status");
            Process.ProcessParameters.RegisterParameter(2576, "Monitor_Hourly_Unadjusted_Value_Status");
            Process.ProcessParameters.RegisterParameter(1876, "Monitoring_Plan_Location_Records");
            Process.ProcessParameters.RegisterParameter(2780, "Monitor_Load_Records_by_Hour_and_Location");
            Process.ProcessParameters.RegisterParameter(2824, "Monitor_Method_Records_By_Day_Location");
            Process.ProcessParameters.RegisterParameter(3576, "Monitor_Method_Records_By_Hour");
            Process.ProcessParameters.RegisterParameter(2790, "Monitor_Method_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(2254, "Monitor_Qualification_Records_By_Hour");
            Process.ProcessParameters.RegisterParameter(2574, "Monitor_Span_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(969, "Monitor_System_Component_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(4682, "Monitor_System_Components_For_Em_Evaluation");
            Process.ProcessParameters.RegisterParameter(345, "Monitor_System_Records");
            Process.ProcessParameters.RegisterParameter(1007, "Monitor_System_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(4681, "Monitor_Systems_For_Em_Evaluation");
            Process.ProcessParameters.RegisterParameter(3129, "Most_Recent_Daily_Calibration_Test_Object");
            Process.ProcessParameters.RegisterParameter(4732, "MP_Last_Evaluated_Timeframe");
            Process.ProcessParameters.RegisterParameter(2688, "MP_Load_UOM");
            Process.ProcessParameters.RegisterParameter(3273, "Mp_Location_Non_Load_Based_Records");
            Process.ProcessParameters.RegisterParameter(2847, "MP_Method_Records");
            Process.ProcessParameters.RegisterParameter(3154, "MP_Operating_Status_Records");
            Process.ProcessParameters.RegisterParameter(2687, "MP_Pipe_Config_for_Hourly_Checks");
            Process.ProcessParameters.RegisterParameter(3153, "MP_Program_Exemption_Records");
            Process.ProcessParameters.RegisterParameter(2865, "MP_Program_Records");
            Process.ProcessParameters.RegisterParameter(3267, "MP_Qualification_Percent_Records");
            Process.ProcessParameters.RegisterParameter(2848, "MP_Qualification_Records");
            Process.ProcessParameters.RegisterParameter(1206, "MP_Reporting_Frequency_Records");
            Process.ProcessParameters.RegisterParameter(2065, "MP_Stack_Config_For_Hourly_Checks");
            Process.ProcessParameters.RegisterParameter(3263, "MP_Successfully_Evaluated");
            Process.ProcessParameters.RegisterParameter(3310, "MP_System_Component_Records");
            Process.ProcessParameters.RegisterParameter(2692, "MP_Unit_Load");
            Process.ProcessParameters.RegisterParameter(3138, "Multiple_Stack_Configuration");
            Process.ProcessParameters.RegisterParameter(3616, "MW_Load_Hourly_Tolerance");
            Process.ProcessParameters.RegisterParameter(2580, "NOX_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(2697, "NOX_Calculated_Apportionment_Based_Value");
            Process.ProcessParameters.RegisterParameter(2548, "NOXC_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(1208, "NOxC_Monitor_Hourly_Count");
            Process.ProcessParameters.RegisterParameter(2353, "Nox_Conc_For_Nox_Rate_Calculation");
            Process.ProcessParameters.RegisterParameter(1213, "NOx_Conc_Modc");
            Process.ProcessParameters.RegisterParameter(1229, "NOx_Conc_Needed_for_NOx_Mass_Calc");
            Process.ProcessParameters.RegisterParameter(1209, "NOx_Conc_Needed_for_NOx_Rate_Calc");
            Process.ProcessParameters.RegisterParameter(2612, "NOX_Derived_Hourly_Status");
            Process.ProcessParameters.RegisterParameter(1514, "NOx_Derived_Hourly_Value_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(1212, "NOx_Emission_Rate_Modc");
            Process.ProcessParameters.RegisterParameter(3237, "NOXE_System_ID_Array");
            Process.ProcessParameters.RegisterParameter(2474, "NOx_Mass_Bypass_Code");
            Process.ProcessParameters.RegisterParameter(1222, "NOx_Mass_Derived_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(1227, "NOx_Mass_Equation_Code");
            Process.ProcessParameters.RegisterParameter(2475, "NOx_Mass_Fuel_Specific_Missing_Data");
            Process.ProcessParameters.RegisterParameter(1221, "NOx_Mass_Method_Active_For_Hour");
            Process.ProcessParameters.RegisterParameter(1220, "NOx_Mass_Monitor_Method_Code");
            Process.ProcessParameters.RegisterParameter(2588, "NOXM_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(2874, "NOXM_Derived_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(2617, "NOXM_Derived_Hourly_Status");
            Process.ProcessParameters.RegisterParameter(1513, "NOx_Monitor_Method_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(2866, "NOXM_Summary_Invalid_Fields");
            Process.ProcessParameters.RegisterParameter(1928, "Noxr_App_E_Accumulator");
            Process.ProcessParameters.RegisterParameter(2472, "NOx_Rate_Bypass_Code");
            Process.ProcessParameters.RegisterParameter(1261, "NOx_Rate_Checks_Needed_for_NOx_Mass_Calc");
            Process.ProcessParameters.RegisterParameter(1067, "Nox_Rate_Equation_Code");
            Process.ProcessParameters.RegisterParameter(2473, "NOx_Rate_Fuel_Specific_Missing_Data");
            Process.ProcessParameters.RegisterParameter(2581, "NOXR_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(2634, "NOXR_Calculated_Unadjusted_Value");
            Process.ProcessParameters.RegisterParameter(1054, "NOxR_Derived_Hourly_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(1056, "NoxR_Derived_Hourly_Count");
            Process.ProcessParameters.RegisterParameter(1480, "NOXR_Derived_Hourly_Status");
            Process.ProcessParameters.RegisterParameter(4690, "NOXR_Has_Measured_DHV_MODC");
            Process.ProcessParameters.RegisterParameter(3179, "NOXR_Measure_Code");
            Process.ProcessParameters.RegisterParameter(1515, "NOxR_Monitor_Method_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(4701, "NOXR_Primary_or_Primary_Bypass_MHV_Records");
            Process.ProcessParameters.RegisterParameter(3145, "NOXR_Start_Quarter");
            Process.ProcessParameters.RegisterParameter(4628, "NOxR_Summary_Required_for_LME_Annual_Records");
            Process.ProcessParameters.RegisterParameter(3144, "NOX_Start_Quarter");
            Process.ProcessParameters.RegisterParameter(4632, "NSPS4T_Annual_Records");
            Process.ProcessParameters.RegisterParameter(4633, "NSPS4T_Compliance_Period_Records");
            Process.ProcessParameters.RegisterParameter(4634, "NSPS4T_Current_Annual_Record");
            Process.ProcessParameters.RegisterParameter(4635, "NSPS4T_Current_Compliance_Period_1_Record");
            Process.ProcessParameters.RegisterParameter(4636, "NSPS4T_Current_Compliance_Period_2_Record");
            Process.ProcessParameters.RegisterParameter(4637, "NSPS4T_Current_Compliance_Period_3_Record");
            Process.ProcessParameters.RegisterParameter(4638, "NSPS4T_Current_Summary_Record");
            Process.ProcessParameters.RegisterParameter(4639, "NSPS4T_Invalid_CO2_Emission_Rate_UOM_List");
            Process.ProcessParameters.RegisterParameter(4640, "NSPS4T_Summary_Records");
            Process.ProcessParameters.RegisterParameter(2467, "O2_Conc_For_Co2c_Calc");
            Process.ProcessParameters.RegisterParameter(2644, "O2C_SD_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(2551, "O2_Dry_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(975, "O2_Dry_Checks_Needed_For_H2O");
            Process.ProcessParameters.RegisterParameter(1253, "O2_Dry_Checks_Needed_for_Heat_Input");
            Process.ProcessParameters.RegisterParameter(1069, "O2_Dry_Checks_Needed_For_Nox_Rate_Calc");
            Process.ProcessParameters.RegisterParameter(3470, "O2_Dry_MODC");
            Process.ProcessParameters.RegisterParameter(2462, "O2_Dry_Monitor_Hourly_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(1035, "O2_Dry_Monitor_Hourly_Count");
            Process.ProcessParameters.RegisterParameter(1087, "O2_Dry_Monitor_Hourly_Value_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(3436, "O2_Dry_Needed_for_MATS");
            Process.ProcessParameters.RegisterParameter(4693, "O2_Dry_Needed_for_MATS_Calculation");
            Process.ProcessParameters.RegisterParameter(1786, "O2_Dry_Needed_To_Support_Co2_Calculation");
            Process.ProcessParameters.RegisterParameter(1799, "O2_Null_Monitor_Hourly_Count");
            Process.ProcessParameters.RegisterParameter(1825, "O2_Null_Monitor_Hourly_Value_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(2550, "O2_Wet_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(974, "O2_Wet_Checks_Needed_For_H2O");
            Process.ProcessParameters.RegisterParameter(1252, "O2_Wet_Checks_Needed_for_Heat_Input");
            Process.ProcessParameters.RegisterParameter(1070, "O2_Wet_Checks_Needed_For_Nox_Rate_Calc");
            Process.ProcessParameters.RegisterParameter(3471, "O2_Wet_MODC");
            Process.ProcessParameters.RegisterParameter(2463, "O2_Wet_Monitor_Hourly_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(1034, "O2_Wet_Monitor_Hourly_Count");
            Process.ProcessParameters.RegisterParameter(1088, "O2_Wet_Monitor_Hourly_Value_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(3437, "O2_Wet_Needed_for_MATS");
            Process.ProcessParameters.RegisterParameter(4694, "O2_Wet_Needed_for_MATS_Calculation");
            Process.ProcessParameters.RegisterParameter(1787, "O2_Wet_Needed_To_Support_Co2_Calculation");
            Process.ProcessParameters.RegisterParameter(1509, "O2x_Monitor_Default_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(3291, "Offline_Daily_Int_Record");
            Process.ProcessParameters.RegisterParameter(4718, "Online_Daily_Int_Check");
            Process.ProcessParameters.RegisterParameter(3290, "Online_Daily_Int_Record");
            Process.ProcessParameters.RegisterParameter(3140, "OOC_Test_Records_by_Location");
            Process.ProcessParameters.RegisterParameter(3555, "Operating_Date_Array");
            Process.ProcessParameters.RegisterParameter(2740, "Operating_Supp_Data_Records_by_Location");
            Process.ProcessParameters.RegisterParameter(2869, "OPHOURS_Summary_Invalid_Fields");
            Process.ProcessParameters.RegisterParameter(2868, "OPTIME_Summary_Invalid_Fields");
            Process.ProcessParameters.RegisterParameter(2862, "OS_HIT_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(2863, "OS_NOx_Mass_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(2861, "OS_OPHOURS_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(2860, "OS_OPTIME_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(2864, "OS_Reporting_Requirement");
            Process.ProcessParameters.RegisterParameter(3315, "Override_RATA_BAF");
            Process.ProcessParameters.RegisterParameter(765, "Parameter_Units_Of_Measure_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(3088, "PEI_Missing_Op_Data_Info");
            Process.ProcessParameters.RegisterParameter(3081, "PEI_Required");
            Process.ProcessParameters.RegisterParameter(3077, "PEI_Test_Records_By_Location_For_QA_Status");
            Process.ProcessParameters.RegisterParameter(2717, "Pipe_LoadTimesOpTime_Accumulator");
            Process.ProcessParameters.RegisterParameter(4705, "Primary_Bypass_Active_Bypass_System_Id");
            Process.ProcessParameters.RegisterParameter(4704, "Primary_Bypass_Active_For_Hour");
            Process.ProcessParameters.RegisterParameter(4703, "Primary_Bypass_Active_In_Quarter");
            Process.ProcessParameters.RegisterParameter(4706, "Primary_Bypass_Active_Primary_System_Id");
            Process.ProcessParameters.RegisterParameter(3074, "Prior_Accuracy_Event_Record");
            Process.ProcessParameters.RegisterParameter(3130, "Prior_Daily_Cal_Event_Record");
            Process.ProcessParameters.RegisterParameter(4709, "Prior_Daily_Cal_First_Op_Hour_After_Last_Non_Op_Hour");
            Process.ProcessParameters.RegisterParameter(4708, "Prior_Daily_Cal_Last_Covered_Non_Op_Hour");
            Process.ProcessParameters.RegisterParameter(3150, "Prior_Daily_Cal_Rec_Calc_Test_Res");
            Process.ProcessParameters.RegisterParameter(3127, "Prior_Daily_Cal_Record");
            Process.ProcessParameters.RegisterParameter(3299, "Prior_Leak_Event_Record");
            Process.ProcessParameters.RegisterParameter(3301, "Prior_Leak_Expiration_Date");
            Process.ProcessParameters.RegisterParameter(3296, "Prior_Leak_Record");
            Process.ProcessParameters.RegisterParameter(2733, "Prior_Linearity_Event_Record");
            Process.ProcessParameters.RegisterParameter(2731, "Prior_Linearity_Record");
            Process.ProcessParameters.RegisterParameter(3004, "Prior_Max_Level_RATA_Record");
            Process.ProcessParameters.RegisterParameter(3002, "Prior_Multi_Level_RATA_Record");
            Process.ProcessParameters.RegisterParameter(3084, "Prior_PEI_Event_Record");
            Process.ProcessParameters.RegisterParameter(3083, "Prior_PEI_Record");
            Process.ProcessParameters.RegisterParameter(2930, "Prior_RATA_Event_Record");
            Process.ProcessParameters.RegisterParameter(3001, "Prior_Rata_Is_Alternate_Single_Level_RATA");
            Process.ProcessParameters.RegisterParameter(2928, "Prior_RATA_Record");
            Process.ProcessParameters.RegisterParameter(3593, "Program_Code_Table");
            Process.ProcessParameters.RegisterParameter(3594, "Program_is_Ozone_Season_List");
            Process.ProcessParameters.RegisterParameter(3598, "Program_Requires_NOXC_System_Certification_List");
            Process.ProcessParameters.RegisterParameter(3597, "Program_Requires_NOX_System_Certification_List");
            Process.ProcessParameters.RegisterParameter(3596, "Program_Requires_SO2_System_Certification_List");
            Process.ProcessParameters.RegisterParameter(3595, "Program_Uses_RUE_List");
            Process.ProcessParameters.RegisterParameter(3313, "Protocol_Gas_Balance_Component_List");
            Process.ProcessParameters.RegisterParameter(3314, "Protocol_Gas_Duplicate_Component_List");
            Process.ProcessParameters.RegisterParameter(3309, "Protocol_Gas_Exclusive_Component_List");
            Process.ProcessParameters.RegisterParameter(3308, "Protocol_Gas_Invalid_Component_List");
            Process.ProcessParameters.RegisterParameter(3224, "Protocol_Gas_Vendor_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(3109, "QA_Cert_Events_for_EM_Evaluation");
            Process.ProcessParameters.RegisterParameter(4677, "QA_Cert_Event_Supp_Data_Dictionary_Array");
            Process.ProcessParameters.RegisterParameter(4683, "QA_Cert_Event_Supp_Data_Dictionary_by_Component");
            Process.ProcessParameters.RegisterParameter(4685, "QA_Cert_Event_Supp_Data_Dictionary_by_System");
            Process.ProcessParameters.RegisterParameter(1877, "Qa_Certification_Event_Records");
            Process.ProcessParameters.RegisterParameter(3103, "QA_Cert_Tests_for_EM_Evaluation");
            Process.ProcessParameters.RegisterParameter(3569, "QA_Status_Component_Begin_Date");
            Process.ProcessParameters.RegisterParameter(3574, "QA_Status_Component_Begin_Datehour");
            Process.ProcessParameters.RegisterParameter(3514, "QA_Status_Component_Id");
            Process.ProcessParameters.RegisterParameter(3544, "QA_Status_Component_Identifier");
            Process.ProcessParameters.RegisterParameter(3512, "QA_Status_Component_Type_Code");
            Process.ProcessParameters.RegisterParameter(4702, "QA_Status_Hourly_Parameter_Code");
            Process.ProcessParameters.RegisterParameter(3577, "QA_Status_MATS_ERB_Date");
            Process.ProcessParameters.RegisterParameter(4711, "QA_Status_Primary_Or_Primary_Bypass_System_Id");
            Process.ProcessParameters.RegisterParameter(3516, "QA_Status_System_Designation_Code");
            Process.ProcessParameters.RegisterParameter(3513, "QA_Status_System_Id");
            Process.ProcessParameters.RegisterParameter(3545, "QA_Status_System_Identifier");
            Process.ProcessParameters.RegisterParameter(3511, "QA_Status_System_Type_Code");
            Process.ProcessParameters.RegisterParameter(1690, "QA_Supplemental_Attribute_Records");
            Process.ProcessParameters.RegisterParameter(3264, "Qualification_Percent_Missing_List");
            Process.ProcessParameters.RegisterParameter(2219, "Quarterly_Emissions_Tolerances_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(3443, "Quarterly_Gas_Audit_Status");
            Process.ProcessParameters.RegisterParameter(3211, "RATA_Event_Operating_Level_Count");
            Process.ProcessParameters.RegisterParameter(3013, "RATA_Missing_Op_Data_Info");
            Process.ProcessParameters.RegisterParameter(3010, "RATA_Status_BAF");
            Process.ProcessParameters.RegisterParameter(3009, "RATA_Status_Required");
            Process.ProcessParameters.RegisterParameter(2927, "RATA_Test_Records_By_Location_For_QA_Status");
            Process.ProcessParameters.RegisterParameter(2935, "Reported_Emissions_Value");
            Process.ProcessParameters.RegisterParameter(3393, "Reporting_Frequency_by_Location_Quarter");
            Process.ProcessParameters.RegisterParameter(3090, "Reporting_Period_Operating");
            Process.ProcessParameters.RegisterParameter(3121, "RGGI_Begin_Date");
            Process.ProcessParameters.RegisterParameter(3148, "RGGI_Start_Quarter");
            Process.ProcessParameters.RegisterParameter(2699, "Rpt_Period_CO2_Mass_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(2705, "Rpt_Period_HI_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(2701, "Rpt_Period_NOx_Mass_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(2702, "Rpt_Period_NOx_Rate_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(3205, "Rpt_Period_NOx_Rate_Hours");
            Process.ProcessParameters.RegisterParameter(3206, "Rpt_Period_NOx_Rate_Sum");
            Process.ProcessParameters.RegisterParameter(2891, "Rpt_Period_Op_Days_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(2704, "Rpt_Period_Op_Hours_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(2703, "Rpt_Period_Op_Time_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(2700, "Rpt_Period_SO2_Mass_Calculated_Value");
            Process.ProcessParameters.RegisterParameter(1811, "So2_App_D_Accumulator");
            Process.ProcessParameters.RegisterParameter(1646, "SO2_App_D_Method_Active_For_Hour");
            Process.ProcessParameters.RegisterParameter(2470, "SO2_Bypass_Code");
            Process.ProcessParameters.RegisterParameter(2579, "SO2_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(2546, "SO2C_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(866, "SO2_CEM_Method_Active_For_Hour");
            Process.ProcessParameters.RegisterParameter(3608, "SO2C_Is_Only_for_MATS");
            Process.ProcessParameters.RegisterParameter(867, "SO2_Derived_Hourly_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(1044, "SO2_Derived_Hourly_Count");
            Process.ProcessParameters.RegisterParameter(880, "SO2_Derived_Hourly_Status");
            Process.ProcessParameters.RegisterParameter(942, "SO2_Derived_Hourly_Value_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(872, "SO2_Equation_Code");
            Process.ProcessParameters.RegisterParameter(2433, "SO2_F23_Method_Active_For_Hour");
            Process.ProcessParameters.RegisterParameter(2471, "So2_Fuel_Specific_Missing_Data");
            Process.ProcessParameters.RegisterParameter(4625, "SO2_HPFF_Exists");
            Process.ProcessParameters.RegisterParameter(2587, "SO2M_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(2872, "SO2M_Derived_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(2616, "SO2M_Derived_Hourly_Status");
            Process.ProcessParameters.RegisterParameter(2469, "SO2_Method_Code");
            Process.ProcessParameters.RegisterParameter(881, "SO2_Monitor_Hourly_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(1045, "So2_Monitor_Hourly_Count");
            Process.ProcessParameters.RegisterParameter(959, "SO2_Monitor_Hourly_Value_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(2487, "SO2R_Derived_Checks_Needed");
            Process.ProcessParameters.RegisterParameter(2486, "SO2R_Derived_Hourly_Count");
            Process.ProcessParameters.RegisterParameter(2615, "SO2R_Derived_Hourly_Status");
            Process.ProcessParameters.RegisterParameter(2485, "SO2R_Derived_Hourly_Value_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(3143, "SO2_Start_Quarter");
            Process.ProcessParameters.RegisterParameter(531, "Span_Records");
            Process.ProcessParameters.RegisterParameter(2449, "Special_Fuel_Burned");
            Process.ProcessParameters.RegisterParameter(2452, "Special_Fuel_Determined");
            Process.ProcessParameters.RegisterParameter(2006, "Stack_Flow_Calculated_Adjusted_Value");
            Process.ProcessParameters.RegisterParameter(4713, "Stack_HeatInputTimesOpTime_Accumulator");
            Process.ProcessParameters.RegisterParameter(2077, "Stack_Loadtimesoptime_Accumulator");
            Process.ProcessParameters.RegisterParameter(2076, "Stack_Optime_Accumulator");
            Process.ProcessParameters.RegisterParameter(3147, "Start_Quarter");
            Process.ProcessParameters.RegisterParameter(2919, "Subsequent_Linearity_Record");
            Process.ProcessParameters.RegisterParameter(2996, "Subsequent_RATA_Record");
            Process.ProcessParameters.RegisterParameter(2209, "Summary_Value_Records_By_Reporting_Period_Location");
            Process.ProcessParameters.RegisterParameter(459, "System_Component_Records");
            Process.ProcessParameters.RegisterParameter(2657, "System_Fuel_Flow_Records_For_Hour");
            Process.ProcessParameters.RegisterParameter(4678, "System_Operating_Supp_Data_Dictionary_Array");
            Process.ProcessParameters.RegisterParameter(4712, "System_Operating_Supp_Data_Records_by_Location");
            Process.ProcessParameters.RegisterParameter(3220, "System_Parameter_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(2675, "Table_D-6_Missing_Data_Values");
            Process.ProcessParameters.RegisterParameter(3521, "Test_Date_Time_Valid");
            Process.ProcessParameters.RegisterParameter(3519, "Test_Date_Valid");
            Process.ProcessParameters.RegisterParameter(1878, "Test_Extension_Exemption_Records");
            Process.ProcessParameters.RegisterParameter(3110, "Test_Extension_Exemptions_for_EM_Evaluation");
            Process.ProcessParameters.RegisterParameter(3520, "Test_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(3550, "Test_Result_Code_List");
            Process.ProcessParameters.RegisterParameter(1927, "Test_Result_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(3554, "Test_Result_Valid");
            Process.ProcessParameters.RegisterParameter(1476, "Test_Tolerances_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(3177, "Total_Heat_Input_From_Fuel_Flow");
            Process.ProcessParameters.RegisterParameter(3241, "UDEF_Expiration_Date");
            Process.ProcessParameters.RegisterParameter(3240, "UDEF_Status");
            Process.ProcessParameters.RegisterParameter(3250, "Unit_Default_Test_Records_By_Location_For_QA_Status");
            Process.ProcessParameters.RegisterParameter(2337, "Unit_HeatInputTimesOpTime_Accumulator");
            Process.ProcessParameters.RegisterParameter(1197, "Unit_Hourly_Operational_Status");
            Process.ProcessParameters.RegisterParameter(2134, "Unit_Is_Load_Based");
            Process.ProcessParameters.RegisterParameter(2070, "Unit_Loadtimesoptime_Accumulator");
            Process.ProcessParameters.RegisterParameter(2069, "Unit_Optime_Accumulator");
            Process.ProcessParameters.RegisterParameter(384, "Unit_Stack_Configuration_Records");
            Process.ProcessParameters.RegisterParameter(2231, "Unit_Stack_Configuration_Records_By_Hour_Location");
            Process.ProcessParameters.RegisterParameter(2326, "Unit_Stack_Configuration_Records_By_Hour_Monitor_Plan");
            Process.ProcessParameters.RegisterParameter(3223, "Upscale_Gas_Type_Valid");
            Process.ProcessParameters.RegisterParameter(2756, "Upscale_Reference_Percent_of_Span");
            Process.ProcessParameters.RegisterParameter(2359, "Use_Co2_Diluent_Cap_For_Co2_Mass_Calc");
            Process.ProcessParameters.RegisterParameter(2466, "Use_O2_Diluent_Cap_for_Co2_Conc_Calc");
            Process.ProcessParameters.RegisterParameter(2438, "Valid_Fc_Factor_Exists");
            Process.ProcessParameters.RegisterParameter(2444, "Valid_Fd_Factor_Exists");
            Process.ProcessParameters.RegisterParameter(2445, "Valid_Fw_Factor_Exists");
            Process.ProcessParameters.RegisterParameter(3528, "Weekly_System_Integrity_APS_Is_Valid");
            Process.ProcessParameters.RegisterParameter(3553, "Weekly_System_Integrity_Error_Is_Valid");
            Process.ProcessParameters.RegisterParameter(3518, "Weekly_Test_Summary_Valid");
            Process.ProcessParameters.RegisterParameter(3549, "WSI_Intervening_Event_Record");
            Process.ProcessParameters.RegisterParameter(3570, "WSI_Intervening_Like_Kind_Event_Record");
            Process.ProcessParameters.RegisterParameter(3572, "WSI_Plugin_Event_Record");
            Process.ProcessParameters.RegisterParameter(3547, "WSI_Prior_Test_Record");
            Process.ProcessParameters.RegisterParameter(3546, "WSI_Status");
            Process.ProcessParameters.RegisterParameter(3551, "WSI_Status_Required");
            Process.ProcessParameters.RegisterParameter(3548, "WSI_Test_Dictionary");
            Process.ProcessParameters.RegisterParameter(2757, "Zero_Reference_Percent_of_Span");
        }
    }
}
