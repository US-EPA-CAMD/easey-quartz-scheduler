//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ECMPS.Checks.Qa.Parameters
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using ECMPS.Checks.CheckEngine;
    using ECMPS.Checks.CheckEngine.SpecialParameterClasses;
    using ECMPS.Checks.TypeUtilities;
    
    
    /// Parameter class for the Qa process
    public sealed class QaParameters
    {
        
        // Storage field for property 'Process'
        private static cProcess _process;
        
        // Storage field for property 'Category'
        private static cCategory _category;
        
        /// The process object for the current evaluation process.  Set by the actual process during initialization.
        public static cProcess Process
        {
            get
            {
                return _process;
            }
        }
        
        /// The current category object set at the beginning of the category's processing of checks and nulled at the end of the processing.
        public static cCategory Category
        {
            get
            {
                return _category;
            }
            set
            {
                _category = value;
            }
        }
        
        /// <summary>
        /// A lookup table of Accuracy Specification Codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.AccuracySpecCodeRow> AccuracySpecificationCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Accuracy_Specification_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.AccuracySpecCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Accuracy_Specification_Code_Lookup_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Accuracy_Specification_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The recalculated result of a fuel flowmeter accuracy test.
        /// </summary>
        public static string AccuracyTestCalcResult
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Accuracy_Test_Calc_Result")));
            }
            set
            {
                QaParameters.SetCheckParameter("Accuracy_Test_Calc_Result", value);
            }
        }
        
        /// <summary>
        /// Indicates if the component tested in the fuel flowmeter accuracy test has a valid component type.
        /// </summary>
        public static bool? AccuracyTestComponentTypeValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Accuracy_Test_Component_Type_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Accuracy_Test_Component_Type_Valid", value);
            }
        }
        
        /// <summary>
        /// A lookup table of Accuracy Test Method Codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.AccuracyTestMethodCodeRow> AccuracyTestMethodCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Accuracy_Test_Method_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.AccuracyTestMethodCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Accuracy_Test_Method_Code_Lookup_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Accuracy_Test_Method_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the accuracy test method code in the fuel flowmeter accuracy test is valid.
        /// </summary>
        public static bool? AccuracyTestMethodValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Accuracy_Test_Method_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Accuracy_Test_Method_Valid", value);
            }
        }
        
        /// <summary>
        /// All fuel flowmeter accuracy test summary records for the component.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryFfaccRow> AccuracyTestRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Accuracy_Test_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryFfaccRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Accuracy_Test_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Accuracy_Test_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The air emission testing records associated with the test being evaluated.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwQaAiremissiontestingdataRow> AirEmissionTestingRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Air_Emission_Testing_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwQaAiremissiontestingdataRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Air_Emission_Testing_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Air_Emission_Testing_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// A collection of records for all Analyzer Range records for the component with the associated component information.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwAnalyzerRangeRow> AnalyzerRangeRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Analyzer_Range_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwAnalyzerRangeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Analyzer_Range_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Analyzer_Range_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The calculated average hourly heat input rate for the operating level of an Appendix E Test.
        /// </summary>
        public static decimal? AppeCalcAvgHiRate
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Calc_Avg_HI_Rate")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Calc_Avg_HI_Rate", value);
            }
        }
        
        /// <summary>
        /// The recalculated heat input for gas in an Appendix E test.
        /// </summary>
        public static decimal? AppeCalcGasHeatInput
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Calc_Gas_Heat_Input")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Calc_Gas_Heat_Input", value);
            }
        }
        
        /// <summary>
        /// The average hourly heat input rate for the operating level of an Appendix E Test  recalculated from the heat input in the gas and oil records.
        /// </summary>
        public static decimal? AppeCalcLevelAverageHiRate
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Calc_Level_Average_HI_Rate")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Calc_Level_Average_HI_Rate", value);
            }
        }
        
        /// <summary>
        /// The mean reference value for the operating level of an Appendix E Test  recalculated from the reference values in the run records.
        /// </summary>
        public static decimal? AppeCalcLevelMeanReferenceValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Calc_Level_Mean_Reference_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Calc_Level_Mean_Reference_Value", value);
            }
        }
        
        /// <summary>
        /// The calculated mean reference value for the operating level of an Appendix E Test.
        /// </summary>
        public static decimal? AppeCalcMeanRv
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Calc_Mean_RV")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Calc_Mean_RV", value);
            }
        }
        
        /// <summary>
        /// The recalculated heat input for oil in an Appendix E test.
        /// </summary>
        public static decimal? AppeCalcOilHeatInput
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Calc_Oil_Heat_Input")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Calc_Oil_Heat_Input", value);
            }
        }
        
        /// <summary>
        /// The recalculated oil mass from volume and density in an Appendix E test.
        /// </summary>
        public static decimal? AppeCalcOilMass
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Calc_Oil_Mass")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Calc_Oil_Mass", value);
            }
        }
        
        /// <summary>
        /// The heat input rate for the Appendix E Test run recalculated from the heat input in the gas and oil records.
        /// </summary>
        public static decimal? AppeCalcRunHiRate
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Calc_Run_HI_Rate")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Calc_Run_HI_Rate", value);
            }
        }
        
        /// <summary>
        /// The total heat input for the Appendix E Test run recalculated from the heat input in the gas and oil records.
        /// </summary>
        public static decimal? AppeCalcRunTotalHi
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Calc_Run_Total_HI")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Calc_Run_Total_HI", value);
            }
        }
        
        /// <summary>
        /// Indicates if systems reported in the gas and oil flow records are consistent in all the runs of an Appendix E test.
        /// </summary>
        public static bool? AppeGasAndOilSystemsConsistent
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("APPE_Gas_and_Oil_Systems_Consistent")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Gas_and_Oil_Systems_Consistent", value);
            }
        }
        
        /// <summary>
        /// The calculated heat input for gas in an Appendix E gas record.
        /// </summary>
        public static decimal? AppeGasCalcHi
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Gas_Calc_HI")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Gas_Calc_HI", value);
            }
        }
        
        /// <summary>
        /// The maximum allowable value for gas GCV.
        /// </summary>
        public static decimal? AppeGasGcvMaximumValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Gas_GCV_Maximum_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Gas_GCV_Maximum_Value", value);
            }
        }
        
        /// <summary>
        /// The minimum allowable value for gas GCV.
        /// </summary>
        public static decimal? AppeGasGcvMinimumValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Gas_GCV_Minimum_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Gas_GCV_Minimum_Value", value);
            }
        }
        
        /// <summary>
        /// All Heat Input from Gas records for the Appendix E test.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaAeHiGasRow> AppeGasRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("APPE_Gas_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaAeHiGasRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("APPE_Gas_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("APPE_Gas_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if heat input rate in the runs of an Appendix E test are consistent with the operating level.
        /// </summary>
        public static bool? AppeHeatInputConsistentWithOperatingLevel
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("APPE_Heat_Input_Consistent_with_Operating_Level")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Heat_Input_Consistent_with_Operating_Level", value);
            }
        }
        
        /// <summary>
        /// An array of heat input rate for the Appendix E test segments.
        /// </summary>
        public static decimal? AppeHeatInputRateArray
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Heat_Input_Rate_Array")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Heat_Input_Rate_Array", value);
            }
        }
        
        /// <summary>
        /// The RunNumber of the previous run of the Appendix E test when sort in OperatingLevelForRun, RunNumber order.
        /// </summary>
        public static int? AppeLastRunNumber
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("APPE_Last_Run_Number")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Last_Run_Number", value);
            }
        }
        
        /// <summary>
        /// A counter fo the current operating level of an Appendix E Test being evaluated.
        /// </summary>
        public static int? AppeLevelCount
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("APPE_Level_Count")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Level_Count", value);
            }
        }
        
        /// <summary>
        /// Indicates if the number of operating levels in the Appendix E test was validated.
        /// </summary>
        public static bool? AppeLevelCountValidated
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("APPE_Level_Count_Validated")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Level_Count_Validated", value);
            }
        }
        
        /// <summary>
        /// The maximum heat input rate in the runs of an operating level of an Appendix E Test.
        /// </summary>
        public static decimal? AppeLevelMaximumHiRate
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Level_Maximum_HI_Rate")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Level_Maximum_HI_Rate", value);
            }
        }
        
        /// <summary>
        /// A counter fo the number of runs in the operating level of the Appendix E Test being evaluated.
        /// </summary>
        public static int? AppeLevelRunCount
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("APPE_Level_Run_Count")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Level_Run_Count", value);
            }
        }
        
        /// <summary>
        /// The sum of the heat input rates in the runs of an operating level of an Appendix E Test.
        /// </summary>
        public static decimal? AppeLevelSumHiRate
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Level_Sum_HI_Rate")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Level_Sum_HI_Rate", value);
            }
        }
        
        /// <summary>
        /// The sum of the reference values in the runs of an operating level of an Appendix E Test.
        /// </summary>
        public static decimal? AppeLevelSumReferenceValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Level_Sum_Reference_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Level_Sum_Reference_Value", value);
            }
        }
        
        /// <summary>
        /// An maximum NOx rate of the Appendix E test segments.
        /// </summary>
        public static decimal? AppeMaximumNoxRate
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Maximum_NOx_Rate")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Maximum_NOx_Rate", value);
            }
        }
        
        /// <summary>
        /// An array of NOx rates for the Appendix E test segments.
        /// </summary>
        public static decimal? AppeNoxRateArray
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_NOx_Rate_Array")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_NOx_Rate_Array", value);
            }
        }
        
        /// <summary>
        /// The calculated heat input for oil in an Appendix Eoil record.
        /// </summary>
        public static decimal? AppeOilCalcHi
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Oil_Calc_HI")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Oil_Calc_HI", value);
            }
        }
        
        /// <summary>
        /// The calculated mass oil in an Appendix Eoil record.
        /// </summary>
        public static decimal? AppeOilCalcMassOil
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Oil_Calc_Mass_Oil")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Oil_Calc_Mass_Oil", value);
            }
        }
        
        /// <summary>
        /// The maximum allowable value for oil density based on the units of measure.
        /// </summary>
        public static decimal? AppeOilDensityMaximumValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Oil_Density_Maximum_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Oil_Density_Maximum_Value", value);
            }
        }
        
        /// <summary>
        /// The minimum allowable value for oil density based on the units of measure.
        /// </summary>
        public static decimal? AppeOilDensityMinimumValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Oil_Density_Minimum_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Oil_Density_Minimum_Value", value);
            }
        }
        
        /// <summary>
        /// The oil density units of measure code appropriate for the volume units of measure.
        /// </summary>
        public static string AppeOilDensityUom
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("APPE_Oil_Density_UOM")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Oil_Density_UOM", value);
            }
        }
        
        /// <summary>
        /// Indicates if the oil density units of measure code is appropriate for the volume units of measure.
        /// </summary>
        public static bool? AppeOilDensityUomValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("APPE_Oil_Density_UOM_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Oil_Density_UOM_Valid", value);
            }
        }
        
        /// <summary>
        /// The maximum allowable value for oil GCV based on the units of measure.
        /// </summary>
        public static decimal? AppeOilGcvMaximumValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Oil_GCV_Maximum_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Oil_GCV_Maximum_Value", value);
            }
        }
        
        /// <summary>
        /// The minimum allowable value for oil GCV based on the units of measure.
        /// </summary>
        public static decimal? AppeOilGcvMinimumValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Oil_GCV_Minimum_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Oil_GCV_Minimum_Value", value);
            }
        }
        
        /// <summary>
        /// The oil GCV units of measure code appropriate for the volume units of measure.
        /// </summary>
        public static string AppeOilGcvUom
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("APPE_Oil_GCV_UOM")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Oil_GCV_UOM", value);
            }
        }
        
        /// <summary>
        /// Indicates if the Oil GCV UOM Code is valid.
        /// </summary>
        public static bool? AppeOilGcvUomValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("APPE_Oil_GCV_UOM_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Oil_GCV_UOM_Valid", value);
            }
        }
        
        /// <summary>
        /// All Heat Input from Oil records for the Appendix E test.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaAeHiOilRow> AppeOilRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("APPE_Oil_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaAeHiOilRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("APPE_Oil_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("APPE_Oil_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The SystemTypeCode of the oil system in the Heat Input from Oil records for an Appendix E test.
        /// </summary>
        public static string AppeOilSystemType
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("APPE_Oil_System_Type")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Oil_System_Type", value);
            }
        }
        
        /// <summary>
        /// The calculated heat input for an Appendix E run.
        /// </summary>
        public static decimal? AppeRunCalcHi
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Run_Calc_HI")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Run_Calc_HI", value);
            }
        }
        
        /// <summary>
        /// The calculated heat input rate for an Appendix E run.
        /// </summary>
        public static decimal? AppeRunCalcHiRate
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Run_Calc_HI_Rate")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Run_Calc_HI_Rate", value);
            }
        }
        
        /// <summary>
        /// The length of the Appendix E Test run in minutes.
        /// </summary>
        public static decimal? AppeRunLength
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("APPE_Run_Length")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Run_Length", value);
            }
        }
        
        /// <summary>
        /// All Run records for the Appendix E test.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaAeCorrelationTestRunRow> AppeRunRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("APPE_Run_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaAeCorrelationTestRunRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("APPE_Run_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("APPE_Run_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// A string of run numbers in the APPE test.
        /// </summary>
        public static string AppeRunSequence
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("APPE_Run_Sequence")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Run_Sequence", value);
            }
        }
        
        /// <summary>
        /// Indicates if the sequence of run numbers in the Appendix E test is consecutive.
        /// </summary>
        public static bool? AppeRunSequenceConsecutive
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("APPE_Run_Sequence_Consecutive")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Run_Sequence_Consecutive", value);
            }
        }
        
        /// <summary>
        /// Indicates if the sequence of run numbers in the APPE test is valid.
        /// </summary>
        public static bool? AppeRunSequenceValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("APPE_Run_Sequence_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Run_Sequence_Valid", value);
            }
        }
        
        /// <summary>
        /// The number of Heat Input from Oil and Gas records in the runs of an Appendix E test.
        /// </summary>
        public static int? AppeRunSystemCount
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("APPE_Run_System_Count")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Run_System_Count", value);
            }
        }
        
        /// <summary>
        /// Indicates if the run times in the APPE test are valid.
        /// </summary>
        public static bool? AppeRunTimesValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("APPE_Run_Times_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Run_Times_Valid", value);
            }
        }
        
        /// <summary>
        /// All Summary records for the Appendix E test.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaAeCorrelationTestSumRow> AppeSummaryRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("APPE_Summary_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaAeCorrelationTestSumRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("APPE_Summary_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("APPE_Summary_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The FuelCode of the NOXE system in the Appendix E test.
        /// </summary>
        public static string AppeSystemFuelCode
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("APPE_System_Fuel_Code")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_System_Fuel_Code", value);
            }
        }
        
        /// <summary>
        /// The list of fuelflow Monitoring System IDs in the Heat Input from Gas and Oil records for an Appendix E test.
        /// </summary>
        public static string AppeSystemList
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("APPE_System_List")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_System_List", value);
            }
        }
        
        /// <summary>
        /// The list of fuelflow Monitoring System IDs in the Heat Input from Oil records with inconsistent Volume Units of Measure.
        /// </summary>
        public static string AppeSystemsWithInconsistentUom
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("APPE_Systems_with_Inconsistent_UOM")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Systems_with_Inconsistent_UOM", value);
            }
        }
        
        /// <summary>
        /// Indicates if system type is valid for the Appendix E test.
        /// </summary>
        public static bool? AppeSystemValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("APPE_System_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_System_Valid", value);
            }
        }
        
        /// <summary>
        /// The begin date of the first run of the Appendix E test.
        /// </summary>
        public static DateTime? AppeTestBeginDate
        {
            get
            {
                return ((DateTime?)(QaParameters.GetCheckParameter("APPE_Test_Begin_Date")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Test_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// The begin hour of the first run of the Appendix E test.
        /// </summary>
        public static int? AppeTestBeginHour
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("APPE_Test_Begin_Hour")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Test_Begin_Hour", value);
            }
        }
        
        /// <summary>
        /// The begin minute of the first run of the Appendix E test.
        /// </summary>
        public static int? AppeTestBeginMinute
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("APPE_Test_Begin_Minute")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Test_Begin_Minute", value);
            }
        }
        
        /// <summary>
        /// The end date of the last run of the Appendix E test.
        /// </summary>
        public static DateTime? AppeTestEndDate
        {
            get
            {
                return ((DateTime?)(QaParameters.GetCheckParameter("APPE_Test_End_Date")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Test_End_Date", value);
            }
        }
        
        /// <summary>
        /// The end hour of the last run of the Appendix E test.
        /// </summary>
        public static int? AppeTestEndHour
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("APPE_Test_End_Hour")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Test_End_Hour", value);
            }
        }
        
        /// <summary>
        /// The end minute of the last run of the Appendix E test.
        /// </summary>
        public static int? AppeTestEndMinute
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("APPE_Test_End_Minute")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Test_End_Minute", value);
            }
        }
        
        /// <summary>
        /// All Appendix E test records for the system.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryAppeRow> AppeTestRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("APPE_Test_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryAppeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("APPE_Test_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("APPE_Test_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the recalculated total heat input for the run was used instead of the reported value to recalculate heat input rate.
        /// </summary>
        public static bool? AppeUseCalculatedRunHi
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("APPE_Use_Calculated_Run_HI")));
            }
            set
            {
                QaParameters.SetCheckParameter("APPE_Use_Calculated_Run_HI", value);
            }
        }
        
        /// <summary>
        /// A list of APS Codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Lookup.Table.ApsCodeRow> ApsCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("APS_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Lookup.Table.ApsCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("APS_Code_Lookup_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("APS_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Collection of Data Elements for the Monitoring System in the test being evaluated
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemRow> AssociatedSystem
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Associated_System")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Associated_System", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Associated_System", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the Appendix E test produced valid data to define segments.
        /// </summary>
        public static bool? CalculateAppeSegments
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Calculate_APPE_Segments")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calculate_APPE_Segments", value);
            }
        }
        
        /// <summary>
        /// Indicates whether Average Gross Unit Load should be calculated.
        /// </summary>
        public static bool? CalculateAverageGrossUnitLoad
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Calculate_Average_Gross_Unit_Load")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calculate_Average_Gross_Unit_Load", value);
            }
        }
        
        /// <summary>
        /// Indicates that the results of the linearity level may be calculated.
        /// </summary>
        public static bool? CalculateLinearityLevel
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Calculate_Linearity_Level")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calculate_Linearity_Level", value);
            }
        }
        
        /// <summary>
        /// Indicates that the results of the linearity test may be calculated.
        /// </summary>
        public static bool? CalculateLinearityTest
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Calculate_Linearity_Test")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calculate_Linearity_Test", value);
            }
        }
        
        /// <summary>
        /// Indicates if calculations should be performed for the operating level of a RATA.
        /// </summary>
        public static bool? CalculateRataLevel
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Calculate_RATA_Level")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calculate_RATA_Level", value);
            }
        }
        
        /// <summary>
        /// Indicates if the run velocity of a flow RATA run can be recalculated.
        /// </summary>
        public static bool? CalculateRunVelocity
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Calculate_Run_Velocity")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calculate_Run_Velocity", value);
            }
        }
        
        /// <summary>
        /// Indicates if the default emission rate for the unit can be calculated.
        /// </summary>
        public static bool? CalculateUnitDefaultNoxRate
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Calculate_Unit_Default_NOx_Rate")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calculate_Unit_Default_NOx_Rate", value);
            }
        }
        
        /// <summary>
        /// Indicates that the results of the upscale injection of a 7day calibration test can be recalculated.
        /// </summary>
        public static bool? CalculateUpscaleCalibrationInjection
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Calculate_Upscale_Calibration_Injection")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calculate_Upscale_Calibration_Injection", value);
            }
        }
        
        /// <summary>
        /// Indicates that the results of the zero-level injection of a 7day calibration test can be recalculated.
        /// </summary>
        public static bool? CalculateZeroCalibrationInjection
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Calculate_Zero_Calibration_Injection")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calculate_Zero_Calibration_Injection", value);
            }
        }
        
        /// <summary>
        /// The number of calibration injection records in the 7day calibration test.
        /// </summary>
        public static int? CalibrationInjectionCount
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Calibration_Injection_Count")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Injection_Count", value);
            }
        }
        
        /// <summary>
        /// Indicates if the injections of a 7day calibration test were performed on different days.
        /// </summary>
        public static bool? CalibrationInjectionTimesAppropriate
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Calibration_Injection_Times_Appropriate")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Injection_Times_Appropriate", value);
            }
        }
        
        /// <summary>
        /// Indicates if all the injection dates, times, and hours of a 7day calibration test are valid.
        /// </summary>
        public static bool? CalibrationInjectionTimesValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Calibration_Injection_Times_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Injection_Times_Valid", value);
            }
        }
        
        /// <summary>
        /// The maximum reference value in the upscale injections of the 7day calibration test.
        /// </summary>
        public static decimal? CalibrationMaximumUpscaleReferenceValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Calibration_Maximum_Upscale_Reference_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Maximum_Upscale_Reference_Value", value);
            }
        }
        
        /// <summary>
        /// The maximum reference value in the zero-level injections of the 7day calibration test.
        /// </summary>
        public static decimal? CalibrationMaximumZeroReferenceValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Calibration_Maximum_Zero_Reference_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Maximum_Zero_Reference_Value", value);
            }
        }
        
        /// <summary>
        /// The minimum reference value in the upscale injections of the 7day calibration test.
        /// </summary>
        public static decimal? CalibrationMinimumUpscaleReferenceValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Calibration_Minimum_Upscale_Reference_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Minimum_Upscale_Reference_Value", value);
            }
        }
        
        /// <summary>
        /// The minimum reference value in the zero-level injections of the 7day calibration test.
        /// </summary>
        public static decimal? CalibrationMinimumZeroReferenceValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Calibration_Minimum_Zero_Reference_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Minimum_Zero_Reference_Value", value);
            }
        }
        
        /// <summary>
        /// Indicates if the 7day calibration test was aborted.
        /// </summary>
        public static bool? CalibrationTestAborted
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Calibration_Test_Aborted")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Test_Aborted", value);
            }
        }
        
        /// <summary>
        /// The begin date of the first injection in the 7day calibration test.
        /// </summary>
        public static DateTime? CalibrationTestBeginDate
        {
            get
            {
                return ((DateTime?)(QaParameters.GetCheckParameter("Calibration_Test_Begin_Date")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Test_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// The begin hour of the first injection in the 7day calibration test.
        /// </summary>
        public static int? CalibrationTestBeginHour
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Calibration_Test_Begin_Hour")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Test_Begin_Hour", value);
            }
        }
        
        /// <summary>
        /// The begin minute of the first injection in the 7day calibration test.
        /// </summary>
        public static int? CalibrationTestBeginMinute
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Calibration_Test_Begin_Minute")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Test_Begin_Minute", value);
            }
        }
        
        /// <summary>
        /// Indicates if the component tested in the 7day calibration test has a valid component type.
        /// </summary>
        public static bool? CalibrationTestComponentTypeValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Calibration_Test_Component_Type_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Test_Component_Type_Valid", value);
            }
        }
        
        /// <summary>
        /// The end date of the last injection in the 7day calibration test.
        /// </summary>
        public static DateTime? CalibrationTestEndDate
        {
            get
            {
                return ((DateTime?)(QaParameters.GetCheckParameter("Calibration_Test_End_Date")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Test_End_Date", value);
            }
        }
        
        /// <summary>
        /// The end hour of the last injection in the 7day calibration test.
        /// </summary>
        public static int? CalibrationTestEndHour
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Calibration_Test_End_Hour")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Test_End_Hour", value);
            }
        }
        
        /// <summary>
        /// The end minute of the last injection in the 7day calibration test.
        /// </summary>
        public static int? CalibrationTestEndMinute
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Calibration_Test_End_Minute")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Test_End_Minute", value);
            }
        }
        
        /// <summary>
        /// All 7day calibration tests for the component.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummary7DayRow> CalibrationTestRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Calibration_Test_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummary7DayRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Calibration_Test_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Calibration_Test_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The recalculated result of a 7day calibration test.
        /// </summary>
        public static string CalibrationTestResult
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Calibration_Test_Result")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Test_Result", value);
            }
        }
        
        /// <summary>
        /// The ID of the QA Supp Data record associated with the current 7day calibration test.
        /// </summary>
        public static string CalibrationTestSuppDataId
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Calibration_Test_Supp_Data_ID")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Test_Supp_Data_ID", value);
            }
        }
        
        /// <summary>
        /// Indicates if overall test status of 7day calibration test can be determined.  Used for insuring correct levels.
        /// </summary>
        public static bool? CalibrationTestValidityPerformed
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Calibration_Test_Validity_Performed")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Test_Validity_Performed", value);
            }
        }
        
        /// <summary>
        /// The upscale gas level code for the 7day calibration test.
        /// </summary>
        public static string CalibrationUpscaleGasLevelCode
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Calibration_Upscale_Gas_Level_Code")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Upscale_Gas_Level_Code", value);
            }
        }
        
        /// <summary>
        /// The recalculated APS indicator for the upscale injection.
        /// </summary>
        public static int? CalibrationUpscaleInjectionCalcApsIndicator
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Calibration_Upscale_Injection_Calc_APS_Indicator")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Upscale_Injection_Calc_APS_Indicator", value);
            }
        }
        
        /// <summary>
        /// The recalculated calibration error or difference for the upscale injection.
        /// </summary>
        public static decimal? CalibrationUpscaleInjectionCalcResult
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Calibration_Upscale_Injection_Calc_Result")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Upscale_Injection_Calc_Result", value);
            }
        }
        
        /// <summary>
        /// The percent of span value of the reference value of a upscale injection of a 7day calibration test.
        /// </summary>
        public static decimal? CalibrationUpscaleReferenceValuePercentOfSpan
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Calibration_Upscale_Reference_Value_Percent_of_Span")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Upscale_Reference_Value_Percent_of_Span", value);
            }
        }
        
        /// <summary>
        /// The recalculated APS indicator for the zero-level injection.
        /// </summary>
        public static int? CalibrationZeroInjectionCalcApsIndicator
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Calibration_Zero_Injection_Calc_APS_Indicator")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Zero_Injection_Calc_APS_Indicator", value);
            }
        }
        
        /// <summary>
        /// The recalculated calibration error or difference for the zero-level injection.
        /// </summary>
        public static decimal? CalibrationZeroInjectionCalcResult
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Calibration_Zero_Injection_Calc_Result")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Zero_Injection_Calc_Result", value);
            }
        }
        
        /// <summary>
        /// The percent of span value of the reference value of a zero level injection of a 7day calibration test.
        /// </summary>
        public static decimal? CalibrationZeroReferenceValuePercentOfSpan
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Calibration_Zero_Reference_Value_Percent_of_Span")));
            }
            set
            {
                QaParameters.SetCheckParameter("Calibration_Zero_Reference_Value_Percent_of_Span", value);
            }
        }
        
        /// <summary>
        /// Indicates if the reported completion test date and hour of a QA Cert event is valid.
        /// </summary>
        public static bool? CompletionTestDateAndHourValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Completion_Test_Date_And_Hour_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Completion_Test_Date_And_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// All linearity injection records (with associated linearity test information) for all linearity tests associated with the component.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckQa.Function.LinearityInjectionByComponent> ComponentLinearityInjectionRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Component_Linearity_Injection_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckQa.Function.LinearityInjectionByComponent>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Component_Linearity_Injection_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Component_Linearity_Injection_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Component Records at location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwComponentRow> ComponentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Component_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwComponentRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Component_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Component_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the reported conditional begin date and hour of a QA Cert event is valid.
        /// </summary>
        public static bool? ConditionalBeginDateAndHourValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Conditional_Begin_Date_and_Hour_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Conditional_Begin_Date_and_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// This parameter contains the Protocol Gas Parameter to Type cross check table.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ProtocolGasParameterToTypeRow> CrosscheckProtocolgasparametertotype
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("CrossCheck_ProtocolGasParameterToType")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ProtocolGasParameterToTypeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("CrossCheck_ProtocolGasParameterToType", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("CrossCheck_ProtocolGasParameterToType", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Test Summary record for the 7day calibration test summary record being evaluated and associated location and component data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow Current7DayCalibrationTest
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_7Day_Calibration_Test")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_7Day_Calibration_Test", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_7Day_Calibration_Test", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Test Summary and Fuel Flow Accuracy records for the fuel flowmeter accuracy test being evaluated and associated location and component data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryFfaccRow CurrentAccuracyTest
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Accuracy_Test")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryFfaccRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Accuracy_Test", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Accuracy_Test", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Heat Input for Gas record for the Appendix E test being evaluated and associated data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaAeHiGasRow CurrentAppendixEHiForGas
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Appendix_E_HI_for_Gas")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaAeHiGasRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Appendix_E_HI_for_Gas", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Appendix_E_HI_for_Gas", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Heat Input for Oil record for the Appendix E test being evaluated and associated data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaAeHiOilRow CurrentAppendixEHiForOil
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Appendix_E_HI_for_Oil")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaAeHiOilRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Appendix_E_HI_for_Oil", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Appendix_E_HI_for_Oil", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The APPE Correlation Test Run record being evaluated and associated test data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaAeCorrelationTestRunRow CurrentAppendixERun
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Appendix_E_Run")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaAeCorrelationTestRunRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Appendix_E_Run", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Appendix_E_Run", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The APPE Correlation Test Summary being evaluated and associated test data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaAeCorrelationTestSumRow CurrentAppendixESummary
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Appendix_E_Summary")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaAeCorrelationTestSumRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Appendix_E_Summary", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Appendix_E_Summary", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Test Summary record for the Appendix E test being evaluated and associated location and system data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryAppeRow CurrentAppendixETest
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Appendix_E_Test")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryAppeRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Appendix_E_Test", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Appendix_E_Test", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Calibration Injection record (with associated 7-day calibration test summary information) being evaluated.  These are sorted in zero injection date order.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCalibrationInjectionRow CurrentCalibrationInjection
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Calibration_Injection")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCalibrationInjectionRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Calibration_Injection", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Calibration_Injection", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// List of information for the Current record in Component.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwComponentRow CurrentComponent
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Component")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwComponentRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Component", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Component", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Cycle Time Injection record for the cycle time test being evaluated and associated data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCycleTimeInjectionRow CurrentCycleTimeInjection
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Cycle_Time_Injection")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCycleTimeInjectionRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Cycle_Time_Injection", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Cycle_Time_Injection", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Test Summary and Cycle Time Summary records for the cycle time test being evaluated and associated location and component data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow CurrentCycleTimeTest
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Cycle_Time_Test")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Cycle_Time_Test", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Cycle_Time_Test", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current Flow RATA Run record being evaluated and it associated Test Summary, RATA, RATA Summary, and RATA Run data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaFlowRataRunRow CurrentFlowRataRun
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Flow_RATA_Run")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaFlowRataRunRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Flow_RATA_Run", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Flow_RATA_Run", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Test Summary and Flow to Load Check records for the Flow to Load Reference data being evaluated and associated location and system.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow CurrentFlowToLoadCheck
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Flow_to_Load_Check")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Flow_to_Load_Check", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Flow_to_Load_Check", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Test Summary and Flow to Load Reference Data records for the Flow to Load Reference data being evaluated and associated location and system.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow CurrentFlowToLoadReference
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Flow_to_Load_Reference")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Flow_to_Load_Reference", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Flow_to_Load_Reference", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Collection of Data Elements for the Fuel Flow to Load Baseline Record being evaluated
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryFf2lbasRow CurrentFuelFlowToLoadBaseline
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Fuel_Flow_To_Load_Baseline")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryFf2lbasRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Fuel_Flow_To_Load_Baseline", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Fuel_Flow_To_Load_Baseline", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Collection of Data Elements for the Fuel Flow to Load Test being evaluated
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryFf2ltstRow CurrentFuelFlowToLoadTest
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Fuel_Flow_to_Load_Test")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryFf2ltstRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Fuel_Flow_to_Load_Test", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Fuel_Flow_to_Load_Test", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Linearity Injection record (with associated summary and test information) being evaluated.  These are sorted in descending date/time order for the gas level.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckQa.Function.LinearityInjection CurrentLinearityInjection
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Linearity_Injection")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckQa.Function.LinearityInjection(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Linearity_Injection", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Linearity_Injection", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Linearity Summary record (with associated test information) being evaluated.  They are processed in gas level code order.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckQa.Function.LinearitySummary CurrentLinearitySummary
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Linearity_Summary")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckQa.Function.LinearitySummary(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Linearity_Summary", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Linearity_Summary", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Test Summary record for the linearity record being evaluated and associated location and component data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryLineRow CurrentLinearityTest
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Linearity_Test")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryLineRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Linearity_Test", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Linearity_Test", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The monitor location being evaluated including linked stack information (active/retire date) and unit information (non load based indicator).
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpLocationRow CurrentLocation
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Location")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpLocationRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Location", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Location", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Current Monitor Location being processed.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorLocationRow CurrentMonitorLocation
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Monitor_Location")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorLocationRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Monitor_Location", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Monitor_Location", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Test Summary record for the online offline calibration test summary record being evaluated and associated location and component data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryOnoffRow CurrentOocTest
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_OOC_Test")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryOnoffRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_OOC_Test", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_OOC_Test", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current Protocol Gas record being evaluated.
        ///
        ///Record Identifier if Cylinder ID is not null:  "Cylinder ID " + Cylinder_Identifier
        ///Record Identifier if Cylinder ID is null:  "Gas Level " + Gas_Level_Cd + " Gas Type " + Gas_Type_Cd
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.Table.ProtocolGasRow CurrentProtocolGasRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Protocol_Gas_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.Table.ProtocolGasRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Protocol_Gas_Record", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Protocol_Gas_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The QA Cert Event record being evaluated and associated location and component data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow CurrentQaCertEvent
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_QA_Cert_Event")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_QA_Cert_Event", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_QA_Cert_Event", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Test Summary and RATA records for the RATA being evaluated and associated location, system, and test claim data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRataRow CurrentRata
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_RATA")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRataRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_RATA", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_RATA", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current RATA Run record being evaluated and it associated Test Summary, RATA, RATA Summary, and Flow RATA Run data
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaRataRunRow CurrentRataRun
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_RATA_Run")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaRataRunRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_RATA_Run", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_RATA_Run", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The RATA Summary record being evaluated and it associated TestSummary and RATA data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaRataSummaryRow CurrentRataSummary
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_RATA_Summary")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaRataSummaryRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_RATA_Summary", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_RATA_Summary", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current RATA Traverse record being evaluated and it associated Test Summary, RATA, RATA Summary, RATA Run, and Flow RATA Run data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaRataTraverseRow CurrentRataTraverse
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_RATA_Traverse")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaRataTraverseRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_RATA_Traverse", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_RATA_Traverse", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The record being evaluated on the data entry screen.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaAeCorrelationTestRunRow CurrentRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaAeCorrelationTestRunRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Record", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Collection of Data Elements for the Monitoring System being evaluated
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemRow CurrentSystem
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_System")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_System", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_System", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Test Summary record for the test being evaluated.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow CurrentTest
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Test")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Test", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Test", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Test Extension Exemption record being evaluated and associated location and component data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestExtensionExemptionRow CurrentTestExtensionExemption
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Test_Extension_Exemption")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestExtensionExemptionRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Test_Extension_Exemption", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Test_Extension_Exemption", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The TestQualification record and associated test data being evaluated.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestClaimRow CurrentTestQualification
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Test_Qualification")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestClaimRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Test_Qualification", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Test_Qualification", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Test Summary and Transmitter Transducer records for the transmitter transducer test being evaluated and associated location and component data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryFfaccttRow CurrentTransmitterTransducerTest
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Transmitter_Transducer_Test")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryFfaccttRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Transmitter_Transducer_Test", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Transmitter_Transducer_Test", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Unit Default Test Run record being evaluated and associated test data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaUnitDefaultTestRunRow CurrentUnitDefaultRun
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Unit_Default_Run")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaUnitDefaultTestRunRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Unit_Default_Run", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Unit_Default_Run", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Test Summary and Unit Default Test record of the unit default test being evaluated.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryUnitdefRow CurrentUnitDefaultTest
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(QaParameters.GetCheckParameter("Current_Unit_Default_Test")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryUnitdefRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Current_Unit_Default_Test", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Current_Unit_Default_Test", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The recalculated injection cycle time.
        /// </summary>
        public static int? CycleTimeCalcInjectionCycleTime
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Cycle_Time_Calc_Injection_Cycle_Time")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_Calc_Injection_Cycle_Time", value);
            }
        }
        
        /// <summary>
        /// The recalculated result of a cycle time test.
        /// </summary>
        public static string CycleTimeCalcTestResult
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Cycle_Time_Calc_Test_Result")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_Calc_Test_Result", value);
            }
        }
        
        /// <summary>
        /// The recalculated total cycle time for the system.
        /// </summary>
        public static int? CycleTimeCalcTotalCycleTime
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Cycle_Time_Calc_Total_Cycle_Time")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_Calc_Total_Cycle_Time", value);
            }
        }
        
        /// <summary>
        /// The number of high-level injections in the cycle time test.
        /// </summary>
        public static int? CycleTimeHighInjectionCount
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Cycle_Time_High_Injection_Count")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_High_Injection_Count", value);
            }
        }
        
        /// <summary>
        /// The reference value in the high-level injection of the cycle time test.
        /// </summary>
        public static decimal? CycleTimeHighReferenceValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Cycle_Time_High_Reference_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_High_Reference_Value", value);
            }
        }
        
        /// <summary>
        /// Indicates if the reported begin time of a cycle time injection is prior to its end time.
        /// </summary>
        public static bool? CycleTimeInjectionDatesConsistent
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Cycle_Time_Injection_Dates_Consistent")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_Injection_Dates_Consistent", value);
            }
        }
        
        /// <summary>
        /// Indicates if the gas level code of a cycle time injection is valid.
        /// </summary>
        public static bool? CycleTimeInjectionGasLevelValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Cycle_Time_Injection_Gas_Level_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_Injection_Gas_Level_Valid", value);
            }
        }
        
        /// <summary>
        /// All cycle time injections for the cycle time test.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCycleTimeInjectionRow> CycleTimeInjectionRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Cycle_Time_Injection_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCycleTimeInjectionRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Cycle_Time_Injection_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Cycle_Time_Injection_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the injection times of a cycle time test are valid.
        /// </summary>
        public static bool? CycleTimeInjectionTimesValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Cycle_Time_Injection_Times_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_Injection_Times_Valid", value);
            }
        }
        
        /// <summary>
        /// A calculation of the percent of the span value of the reference value.
        /// </summary>
        public static decimal? CycleTimeReferencePercentOfSpan
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Cycle_Time_Reference_Percent_Of_Span")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_Reference_Percent_Of_Span", value);
            }
        }
        
        /// <summary>
        /// Indicates if the cycle time test was aborted.
        /// </summary>
        public static bool? CycleTimeTestAborted
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Cycle_Time_Test_Aborted")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_Test_Aborted", value);
            }
        }
        
        /// <summary>
        /// The begin date of the first injection in the cycle time test.
        /// </summary>
        public static DateTime? CycleTimeTestBeginDate
        {
            get
            {
                return ((DateTime?)(QaParameters.GetCheckParameter("Cycle_Time_Test_Begin_Date")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_Test_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// The begin hour of the first injection in the cycle time test.
        /// </summary>
        public static int? CycleTimeTestBeginHour
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Cycle_Time_Test_Begin_Hour")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_Test_Begin_Hour", value);
            }
        }
        
        /// <summary>
        /// The begin minute of the first injection in the cycle time test.
        /// </summary>
        public static int? CycleTimeTestBeginMinute
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Cycle_Time_Test_Begin_Minute")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_Test_Begin_Minute", value);
            }
        }
        
        /// <summary>
        /// Indicates if the component tested in the cycle time test has a valid component type.
        /// </summary>
        public static bool? CycleTimeTestComponentTypeValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Cycle_Time_Test_Component_Type_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_Test_Component_Type_Valid", value);
            }
        }
        
        /// <summary>
        /// The end date of the last injection in the cycle time test.
        /// </summary>
        public static DateTime? CycleTimeTestEndDate
        {
            get
            {
                return ((DateTime?)(QaParameters.GetCheckParameter("Cycle_Time_Test_End_Date")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_Test_End_Date", value);
            }
        }
        
        /// <summary>
        /// The end hour of the last injection in the cycle time test.
        /// </summary>
        public static int? CycleTimeTestEndHour
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Cycle_Time_Test_End_Hour")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_Test_End_Hour", value);
            }
        }
        
        /// <summary>
        /// The end minute of the last injection in the cycle time test.
        /// </summary>
        public static int? CycleTimeTestEndMinute
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Cycle_Time_Test_End_Minute")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_Test_End_Minute", value);
            }
        }
        
        /// <summary>
        /// All cycle time tests for the component.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryCycleRow> CycleTimeTestRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Cycle_Time_Test_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryCycleRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Cycle_Time_Test_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Cycle_Time_Test_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The ID of the QA Supp Data record associated with the current cycle time test.
        /// </summary>
        public static string CycleTimeTestSuppDataId
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Cycle_Time_Test_Supp_Data_Id")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_Test_Supp_Data_Id", value);
            }
        }
        
        /// <summary>
        /// Indicates if overall total time of the cycle time test was calculated.  Used for insuring correct levels.
        /// </summary>
        public static bool? CycleTimeTestTotalTimeCalculated
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Cycle_Time_Test_Total_Time_Calculated")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_Test_Total_Time_Calculated", value);
            }
        }
        
        /// <summary>
        /// Indicates if overall test status of cycle time test can be determined.  Used for insuring correct levels.
        /// </summary>
        public static bool? CycleTimeTestValidityDetermined
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Cycle_Time_Test_Validity_Determined")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_Test_Validity_Determined", value);
            }
        }
        
        /// <summary>
        /// The number of zero-level injections in the cycle time test.
        /// </summary>
        public static int? CycleTimeZeroInjectionCount
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Cycle_Time_Zero_Injection_Count")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_Zero_Injection_Count", value);
            }
        }
        
        /// <summary>
        /// The reference value in the zero-level injection of the cycle time test.
        /// </summary>
        public static decimal? CycleTimeZeroReferenceValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Cycle_Time_Zero_Reference_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("Cycle_Time_Zero_Reference_Value", value);
            }
        }
        
        /// <summary>
        /// Default records with default info included.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorDefaultRow> DefaultRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Default_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorDefaultRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Default_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Default_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if another 7day calibration test has been assigned the same test number.
        /// </summary>
        public static bool? Duplicate7DayCalibration
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Duplicate_7Day_Calibration")));
            }
            set
            {
                QaParameters.SetCheckParameter("Duplicate_7Day_Calibration", value);
            }
        }
        
        /// <summary>
        /// Indicates if another Appendix E test has been assigned the same test number.
        /// </summary>
        public static bool? DuplicateAppendixETest
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Duplicate_Appendix_E_Test")));
            }
            set
            {
                QaParameters.SetCheckParameter("Duplicate_Appendix_E_Test", value);
            }
        }
        
        /// <summary>
        /// Indicates if another cycle time test has been assigned the same test number.
        /// </summary>
        public static bool? DuplicateCycleTime
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Duplicate_Cycle_Time")));
            }
            set
            {
                QaParameters.SetCheckParameter("Duplicate_Cycle_Time", value);
            }
        }
        
        /// <summary>
        /// Indicates if another flow to load check has been assigned the same test number.
        /// </summary>
        public static bool? DuplicateFlowToLoadCheck
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Duplicate_Flow_To_Load_Check")));
            }
            set
            {
                QaParameters.SetCheckParameter("Duplicate_Flow_To_Load_Check", value);
            }
        }
        
        /// <summary>
        /// Indicates if another flow to load reference data record has been assigned the same test number.
        /// </summary>
        public static bool? DuplicateFlowToLoadReference
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Duplicate_Flow_To_Load_Reference")));
            }
            set
            {
                QaParameters.SetCheckParameter("Duplicate_Flow_To_Load_Reference", value);
            }
        }
        
        /// <summary>
        /// Indicates if another fuel flow accuracy test has been assigned the same test number.
        /// </summary>
        public static bool? DuplicateFuelFlowAccuracy
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Duplicate_Fuel_Flow_Accuracy")));
            }
            set
            {
                QaParameters.SetCheckParameter("Duplicate_Fuel_Flow_Accuracy", value);
            }
        }
        
        /// <summary>
        /// Indicates if another fuel flow to load baseline data record has been assigned the same test number.
        /// </summary>
        public static bool? DuplicateFuelFlowToLoadBaseline
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Duplicate_Fuel_Flow_To_Load_Baseline")));
            }
            set
            {
                QaParameters.SetCheckParameter("Duplicate_Fuel_Flow_To_Load_Baseline", value);
            }
        }
        
        /// <summary>
        /// Indicates if another fuel flow to load test has been assigned the same test number.
        /// </summary>
        public static bool? DuplicateFuelFlowToLoadTest
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Duplicate_Fuel_Flow_to_Load_Test")));
            }
            set
            {
                QaParameters.SetCheckParameter("Duplicate_Fuel_Flow_to_Load_Test", value);
            }
        }
        
        /// <summary>
        /// Indicates if another linearity check has been assigned the same test number.
        /// </summary>
        public static bool? DuplicateLinearity
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Duplicate_Linearity")));
            }
            set
            {
                QaParameters.SetCheckParameter("Duplicate_Linearity", value);
            }
        }
        
        /// <summary>
        /// Indicates if another linearity injection has been assigned the same gas level and time.
        /// </summary>
        public static bool? DuplicateLinearityInjection
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Duplicate_Linearity_Injection")));
            }
            set
            {
                QaParameters.SetCheckParameter("Duplicate_Linearity_Injection", value);
            }
        }
        
        /// <summary>
        /// Indicates if another test has been assigned the same test number.
        /// </summary>
        public static bool? DuplicateMiscellaneousTest
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Duplicate_Miscellaneous_Test")));
            }
            set
            {
                QaParameters.SetCheckParameter("Duplicate_Miscellaneous_Test", value);
            }
        }
        
        /// <summary>
        /// Indicates if another online offline calibration test has been assigned the same test number.
        /// </summary>
        public static bool? DuplicateOnlineOfflineCalibration
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Duplicate_Online_Offline_Calibration")));
            }
            set
            {
                QaParameters.SetCheckParameter("Duplicate_Online_Offline_Calibration", value);
            }
        }
        
        /// <summary>
        /// Indicates if another RATA has been assigned the same test number.
        /// </summary>
        public static bool? DuplicateRata
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Duplicate_RATA")));
            }
            set
            {
                QaParameters.SetCheckParameter("Duplicate_RATA", value);
            }
        }
        
        /// <summary>
        /// Indicates if another transmitter transducer test has been assigned the same test number.
        /// </summary>
        public static bool? DuplicateTransmitterTransducer
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Duplicate_Transmitter_Transducer")));
            }
            set
            {
                QaParameters.SetCheckParameter("Duplicate_Transmitter_Transducer", value);
            }
        }
        
        /// <summary>
        /// Indicates if another unit default test has been assigned the same test number.
        /// </summary>
        public static bool? DuplicateUnitDefaultTest
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Duplicate_Unit_Default_Test")));
            }
            set
            {
                QaParameters.SetCheckParameter("Duplicate_Unit_Default_Test", value);
            }
        }
        
        /// <summary>
        /// The date when new rules for ECMPS go into effect for the MP evaluation.
        /// </summary>
        public static DateTime? EcmpsMpBeginDate
        {
            get
            {
                return ((DateTime?)(QaParameters.GetCheckParameter("ECMPS_MP_Begin_Date")));
            }
            set
            {
                QaParameters.SetCheckParameter("ECMPS_MP_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// Indicates if the fuel flowmeter accuracy test should be evaluated.
        /// </summary>
        public static bool? EvaluateAccuracyTest
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Evaluate_Accuracy_Test")));
            }
            set
            {
                QaParameters.SetCheckParameter("Evaluate_Accuracy_Test", value);
            }
        }
        
        /// <summary>
        /// Indicates if data on the fuel flowmeter accuracy test data entry screen should be evaluated.
        /// </summary>
        public static bool? EvaluateAccuracyTestScreen
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Evaluate_Accuracy_Test_Screen")));
            }
            set
            {
                QaParameters.SetCheckParameter("Evaluate_Accuracy_Test_Screen", value);
            }
        }
        
        /// <summary>
        /// Indicates if injections in the online offline calibration test should be evaluated.
        /// </summary>
        public static bool? EvaluateOocInjections
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Evaluate_OOC_Injections")));
            }
            set
            {
                QaParameters.SetCheckParameter("Evaluate_OOC_Injections", value);
            }
        }
        
        /// <summary>
        /// Indicates if injection data on the online offline calibration test data entry screen should be evaluated.
        /// </summary>
        public static bool? EvaluateOocScreen
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Evaluate_OOC_Screen")));
            }
            set
            {
                QaParameters.SetCheckParameter("Evaluate_OOC_Screen", value);
            }
        }
        
        /// <summary>
        /// Indicates the types of monitoring systems and components that are appropriate for the QA certification event code.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.EventCodeToSystemOrComponentTypeRow> EventCodeToSystemOrComponentTypeCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Event_Code_to_System_or_Component_Type_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.EventCodeToSystemOrComponentTypeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Event_Code_to_System_or_Component_Type_Cross_Check_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Event_Code_to_System_or_Component_Type_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates the types of tests that are required for the QA certification event code.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.EventCodeToTestTypeCodesRow> EventCodeToTestTypeCodesCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Event_Code_to_Test_Type_Codes_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.EventCodeToTestTypeCodesRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Event_Code_to_Test_Type_Codes_Cross_Check_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Event_Code_to_Test_Type_Codes_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the reported event date of a QA Cert event is valid.
        /// </summary>
        public static bool? EventDateValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Event_Date_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Event_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the reported event hour of a QA Cert event is valid.
        /// </summary>
        public static bool? EventHourValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Event_Hour_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Event_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the same Appendix E test has been reported with a different test number.
        /// </summary>
        public static bool? ExtraAppeTest
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Extra_APPE_Test")));
            }
            set
            {
                QaParameters.SetCheckParameter("Extra_APPE_Test", value);
            }
        }
        
        /// <summary>
        /// Indicates if the same linearity test has been reported with a different test number.
        /// </summary>
        public static bool? ExtraLinearityTest
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Extra_Linearity_Test")));
            }
            set
            {
                QaParameters.SetCheckParameter("Extra_Linearity_Test", value);
            }
        }
        
        /// <summary>
        /// Indicates if the same RATA has been reported with a different test number.
        /// </summary>
        public static bool? ExtraRata
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Extra_RATA")));
            }
            set
            {
                QaParameters.SetCheckParameter("Extra_RATA", value);
            }
        }
        
        /// <summary>
        /// Indicates if the same Unit Default test has been reported with a different test number.
        /// </summary>
        public static bool? ExtraUnitDefaultTest
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Extra_Unit_Default_Test")));
            }
            set
            {
                QaParameters.SetCheckParameter("Extra_Unit_Default_Test", value);
            }
        }
        
        /// <summary>
        /// The recalculated average reference method stack flow in the flow-to-load reference data.
        /// </summary>
        public static decimal? F2lCalcFlow
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("F2L_Calc_Flow")));
            }
            set
            {
                QaParameters.SetCheckParameter("F2L_Calc_Flow", value);
            }
        }
        
        /// <summary>
        /// The recalculated gross heat rate in the flow-to-load reference data.
        /// </summary>
        public static decimal? F2lCalcGhr
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("F2L_Calc_GHR")));
            }
            set
            {
                QaParameters.SetCheckParameter("F2L_Calc_GHR", value);
            }
        }
        
        /// <summary>
        /// The reecalculated average gross unit load in the flow-to-load reference data.
        /// </summary>
        public static decimal? F2lCalcGul
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("F2L_Calc_GUL")));
            }
            set
            {
                QaParameters.SetCheckParameter("F2L_Calc_GUL", value);
            }
        }
        
        /// <summary>
        /// The reecalculated flow-to-load ratio in the flow-to-load reference data.
        /// </summary>
        public static decimal? F2lCalcRatio
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("F2L_Calc_Ratio")));
            }
            set
            {
                QaParameters.SetCheckParameter("F2L_Calc_Ratio", value);
            }
        }
        
        /// <summary>
        /// The QA Supplemental Attribute records for all of a facility's tests that were retrieved for the evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppAttributeRow> FacilityQaSupplementalAttributeRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Facility_QA_Supplemental_Attribute_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppAttributeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Facility_QA_Supplemental_Attribute_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Facility_QA_Supplemental_Attribute_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The QA Supplemental Data records for all of a facility's tests that were retrieved for the evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataRow> FacilityQaSupplementalDataRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Facility_QA_Supplemental_Data_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Facility_QA_Supplemental_Data_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Facility_QA_Supplemental_Data_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Monitor Qualification records for all of a facility's locations that were retrieved for the evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.MonitorQualificationRow> FacilityQualificationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Facility_Qualification_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.MonitorQualificationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Facility_Qualification_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Facility_Qualification_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The RATA run records and associated RATA data for all of a facility's RATAs that were retrieved for the evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaRataRunRow> FacilityRataRunRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Facility_RATA_Run_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaRataRunRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Facility_RATA_Run_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Facility_RATA_Run_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The RATA Summary records for for all of a facility's RATAs that were retrieved for the evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaRataSummaryRow> FacilityRataSummaryRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Facility_RATA_Summary_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaRataSummaryRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Facility_RATA_Summary_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Facility_RATA_Summary_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// List of all UNIT_CAPACITY records for the facility.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationCapacityRow> FacilityUnitCapacityRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Facility_Unit_Capacity_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationCapacityRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Facility_Unit_Capacity_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Facility_Unit_Capacity_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The unit stack configuration records for all of a facility's locations that were retrieved for the evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUnitStackConfigurationRow> FacilityUnitStackConfigurationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Facility_Unit_Stack_Configuration_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUnitStackConfigurationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Facility_Unit_Stack_Configuration_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Facility_Unit_Stack_Configuration_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The test end date or reinstallation date of the Accuracy Test in the fuel flow to load baseline data record.
        /// </summary>
        public static DateTime? Ff2lbasAccuracyTestBaselineStartDate
        {
            get
            {
                return ((DateTime?)(QaParameters.GetCheckParameter("FF2LBAS_Accuracy_Test_Baseline_Start_Date")));
            }
            set
            {
                QaParameters.SetCheckParameter("FF2LBAS_Accuracy_Test_Baseline_Start_Date", value);
            }
        }
        
        /// <summary>
        /// The test end hour or reinstallation hour of the Accuracy Test in the fuel flow to load baseline data record.
        /// </summary>
        public static int? Ff2lbasAccuracyTestBaselineStartHour
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("FF2LBAS_Accuracy_Test_Baseline_Start_Hour")));
            }
            set
            {
                QaParameters.SetCheckParameter("FF2LBAS_Accuracy_Test_Baseline_Start_Hour", value);
            }
        }
        
        /// <summary>
        /// The derived baseline start date based on the accuracy test and PEI in the fuel flow to load baseline data record.
        /// </summary>
        public static DateTime? Ff2lbasBaselineStartDate
        {
            get
            {
                return ((DateTime?)(QaParameters.GetCheckParameter("FF2LBAS_Baseline_Start_Date")));
            }
            set
            {
                QaParameters.SetCheckParameter("FF2LBAS_Baseline_Start_Date", value);
            }
        }
        
        /// <summary>
        /// The derived baseline start hour based on the accuracy test and PEI in the fuel flow to load baseline data record.
        /// </summary>
        public static int? Ff2lbasBaselineStartHour
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("FF2LBAS_Baseline_Start_Hour")));
            }
            set
            {
                QaParameters.SetCheckParameter("FF2LBAS_Baseline_Start_Hour", value);
            }
        }
        
        /// <summary>
        /// The length of the fuel flow to load collection period in hours.
        /// </summary>
        public static decimal? Ff2lbasCollectionPeriodHours
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("FF2LBAS_Collection_Period_Hours")));
            }
            set
            {
                QaParameters.SetCheckParameter("FF2LBAS_Collection_Period_Hours", value);
            }
        }
        
        /// <summary>
        /// Indicates if the fuel-flow-to-load ratio UOM code is valid.
        /// </summary>
        public static bool? Ff2lbasFuelFlowToLoadRatioUomCodeValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("FF2LBAS_Fuel_Flow_To_Load_Ratio_UOM_Code_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("FF2LBAS_Fuel_Flow_To_Load_Ratio_UOM_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the fuel-flow-to-load GHR UOM code is valid.
        /// </summary>
        public static bool? Ff2lbasGhrUomCodeValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("FF2LBAS_GHR_UOM_Code_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("FF2LBAS_GHR_UOM_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// The load units of measure code for the location.
        /// </summary>
        public static string Ff2lbasLoadUomCode
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("FF2LBAS_Load_UOM_Code")));
            }
            set
            {
                QaParameters.SetCheckParameter("FF2LBAS_Load_UOM_Code", value);
            }
        }
        
        /// <summary>
        /// Indicates if the fuel-flow-to-load baseline is reported either as fuel flow to load ratio or GHR.
        /// </summary>
        public static bool? Ff2lbasMethodValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("FF2LBAS_Method_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("FF2LBAS_Method_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if a PEI is required for a fuel flow-to-load baseline data record.
        /// </summary>
        public static bool? Ff2lbasPeiRequired
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("FF2LBAS_PEI_Required")));
            }
            set
            {
                QaParameters.SetCheckParameter("FF2LBAS_PEI_Required", value);
            }
        }
        
        /// <summary>
        /// Indicates if system type is valid for the fuel-flow-to-load baseline data.
        /// </summary>
        public static bool? Ff2lbasSystemValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("FF2LBAS_System_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("FF2LBAS_System_Valid", value);
            }
        }
        
        /// <summary>
        /// The Test Basis (FF2L ratio or GHR) of the fuel flow-to-load baseline data.
        /// </summary>
        public static string Ff2lbasTestBasis
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("FF2LBAS_Test_Basis")));
            }
            set
            {
                QaParameters.SetCheckParameter("FF2LBAS_Test_Basis", value);
            }
        }
        
        /// <summary>
        /// Indicates if system type is valid for the fuel-flow-to-load test.
        /// </summary>
        public static bool? Ff2ltstSystemValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("FF2LTST_System_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("FF2LTST_System_Valid", value);
            }
        }
        
        /// <summary>
        /// The first ECMPS Reporting Period for the related facility.
        /// </summary>
        public static int? FirstEcmpsReportingPeriod
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("First_ECMPS_Reporting_Period")));
            }
            set
            {
                QaParameters.SetCheckParameter("First_ECMPS_Reporting_Period", value);
            }
        }
        
        /// <summary>
        /// Indicates whether calculations can be performed for the operating level of a flow RATA using method 2F, 2G, 2J, or M2H.
        /// </summary>
        public static bool? FlowRataLevelValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Flow_RATA_Level_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Flow_RATA_Level_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if Flow RATA Run or RATA Traverse record is appropriate for the reference method.
        /// </summary>
        public static bool? FlowRataRecordValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Flow_RATA_Record_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Flow_RATA_Record_Valid", value);
            }
        }
        
        /// <summary>
        /// All Flow Run records associated with a RATA.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaFlowRataRunRow> FlowRataRunRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Flow_RATA_Run_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaFlowRataRunRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Flow_RATA_Run_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Flow_RATA_Run_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if Flow RATA Run record is present and valid.
        /// </summary>
        public static bool? FlowRataRunValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Flow_RATA_Run_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Flow_RATA_Run_Valid", value);
            }
        }
        
        /// <summary>
        /// Average gross unit load in the associated flow-to-load reference data.
        /// </summary>
        public static int? FlowToLoadCheckAverageGrossUnitLoad
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Flow_to_Load_Check_Average_Gross_Unit_Load")));
            }
            set
            {
                QaParameters.SetCheckParameter("Flow_to_Load_Check_Average_Gross_Unit_Load", value);
            }
        }
        
        /// <summary>
        /// Recalculated test result for the flow-to-load check.
        /// </summary>
        public static string FlowToLoadCheckCalcTestResult
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Flow_To_Load_Check_Calc_Test_Result")));
            }
            set
            {
                QaParameters.SetCheckParameter("Flow_To_Load_Check_Calc_Test_Result", value);
            }
        }
        
        /// <summary>
        /// The load units of measure in the associated load record.
        /// </summary>
        public static string FlowToLoadCheckLoadUnitsOfMeasure
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Flow_to_Load_Check_Load_Units_of_Measure")));
            }
            set
            {
                QaParameters.SetCheckParameter("Flow_to_Load_Check_Load_Units_of_Measure", value);
            }
        }
        
        /// <summary>
        /// Indicates if the reported operating level code of flow-to-load check is valid.
        /// </summary>
        public static bool? FlowToLoadCheckOperatingLevelCodeValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Flow_To_Load_Check_Operating_Level_Code_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Flow_To_Load_Check_Operating_Level_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// All Flow to Load Check and associated Test Summary records for the monitoring system.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow> FlowToLoadCheckRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Flow_to_Load_Check_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Flow_to_Load_Check_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Flow_to_Load_Check_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The ID of the QA Supp Data record associated with the flow-to-load check.
        /// </summary>
        public static string FlowToLoadCheckSuppDataId
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Flow_to_Load_Check_Supp_Data_ID")));
            }
            set
            {
                QaParameters.SetCheckParameter("Flow_to_Load_Check_Supp_Data_ID", value);
            }
        }
        
        /// <summary>
        /// Indicates if system type is valid for the flow-to-load check.
        /// </summary>
        public static bool? FlowToLoadCheckSystemValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Flow_to_Load_Check_System_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Flow_to_Load_Check_System_Valid", value);
            }
        }
        
        /// <summary>
        /// Recalculated average gross unit load during the used runs of the reference RATA(s) at the operating level.
        /// </summary>
        public static decimal? FlowToLoadReferenceCalcAverageGrossUnitLoad
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Flow_to_Load_Reference_Calc_Average_Gross_Unit_Load")));
            }
            set
            {
                QaParameters.SetCheckParameter("Flow_to_Load_Reference_Calc_Average_Gross_Unit_Load", value);
            }
        }
        
        /// <summary>
        /// Recalculated average reference values during the used runs of the reference RATA(s) at the operating level.
        /// </summary>
        public static decimal? FlowToLoadReferenceCalcAverageReferenceMethodFlow
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Flow_To_Load_Reference_Calc_Average_Reference_Method_Flow")));
            }
            set
            {
                QaParameters.SetCheckParameter("Flow_To_Load_Reference_Calc_Average_Reference_Method_Flow", value);
            }
        }
        
        /// <summary>
        /// Recalculated flow-to-load ratio
        /// </summary>
        public static decimal? FlowToLoadReferenceCalcFlowToLoadRatio
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Flow_To_Load_Reference_Calc_Flow_To_Load_Ratio")));
            }
            set
            {
                QaParameters.SetCheckParameter("Flow_To_Load_Reference_Calc_Flow_To_Load_Ratio", value);
            }
        }
        
        /// <summary>
        /// Recalculated gross heat rate
        /// </summary>
        public static decimal? FlowToLoadReferenceCalcGhr
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Flow_To_Load_Reference_Calc_GHR")));
            }
            set
            {
                QaParameters.SetCheckParameter("Flow_To_Load_Reference_Calc_GHR", value);
            }
        }
        
        /// <summary>
        /// Indicates if flow-to-load reference data was reported as using either flow-to-load ratio or GHR methodology (but not both)
        /// </summary>
        public static bool? FlowToLoadReferenceMethodologyValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Flow_to_Load_Reference_Methodology_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Flow_to_Load_Reference_Methodology_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the reported operating level code of flow-to-load reference data is valid.
        /// </summary>
        public static bool? FlowToLoadReferenceOperatingLevelCodeValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Flow_To_Load_Reference_Operating_Level_Code_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Flow_To_Load_Reference_Operating_Level_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// The RATASummaryID of the associated operating level of the reference RATA.
        /// </summary>
        public static string FlowToLoadReferenceRataSummaryId
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Flow_To_Load_Reference_RATA_Summary_ID")));
            }
            set
            {
                QaParameters.SetCheckParameter("Flow_To_Load_Reference_RATA_Summary_ID", value);
            }
        }
        
        /// <summary>
        /// The QASuppDataID of the associated flow RATA.
        /// </summary>
        public static string FlowToLoadReferenceRataSuppId
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Flow_To_Load_Reference_RATA_Supp_ID")));
            }
            set
            {
                QaParameters.SetCheckParameter("Flow_To_Load_Reference_RATA_Supp_ID", value);
            }
        }
        
        /// <summary>
        /// Indicates if the reported RATA test number of flow-to-load reference data is valid.
        /// </summary>
        public static bool? FlowToLoadReferenceRataTestNumberValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Flow_To_Load_Reference_RATA_Test_Number_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Flow_To_Load_Reference_RATA_Test_Number_Valid", value);
            }
        }
        
        /// <summary>
        /// All Flow to Load Reference Data Test Summary records for the monitoring system.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow> FlowToLoadReferenceRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Flow_to_Load_Reference_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Flow_to_Load_Reference_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Flow_to_Load_Reference_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The ID of the QA Supp Data record associated with the flow-to-load reference data.
        /// </summary>
        public static string FlowToLoadReferenceSuppDataId
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Flow_to_Load_Reference_Supp_Data_ID")));
            }
            set
            {
                QaParameters.SetCheckParameter("Flow_to_Load_Reference_Supp_Data_ID", value);
            }
        }
        
        /// <summary>
        /// Indicates if system type is valid for the flow-to-load reference data.
        /// </summary>
        public static bool? FlowToLoadReferenceSystemValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Flow_to_Load_Reference_System_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Flow_to_Load_Reference_System_Valid", value);
            }
        }
        
        /// <summary>
        /// A lookup table of Fuel codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.FuelCodeRow> FuelCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Fuel_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.FuelCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Fuel_Code_Lookup_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Fuel_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Fuel Flow to Load  Baseline Records for the system.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryFf2lbasRow> FuelFlowToLoadBaselineRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Fuel_Flow_To_Load_Baseline_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryFf2lbasRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Fuel_Flow_To_Load_Baseline_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Fuel_Flow_To_Load_Baseline_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Links appropriate fuel-to-load baseline UOM code to load UOM code and system type code.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FuelFlowToLoadBaselineUomToLoadUomAndSystemTypeRow> FuelFlowToLoadBaselineUomToLoadUomAndSystemtypeCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Fuel_Flow_To_Load_Baseline_Uom_To_Load_Uom_And_Systemtype_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FuelFlowToLoadBaselineUomToLoadUomAndSystemTypeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Fuel_Flow_To_Load_Baseline_Uom_To_Load_Uom_And_Systemtype_Cross_Check_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Fuel_Flow_To_Load_Baseline_Uom_To_Load_Uom_And_Systemtype_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Fuel Flow to Load  Test Records for the system.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryFf2ltstRow> FuelFlowToLoadTestRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Fuel_Flow_to_Load_Test_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryFf2ltstRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Fuel_Flow_to_Load_Test_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Fuel_Flow_to_Load_Test_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Lookup table of PGVP Gas Type Codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.GasTypeCodeRow> GasTypeCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Gas_Type_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.GasTypeCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Gas_Type_Code_Lookup_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Gas_Type_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The calculated average gross unit load for the high operating level.
        /// </summary>
        public static decimal? HighAverageGrossUnitLoad
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("High_Average_Gross_Unit_Load")));
            }
            set
            {
                QaParameters.SetCheckParameter("High_Average_Gross_Unit_Load", value);
            }
        }
        
        /// <summary>
        /// The calculated BAF for the high operating level.
        /// </summary>
        public static decimal? HighBaf
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("High_BAF")));
            }
            set
            {
                QaParameters.SetCheckParameter("High_BAF", value);
            }
        }
        
        /// <summary>
        /// The highest CEM Value used in the calculation of relative accuracy for a RATA.
        /// </summary>
        public static decimal? HighestRataCemValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Highest_RATA_CEM_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("Highest_RATA_CEM_Value", value);
            }
        }
        
        /// <summary>
        /// The highest Run Number in a RATA.
        /// </summary>
        public static int? HighestRataRunNumber
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Highest_RATA_Run_Number")));
            }
            set
            {
                QaParameters.SetCheckParameter("Highest_RATA_Run_Number", value);
            }
        }
        
        /// <summary>
        /// The number of used runs for the high operating level of a RATA.
        /// </summary>
        public static decimal? HighRunCount
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("High_Run_Count")));
            }
            set
            {
                QaParameters.SetCheckParameter("High_Run_Count", value);
            }
        }
        
        /// <summary>
        /// The sum of the gross unit loads in the used runs for the high operating level.
        /// </summary>
        public static decimal? HighSumGrossUnitLoad
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("High_Sum_Gross_Unit_Load")));
            }
            set
            {
                QaParameters.SetCheckParameter("High_Sum_Gross_Unit_Load", value);
            }
        }
        
        /// <summary>
        /// The sum of the reference values in the used runs for the high operating level of a RATA.
        /// </summary>
        public static decimal? HighSumReferenceValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("High_Sum_Reference_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("High_Sum_Reference_Value", value);
            }
        }
        
        /// <summary>
        /// A list of values in the RATA Summary record that are not equal to the calculated values.
        /// </summary>
        public static string InconsistentRataFields
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Inconsistent_RATA_Fields")));
            }
            set
            {
                QaParameters.SetCheckParameter("Inconsistent_RATA_Fields", value);
            }
        }
        
        /// <summary>
        /// The maximum heat input rate in the runs of the previous operating level of an Appendix E Test.
        /// </summary>
        public static decimal? LastAppeMaximumHiRate
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Last_APPE_Maximum_HI_Rate")));
            }
            set
            {
                QaParameters.SetCheckParameter("Last_APPE_Maximum_HI_Rate", value);
            }
        }
        
        /// <summary>
        /// The date of the previous zero-level injection in a 7day calibration test.
        /// </summary>
        public static DateTime? LastCalibrationInjectionDate
        {
            get
            {
                return ((DateTime?)(QaParameters.GetCheckParameter("Last_Calibration_Injection_Date")));
            }
            set
            {
                QaParameters.SetCheckParameter("Last_Calibration_Injection_Date", value);
            }
        }
        
        /// <summary>
        /// Time of the previous linearity injection (YYYYMMDDHHMM).
        /// </summary>
        public static string LastInjectionTime
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Last_Injection_Time")));
            }
            set
            {
                QaParameters.SetCheckParameter("Last_Injection_Time", value);
            }
        }
        
        /// <summary>
        /// The Gas Level Code of the prior linearity summary record processed.
        /// </summary>
        public static string LastLinearityLevelCode
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Last_Linearity_Level_Code")));
            }
            set
            {
                QaParameters.SetCheckParameter("Last_Linearity_Level_Code", value);
            }
        }
        
        /// <summary>
        /// The run number of the chronologically previous RATA run in an operating level.
        /// </summary>
        public static int? LastRataRunNumber
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Last_RATA_Run_Number")));
            }
            set
            {
                QaParameters.SetCheckParameter("Last_RATA_Run_Number", value);
            }
        }
        
        /// <summary>
        /// The Traverse Point ID of the prior RATA Traverse record processed.
        /// </summary>
        public static string LastRataTraversePointId
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Last_RATA_Traverse_Point_ID")));
            }
            set
            {
                QaParameters.SetCheckParameter("Last_RATA_Traverse_Point_ID", value);
            }
        }
        
        /// <summary>
        /// The calculated APS indicator for the gas level of the linearity check.
        /// </summary>
        public static int? LinearityCalcAps
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Linearity_Calc_APS")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Calc_APS", value);
            }
        }
        
        /// <summary>
        /// The calculated mean measured value for the gas level of the linearity check.
        /// </summary>
        public static decimal? LinearityCalcMmv
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Linearity_Calc_MMV")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Calc_MMV", value);
            }
        }
        
        /// <summary>
        /// The calculated mean reference value for the gas level of the linearity check.
        /// </summary>
        public static decimal? LinearityCalcMrv
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Linearity_Calc_MRV")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Calc_MRV", value);
            }
        }
        
        /// <summary>
        /// The calculated percent error for the gas level of the linearity check.
        /// </summary>
        public static decimal? LinearityCalcPe
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Linearity_Calc_PE")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Calc_PE", value);
            }
        }
        
        /// <summary>
        /// Indicates if component type is valid for the linearity test.
        /// </summary>
        public static bool? LinearityComponentValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Linearity_Component_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Component_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if gas level code is valid for the linearity summary record.
        /// </summary>
        public static bool? LinearityGasLevelValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Linearity_Gas_Level_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Gas_Level_Valid", value);
            }
        }
        
        /// <summary>
        /// The number of injections performed for the gas level of the linearity check.
        /// </summary>
        public static int? LinearityInjectionCount
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Linearity_Injection_Count")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Injection_Count", value);
            }
        }
        
        /// <summary>
        /// Indicates if the linearity was one of the last 3 injections performed at the calibration gas level, and was included in the calculations for that level.
        /// </summary>
        public static bool? LinearityInjectionIncluded
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Linearity_Injection_Included")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Injection_Included", value);
            }
        }
        
        /// <summary>
        /// The Linearity Injection records for the test.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckQa.Function.LinearityInjection> LinearityInjectionRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Linearity_Injection_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckQa.Function.LinearityInjection>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Linearity_Injection_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Linearity_Injection_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the reference value in the linearity injection record contains a valid value.
        /// </summary>
        public static bool? LinearityInjectionReferenceValueValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Linearity_Injection_Reference_Value_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Injection_Reference_Value_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the injection times in a linearity check are valid.
        /// </summary>
        public static bool? LinearityInjectionTimesValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Linearity_Injection_Times_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Injection_Times_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the Injection Date, Hour, and Minute in the linearity injection record is valid.
        /// </summary>
        public static bool? LinearityInjectionTimeValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Linearity_Injection_Time_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Injection_Time_Valid", value);
            }
        }
        
        /// <summary>
        /// A list of fields containing intermediate values that are inconsistent with recalculated value.
        /// </summary>
        public static string LinearityIntermediateValues
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Linearity_Intermediate_Values")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Intermediate_Values", value);
            }
        }
        
        /// <summary>
        /// A list of calibration gas levels in the linearity check.
        /// </summary>
        public static string LinearityLevelList
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Linearity_Level_List")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Level_List", value);
            }
        }
        
        /// <summary>
        /// Indicates if calculations can be performed for the gas level of a linearity check.
        /// </summary>
        public static bool? LinearityLevelValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Linearity_Level_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Level_Valid", value);
            }
        }
        
        /// <summary>
        /// The sum of the measured values of the last three injections in the gas level of the linearity check.
        /// </summary>
        public static decimal? LinearityMeasuredValueTotal
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Linearity_Measured_Value_Total")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Measured_Value_Total", value);
            }
        }
        
        /// <summary>
        /// A calculation of the percent of the span value of the reference value.
        /// </summary>
        public static decimal? LinearityReferencePercentOfSpan
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Linearity_Reference_Percent_of_Span")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Reference_Percent_of_Span", value);
            }
        }
        
        /// <summary>
        /// Indicates if reference value of a linearity injection is consistent with the span value based on gas level.
        /// </summary>
        public static string LinearityReferenceValueConsistentWithSpan
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Linearity_Reference_Value_Consistent_with_Span")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Reference_Value_Consistent_with_Span", value);
            }
        }
        
        /// <summary>
        /// Indicates if mid-leve reference values, which are less than high-level reference values and greater than low-level reference values.
        /// </summary>
        public static bool? LinearityReferenceValuesConsistent
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Linearity_Reference_Values_Consistent")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Reference_Values_Consistent", value);
            }
        }
        
        /// <summary>
        /// The sum of the reference values of the last three injections in the gas level of the linearity check.
        /// </summary>
        public static decimal? LinearityReferenceValueTotal
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Linearity_Reference_Value_Total")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Reference_Value_Total", value);
            }
        }
        
        /// <summary>
        /// Indicates if the sequence of linearity injections is valid.
        /// </summary>
        public static bool? LinearitySequenceValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Linearity_Sequence_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Sequence_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the alternate performance specification was used to determine the results for the gas level of the linearity check.
        /// </summary>
        public static int? LinearitySummaryApsIndicator
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Linearity_Summary_APS_Indicator")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Summary_APS_Indicator", value);
            }
        }
        
        /// <summary>
        /// The calculated mean difference for the gas level of the linearity check.
        /// </summary>
        public static decimal? LinearitySummaryMeanDifference
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Linearity_Summary_Mean_Difference")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Summary_Mean_Difference", value);
            }
        }
        
        /// <summary>
        /// The calculated mean measured value for the gas level of the linearity check.
        /// </summary>
        public static decimal? LinearitySummaryMeanMeasuredValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Linearity_Summary_Mean_Measured_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Summary_Mean_Measured_Value", value);
            }
        }
        
        /// <summary>
        /// The calculated mean reference value for the gas level of the linearity check.
        /// </summary>
        public static decimal? LinearitySummaryMeanReferenceValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Linearity_Summary_Mean_Reference_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Summary_Mean_Reference_Value", value);
            }
        }
        
        /// <summary>
        /// The calculated percent error for the gas level of the linearity check.
        /// </summary>
        public static decimal? LinearitySummaryPercentError
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Linearity_Summary_Percent_Error")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Summary_Percent_Error", value);
            }
        }
        
        /// <summary>
        /// Indicates if the reported percent error in the linearity summary record contains a valid value.
        /// </summary>
        public static bool? LinearitySummaryPercentErrorValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Linearity_Summary_Percent_Error_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Summary_Percent_Error_Valid", value);
            }
        }
        
        /// <summary>
        /// The Linearity Summary records for the test.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckQa.Function.LinearitySummary> LinearitySummaryRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Linearity_Summary_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckQa.Function.LinearitySummary>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Linearity_Summary_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Linearity_Summary_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The ID of the QA Supp Data record associated with the current linearity check.
        /// </summary>
        public static string LinearitySuppDataId
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Linearity_Supp_Data_ID")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Supp_Data_ID", value);
            }
        }
        
        /// <summary>
        /// Indicates if the linearity test is aborted
        /// </summary>
        public static bool? LinearityTestAborted
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Linearity_Test_Aborted")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Test_Aborted", value);
            }
        }
        
        /// <summary>
        /// Begin Date of linearity check.
        /// </summary>
        public static bool? LinearityTestBeginDate
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Linearity_Test_Begin_Date")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Test_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// Begin Hour of linearity check.
        /// </summary>
        public static int? LinearityTestBeginHour
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Linearity_Test_Begin_Hour")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Test_Begin_Hour", value);
            }
        }
        
        /// <summary>
        /// Begin Minute of linearity check.
        /// </summary>
        public static int? LinearityTestBeginMinute
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Linearity_Test_Begin_Minute")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Test_Begin_Minute", value);
            }
        }
        
        /// <summary>
        /// End Date of linearity check.
        /// </summary>
        public static DateTime? LinearityTestEndDate
        {
            get
            {
                return ((DateTime?)(QaParameters.GetCheckParameter("Linearity_Test_End_Date")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Test_End_Date", value);
            }
        }
        
        /// <summary>
        /// End Hour of linearity check.
        /// </summary>
        public static int? LinearityTestEndHour
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Linearity_Test_End_Hour")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Test_End_Hour", value);
            }
        }
        
        /// <summary>
        /// End Minute of linearity check.
        /// </summary>
        public static int? LinearityTestEndMinute
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Linearity_Test_End_Minute")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Test_End_Minute", value);
            }
        }
        
        /// <summary>
        /// All linearity injection records in the test with their associated linearity summary data.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckQa.Function.LinearityInjection> LinearityTestInjectionRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Linearity_Test_Injection_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckQa.Function.LinearityInjection>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Linearity_Test_Injection_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Linearity_Test_Injection_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All linearity test summary records for the component.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow> LinearityTestRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Linearity_Test_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Linearity_Test_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Linearity_Test_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Calculated linearity test result.
        /// </summary>
        public static string LinearityTestResult
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Linearity_Test_Result")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Test_Result", value);
            }
        }
        
        /// <summary>
        /// Test Type Description (either linearity of 3-pt system integrity check).
        /// </summary>
        public static string LinearityTestType
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Linearity_Test_Type")));
            }
            set
            {
                QaParameters.SetCheckParameter("Linearity_Test_Type", value);
            }
        }
        
        /// <summary>
        /// The LowerOperationBoundary in the active load record.
        /// </summary>
        public static int? LoadLowerBoundary
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Load_Lower_Boundary")));
            }
            set
            {
                QaParameters.SetCheckParameter("Load_Lower_Boundary", value);
            }
        }
        
        /// <summary>
        /// Load records for current location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorLoadRow> LoadRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Load_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorLoadRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Load_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Load_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The UpperOperationBoundary in the active load record.
        /// </summary>
        public static int? LoadUpperBoundary
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Load_Upper_Boundary")));
            }
            set
            {
                QaParameters.SetCheckParameter("Load_Upper_Boundary", value);
            }
        }
        
        /// <summary>
        /// A collection of records for all Analyzer Range records for the location with the associated component information.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.AnalyzerRangeRow> LocationAnalyzerRangeRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Location_Analyzer_Range_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.AnalyzerRangeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Location_Analyzer_Range_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Location_Analyzer_Range_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The monitor location attribute records for the location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.MonitorLocationAttributeRow> LocationAttributeRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Location_Attribute_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.MonitorLocationAttributeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Location_Attribute_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Location_Attribute_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Unit Control records which apply to the monitoring location.
        ///
        ///For a unit, this is the Unit Control records for the unit.
        ///
        ///For a stack or pipe, this is the Unit Control records for all units linked to the stack or pipe via Unit Stack Configuration records.  The  InstallDate for the location control record should be the later of the InstallDate in the Unit Control record and the StartDate in the Unit Stack Configuration record.  The  RetireDate for the location control record should be the earlier of the RetireDate in the Unit Control record and the EndDate in the Unit Stack Configuration record.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationControlRow> LocationControlRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Location_Control_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationControlRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Location_Control_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Location_Control_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Unit Operating Status records which are linked to the location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationOperatingStatusRow> LocationOperatingStatusRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Location_Operating_Status_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationOperatingStatusRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Location_Operating_Status_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Location_Operating_Status_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Unit Program Reporting Frequency records which apply to the monitoring location.
        ///
        ///For a unit, this is the Unit Reporting Frequency records for the unit.
        ///
        ///For a stack or pipe, this is the Unit Reporting Frequency records for all units linked to the stack or pipe via Unit Stack Configuration records.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationReportingFrequencyRow> LocationReportingFrequencyRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Location_Reporting_Frequency_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationReportingFrequencyRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Location_Reporting_Frequency_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Location_Reporting_Frequency_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// System Component Records at location with associated component data.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemComponentRow> LocationSystemComponentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Location_System_Component_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemComponentRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Location_System_Component_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Location_System_Component_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All test summary records associated with the location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow> LocationTestRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Location_Test_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Location_Test_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Location_Test_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Unit Type records for the unit or all the units linked to a stack or pipe.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationUnitTypeRow> LocationUnitTypeRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Location_Unit_Type_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationUnitTypeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Location_Unit_Type_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Location_Unit_Type_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The calculated average gross unit load for the low operating level.
        /// </summary>
        public static decimal? LowAverageGrossUnitLoad
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Low_Average_Gross_Unit_Load")));
            }
            set
            {
                QaParameters.SetCheckParameter("Low_Average_Gross_Unit_Load", value);
            }
        }
        
        /// <summary>
        /// The calculated BAF for the low operating level.
        /// </summary>
        public static decimal? LowBaf
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Low_BAF")));
            }
            set
            {
                QaParameters.SetCheckParameter("Low_BAF", value);
            }
        }
        
        /// <summary>
        /// The number of used runs for the low operating level of a RATA.
        /// </summary>
        public static decimal? LowRunCount
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Low_Run_Count")));
            }
            set
            {
                QaParameters.SetCheckParameter("Low_Run_Count", value);
            }
        }
        
        /// <summary>
        /// The sum of the gross unit loads in the used runs for the low operating level.
        /// </summary>
        public static decimal? LowSumGrossUnitLoad
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Low_Sum_Gross_Unit_Load")));
            }
            set
            {
                QaParameters.SetCheckParameter("Low_Sum_Gross_Unit_Load", value);
            }
        }
        
        /// <summary>
        /// The sum of the reference values in the used runs for the low operating level of a RATA.
        /// </summary>
        public static decimal? LowSumReferenceValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Low_Sum_Reference_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("Low_Sum_Reference_Value", value);
            }
        }
        
        /// <summary>
        /// Records for Methods at Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorMethodRow> MethodRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Method_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorMethodRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Method_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Method_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The calculated average gross unit load for the mid operating level.
        /// </summary>
        public static decimal? MidAverageGrossUnitLoad
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Mid_Average_Gross_Unit_Load")));
            }
            set
            {
                QaParameters.SetCheckParameter("Mid_Average_Gross_Unit_Load", value);
            }
        }
        
        /// <summary>
        /// The calculated BAF for the mid operating level.
        /// </summary>
        public static decimal? MidBaf
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Mid_BAF")));
            }
            set
            {
                QaParameters.SetCheckParameter("Mid_BAF", value);
            }
        }
        
        /// <summary>
        /// The number of used runs for the mid operating level of a RATA.
        /// </summary>
        public static decimal? MidRunCount
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Mid_Run_Count")));
            }
            set
            {
                QaParameters.SetCheckParameter("Mid_Run_Count", value);
            }
        }
        
        /// <summary>
        /// The sum of the gross unit loads in the used runs for the mid operating level.
        /// </summary>
        public static decimal? MidSumGrossUnitLoad
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Mid_Sum_Gross_Unit_Load")));
            }
            set
            {
                QaParameters.SetCheckParameter("Mid_Sum_Gross_Unit_Load", value);
            }
        }
        
        /// <summary>
        /// The sum of the reference values in the used runs for the mid operating level of a RATA.
        /// </summary>
        public static decimal? MidSumReferenceValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Mid_Sum_Reference_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("Mid_Sum_Reference_Value", value);
            }
        }
        
        /// <summary>
        /// The fieldname of the component or monitoring system ID reported in the test.
        /// </summary>
        public static string MiscellaneousTestIdFieldname
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Miscellaneous_Test_ID_Fieldname")));
            }
            set
            {
                QaParameters.SetCheckParameter("Miscellaneous_Test_ID_Fieldname", value);
            }
        }
        
        /// <summary>
        /// Indicates if the miscellaneous test should be evaluated.
        /// </summary>
        public static bool? MiscellaneousTestTypeValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Miscellaneous_Test_Type_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Miscellaneous_Test_Type_Valid", value);
            }
        }
        
        /// <summary>
        /// MonitoringPlanLocation records associated with QA entity being evaluated.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorPlanLocationRow> MonitoringPlanLocationRecordsForQa
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Monitoring_Plan_Location_Records_for_QA")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorPlanLocationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Monitoring_Plan_Location_Records_for_QA", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Monitoring_Plan_Location_Records_for_QA", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// System Records at location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemRow> MonitorSystemRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Monitor_System_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Monitor_System_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Monitor_System_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The normal operating levels at which a flow RATA was performed.
        /// </summary>
        public static string NormalRataOperatingLevels
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Normal_RATA_Operating_Levels")));
            }
            set
            {
                QaParameters.SetCheckParameter("Normal_RATA_Operating_Levels", value);
            }
        }
        
        /// <summary>
        /// The recalculated APS indicator for the offline upscale injection.
        /// </summary>
        public static int? OfflineUpscaleCalcAps
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Offline_Upscale_Calc_APS")));
            }
            set
            {
                QaParameters.SetCheckParameter("Offline_Upscale_Calc_APS", value);
            }
        }
        
        /// <summary>
        /// The recalculated result (CE or diff) for the offline upscale injection.
        /// </summary>
        public static decimal? OfflineUpscaleCalcResult
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Offline_Upscale_Calc_Result")));
            }
            set
            {
                QaParameters.SetCheckParameter("Offline_Upscale_Calc_Result", value);
            }
        }
        
        /// <summary>
        /// The recalculated APS indicator for the offline zero injection.
        /// </summary>
        public static int? OfflineZeroCalcAps
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Offline_Zero_Calc_APS")));
            }
            set
            {
                QaParameters.SetCheckParameter("Offline_Zero_Calc_APS", value);
            }
        }
        
        /// <summary>
        /// The recalculated result (CE or diff) for the offline zero injection.
        /// </summary>
        public static decimal? OfflineZeroCalcResult
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Offline_Zero_Calc_Result")));
            }
            set
            {
                QaParameters.SetCheckParameter("Offline_Zero_Calc_Result", value);
            }
        }
        
        /// <summary>
        /// Identifies valid relationships between UOM codes for Oil Volume, Density, and GCV for Appendix E test.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.OilVolumeUomToDensityUomToGcvUomRow> OilVolumeUomToDensityUomToGcvUom
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Oil_Volume_UOM_to_Density_UOM_to_GCV_UOM")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.OilVolumeUomToDensityUomToGcvUomRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Oil_Volume_UOM_to_Density_UOM_to_GCV_UOM", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Oil_Volume_UOM_to_Density_UOM_to_GCV_UOM", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The recalculated APS indicator for the online upscale injection.
        /// </summary>
        public static int? OnlineUpscaleCalcAps
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Online_Upscale_Calc_APS")));
            }
            set
            {
                QaParameters.SetCheckParameter("Online_Upscale_Calc_APS", value);
            }
        }
        
        /// <summary>
        /// The recalculated result (CE or diff) for the online upscale injection.
        /// </summary>
        public static decimal? OnlineUpscaleCalcResult
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Online_Upscale_Calc_Result")));
            }
            set
            {
                QaParameters.SetCheckParameter("Online_Upscale_Calc_Result", value);
            }
        }
        
        /// <summary>
        /// The recalculated APS indicator for the online zero injection.
        /// </summary>
        public static int? OnlineZeroCalcAps
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Online_Zero_Calc_APS")));
            }
            set
            {
                QaParameters.SetCheckParameter("Online_Zero_Calc_APS", value);
            }
        }
        
        /// <summary>
        /// The recalculated result (CE or diff) for the online zero injection.
        /// </summary>
        public static decimal? OnlineZeroCalcResult
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Online_Zero_Calc_Result")));
            }
            set
            {
                QaParameters.SetCheckParameter("Online_Zero_Calc_Result", value);
            }
        }
        
        /// <summary>
        /// Indicates if the reported injection date/hour of all injections in a online offline calibration test are valid.
        /// </summary>
        public static bool? OocInjectionTimesValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("OOC_Injection_Times_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("OOC_Injection_Times_Valid", value);
            }
        }
        
        /// <summary>
        /// The recalculated APS indicator for the offline upscale injection.
        /// </summary>
        public static int? OocOfflineUpscaleInjectionCalcApsIndicator
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("OOC_Offline_Upscale_Injection_Calc_APS_Indicator")));
            }
            set
            {
                QaParameters.SetCheckParameter("OOC_Offline_Upscale_Injection_Calc_APS_Indicator", value);
            }
        }
        
        /// <summary>
        /// The recalculated calibration error or difference for the offline upscale injection.
        /// </summary>
        public static decimal? OocOfflineUpscaleInjectionCalcResult
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("OOC_Offline_Upscale_Injection_Calc_Result")));
            }
            set
            {
                QaParameters.SetCheckParameter("OOC_Offline_Upscale_Injection_Calc_Result", value);
            }
        }
        
        /// <summary>
        /// The recalculated APS indicator for the offline zero-level injection.
        /// </summary>
        public static int? OocOfflineZeroInjectionCalcApsIndicator
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("OOC_Offline_Zero_Injection_Calc_APS_Indicator")));
            }
            set
            {
                QaParameters.SetCheckParameter("OOC_Offline_Zero_Injection_Calc_APS_Indicator", value);
            }
        }
        
        /// <summary>
        /// The recalculated calibration error or difference for the offline zero-level injection.
        /// </summary>
        public static decimal? OocOfflineZeroInjectionCalcResult
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("OOC_Offline_Zero_Injection_Calc_Result")));
            }
            set
            {
                QaParameters.SetCheckParameter("OOC_Offline_Zero_Injection_Calc_Result", value);
            }
        }
        
        /// <summary>
        /// The recalculated APS indicator for the online upscale injection.
        /// </summary>
        public static int? OocOnlineUpscaleInjectionCalcApsIndicator
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("OOC_Online_Upscale_Injection_Calc_APS_Indicator")));
            }
            set
            {
                QaParameters.SetCheckParameter("OOC_Online_Upscale_Injection_Calc_APS_Indicator", value);
            }
        }
        
        /// <summary>
        /// The recalculated calibration error or difference for the online upscale injection.
        /// </summary>
        public static decimal? OocOnlineUpscaleInjectionCalcResult
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("OOC_Online_Upscale_Injection_Calc_Result")));
            }
            set
            {
                QaParameters.SetCheckParameter("OOC_Online_Upscale_Injection_Calc_Result", value);
            }
        }
        
        /// <summary>
        /// The recalculated APS indicator for the online zero-level injection.
        /// </summary>
        public static int? OocOnlineZeroInjectionCalcApsIndicator
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("OOC_Online_Zero_Injection_Calc_APS_Indicator")));
            }
            set
            {
                QaParameters.SetCheckParameter("OOC_Online_Zero_Injection_Calc_APS_Indicator", value);
            }
        }
        
        /// <summary>
        /// The recalculated calibration error or difference for the online zero-level injection.
        /// </summary>
        public static decimal? OocOnlineZeroInjectionCalcResult
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("OOC_Online_Zero_Injection_Calc_Result")));
            }
            set
            {
                QaParameters.SetCheckParameter("OOC_Online_Zero_Injection_Calc_Result", value);
            }
        }
        
        /// <summary>
        /// The recalculated result of a online offline calibration test.
        /// </summary>
        public static string OocTestCalcResult
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("OOC_Test_Calc_Result")));
            }
            set
            {
                QaParameters.SetCheckParameter("OOC_Test_Calc_Result", value);
            }
        }
        
        /// <summary>
        /// Indicates if the component tested in the online offline calibration test has a valid component type.
        /// </summary>
        public static bool? OocTestComponentTypeValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("OOC_Test_Component_Type_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("OOC_Test_Component_Type_Valid", value);
            }
        }
        
        /// <summary>
        /// All online offline calibration tests for the component.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryOnoffRow> OocTestRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("OOC_Test_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryOnoffRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("OOC_Test_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("OOC_Test_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The percent of span value of the reference value of a upscale injection of a online offline calibration test.
        /// </summary>
        public static decimal? OocUpscaleReferenceValuePercentOfSpan
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("OOC_Upscale_Reference_Value_Percent_Of_Span")));
            }
            set
            {
                QaParameters.SetCheckParameter("OOC_Upscale_Reference_Value_Percent_Of_Span", value);
            }
        }
        
        /// <summary>
        /// The percent of span value of the reference value of a zero level injection of a online offline calibration test.
        /// </summary>
        public static decimal? OocZeroReferenceValuePercentOfSpan
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("OOC_Zero_Reference_Value_Percent_Of_Span")));
            }
            set
            {
                QaParameters.SetCheckParameter("OOC_Zero_Reference_Value_Percent_Of_Span", value);
            }
        }
        
        /// <summary>
        /// Operating Level Code Lookup Table where op level code is equal to H, L, M, or N.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.OperatingLevelCodeRow> OperatingLevelCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Operating_Level_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.OperatingLevelCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Operating_Level_Code_Lookup_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Operating_Level_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The overall BAF for a RATA.
        /// </summary>
        public static decimal? OverallBaf
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Overall_BAF")));
            }
            set
            {
                QaParameters.SetCheckParameter("Overall_BAF", value);
            }
        }
        
        /// <summary>
        /// The calculated relative accuracy for the RATA.
        /// </summary>
        public static decimal? OverallRelativeAccuracy
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Overall_Relative_Accuracy")));
            }
            set
            {
                QaParameters.SetCheckParameter("Overall_Relative_Accuracy", value);
            }
        }
        
        /// <summary>
        /// Lists all combinations of valid Parameter Codes and  Units of Measure codes with min and max values.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.ParameterUomRow> ParameterUnitsOfMeasureLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Parameter_Units_Of_Measure_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.ParameterUomRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Parameter_Units_Of_Measure_Lookup_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Parameter_Units_Of_Measure_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// A lookup table of Pressure Measure Codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.PressureMeasureCodeRow> PressureMeasureCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Pressure_Measure_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.PressureMeasureCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Pressure_Measure_Code_Lookup_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Pressure_Measure_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the average NOx emission rate was calculated for the previous operating level of a unit default test.  
        /// </summary>
        public static bool? PreviousUnitDefaultLevelCalculated
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Previous_Unit_Default_Level_Calculated")));
            }
            set
            {
                QaParameters.SetCheckParameter("Previous_Unit_Default_Level_Calculated", value);
            }
        }
        
        /// <summary>
        /// Indicates whether approval was requested for a protocol gas record with a non-standard set of components.
        /// </summary>
        public static bool? ProtocolGasApprovalRequested
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Protocol_Gas_Approval_Requested")));
            }
            set
            {
                QaParameters.SetCheckParameter("Protocol_Gas_Approval_Requested", value);
            }
        }
        
        /// <summary>
        /// Contains the list of gas component codes in a Protocol Gas row that are balance components.
        /// </summary>
        public static string ProtocolGasBalanceComponentList
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Protocol_Gas_Balance_Component_List")));
            }
            set
            {
                QaParameters.SetCheckParameter("Protocol_Gas_Balance_Component_List", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the Gas Component Code list stored in the Gas Type Code is valid.
        /// </summary>
        public static bool? ProtocolGasComponentListValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Protocol_Gas_Component_List_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Protocol_Gas_Component_List_Valid", value);
            }
        }
        
        /// <summary>
        /// Contains the Cylinder ID in a protocol gas row
        /// </summary>
        public static string ProtocolGasCylinderIdList
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Protocol_Gas_Cylinder_ID_List")));
            }
            set
            {
                QaParameters.SetCheckParameter("Protocol_Gas_Cylinder_ID_List", value);
            }
        }
        
        /// <summary>
        /// Contains the list of gas component codes in a Protocol Gas row that are duplicates.
        /// </summary>
        public static string ProtocolGasDuplicateComponentList
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Protocol_Gas_Duplicate_Component_List")));
            }
            set
            {
                QaParameters.SetCheckParameter("Protocol_Gas_Duplicate_Component_List", value);
            }
        }
        
        /// <summary>
        /// A list of gases (type + level) used in the test.
        /// </summary>
        public static string ProtocolGases
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Protocol_Gases")));
            }
            set
            {
                QaParameters.SetCheckParameter("Protocol_Gases", value);
            }
        }
        
        /// <summary>
        /// Contains the list of gas component codes in a Protocol Gas row that a source should only use exclusive of other gas component codes.
        /// </summary>
        public static string ProtocolGasExclusiveComponentList
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Protocol_Gas_Exclusive_Component_List")));
            }
            set
            {
                QaParameters.SetCheckParameter("Protocol_Gas_Exclusive_Component_List", value);
            }
        }
        
        /// <summary>
        /// Contains the list of invalid Gas Component Codes.
        /// </summary>
        public static string ProtocolGasInvalidComponentList
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Protocol_Gas_Invalid_Component_List")));
            }
            set
            {
                QaParameters.SetCheckParameter("Protocol_Gas_Invalid_Component_List", value);
            }
        }
        
        /// <summary>
        /// The ComponentTypeCode or RATA Reference Method of the test associated with the Protocol Gas record.
        /// </summary>
        public static string ProtocolGasParameter
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Protocol_Gas_Parameter")));
            }
            set
            {
                QaParameters.SetCheckParameter("Protocol_Gas_Parameter", value);
            }
        }
        
        /// <summary>
        /// A lookup table of Protocol Gas Vendors.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.ProtocolGasVendorRow> ProtocolGasVendorLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Protocol_Gas_Vendor_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.ProtocolGasVendorRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Protocol_Gas_Vendor_Lookup_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Protocol_Gas_Vendor_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if type of system or component is appropriate for the event code.
        /// </summary>
        public static bool? QaCertEventAndTypeConsistent
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("QA_Cert_Event_and_Type_Consistent")));
            }
            set
            {
                QaParameters.SetCheckParameter("QA_Cert_Event_and_Type_Consistent", value);
            }
        }
        
        /// <summary>
        /// The ComponentTypeCode of the component in the QA Cert Event record.
        /// </summary>
        public static string QaCertEventComponentType
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("QA_Cert_Event_Component_Type")));
            }
            set
            {
                QaParameters.SetCheckParameter("QA_Cert_Event_Component_Type", value);
            }
        }
        
        /// <summary>
        /// A list of TestTypeCodes required for a QA Cert Event but not included in the RequiredTestCode.
        /// </summary>
        public static string QaCertEventMissingTestTypes
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("QA_Cert_Event_Missing_Test_Types")));
            }
            set
            {
                QaParameters.SetCheckParameter("QA_Cert_Event_Missing_Test_Types", value);
            }
        }
        
        /// <summary>
        /// Code which indicates if the MonitoringSystemID or ComponentID or both are must be reported in the event record based on RequiredTestCode.
        /// </summary>
        public static string QaCertEventRequiredIdCode
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("QA_Cert_Event_Required_ID_Code")));
            }
            set
            {
                QaParameters.SetCheckParameter("QA_Cert_Event_Required_ID_Code", value);
            }
        }
        
        /// <summary>
        /// The SystemTypeCode of the monitoring system in the QA Cert Event record.
        /// </summary>
        public static string QaCertEventSystemType
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("QA_Cert_Event_System_Type")));
            }
            set
            {
                QaParameters.SetCheckParameter("QA_Cert_Event_System_Type", value);
            }
        }
        
        /// <summary>
        /// Code which type of system or component is appropriate for the event record based on RequiredTestCode.
        /// </summary>
        public static string QaCertEventValidSystemOrComponent
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("QA_Cert_Event_Valid_System_Or_Component")));
            }
            set
            {
                QaParameters.SetCheckParameter("QA_Cert_Event_Valid_System_Or_Component", value);
            }
        }
        
        /// <summary>
        /// The QA Certification Event records for the location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow> QaCertificationEventRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Qa_Certification_Event_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaCertEventRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Qa_Certification_Event_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Qa_Certification_Event_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The QA Supplemental Attribute records for the location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppAttributeRow> QaSupplementalAttributeRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("QA_Supplemental_Attribute_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppAttributeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("QA_Supplemental_Attribute_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("QA_Supplemental_Attribute_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The QA Supplemental Data records for the location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataRow> QaSupplementalDataRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("QA_Supplemental_Data_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("QA_Supplemental_Data_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("QA_Supplemental_Data_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// RATA is aborted
        /// </summary>
        public static bool? RataAborted
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Aborted")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Aborted", value);
            }
        }
        
        /// <summary>
        /// Indicates if the replacement velocity of the traverse point was added to the sum of the adjusted velocities for the run of a flow RATA.
        /// </summary>
        public static bool? RataAdjustedVelocityDetermined
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Adjusted_Velocity_Determined")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Adjusted_Velocity_Determined", value);
            }
        }
        
        /// <summary>
        /// Indicates if the adjusted calculated WAF for the run of a flow RATA has been determined.
        /// </summary>
        public static bool? RataAdjustedWafDetermined
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Adjusted_WAF_Determined")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Adjusted_WAF_Determined", value);
            }
        }
        
        /// <summary>
        /// The WAF applied to the runs for the operating level of a Method 2H flow RATA.
        /// </summary>
        public static decimal? RataApplicableWaf
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Applicable_WAF")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Applicable_WAF", value);
            }
        }
        
        /// <summary>
        /// Earlies run Begin Date of RATA
        /// </summary>
        public static DateTime? RataBeginDate
        {
            get
            {
                return ((DateTime?)(QaParameters.GetCheckParameter("RATA_Begin_Date")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// Earliest run Begin Hour of RATA
        /// </summary>
        public static int? RataBeginHour
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("RATA_Begin_Hour")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Begin_Hour", value);
            }
        }
        
        /// <summary>
        /// Earlies Run Begin Minute of RATA.
        /// </summary>
        public static int? RataBeginMinute
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("RATA_Begin_Minute")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Begin_Minute", value);
            }
        }
        
        /// <summary>
        /// The recalculated average run velocity adjusted for wall effects for a method 2FH, 2GH, or M2H flow RATA.
        /// </summary>
        public static decimal? RataCalcAdjustedRunVelocity
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Adjusted_Run_Velocity")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Adjusted_Run_Velocity", value);
            }
        }
        
        /// <summary>
        /// The recalculated APS indicator of the operating level of a RATA.
        /// </summary>
        public static int? RataCalcAps
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("RATA_Calc_APS")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_APS", value);
            }
        }
        
        /// <summary>
        /// The recalculated stack area for a method 2F, 2G, or M2H flow RATA.
        /// </summary>
        public static decimal? RataCalcArea
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Area")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Area", value);
            }
        }
        
        /// <summary>
        /// The recalculated average velocity adjusted for wall effects for the run of a flow RATA.
        /// </summary>
        public static decimal? RataCalcAverageAdjustedVelocity
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Average_Adjusted_Velocity")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Average_Adjusted_Velocity", value);
            }
        }
        
        /// <summary>
        /// The recalculated average gross unit load of the operating level of a RATA.
        /// </summary>
        public static decimal? RataCalcAverageGul
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Average_GUL")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Average_GUL", value);
            }
        }
        
        /// <summary>
        /// The recalculated stack flow for the run of a flow RATA.
        /// </summary>
        public static decimal? RataCalcAverageStackFlow
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Average_Stack_Flow")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Average_Stack_Flow", value);
            }
        }
        
        /// <summary>
        /// The recalculated stack flow for the run of a Method 2H flow RATA.
        /// </summary>
        public static decimal? RataCalcAverageStackFlow2H
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Rata_Calc_Average_Stack_Flow_2H")));
            }
            set
            {
                QaParameters.SetCheckParameter("Rata_Calc_Average_Stack_Flow_2H", value);
            }
        }
        
        /// <summary>
        /// The recalculated average velocity (without wall effects) of a flow RATA run.
        /// </summary>
        public static decimal? RataCalcAverageVelocity
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Average_Velocity")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Average_Velocity", value);
            }
        }
        
        /// <summary>
        /// The recalculated bias adjustment factor of the operating level of a RATA.
        /// </summary>
        public static decimal? RataCalcBaf
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_BAF")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_BAF", value);
            }
        }
        
        /// <summary>
        /// The recalculated CalculatedWAF for the run of a flow RATA.
        /// </summary>
        public static decimal? RataCalcCalculatedWaf
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Calculated_WAF")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Calculated_WAF", value);
            }
        }
        
        /// <summary>
        /// The recalculated confidence coefficient of the operating level of a RATA.
        /// </summary>
        public static decimal? RataCalcCc
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_CC")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_CC", value);
            }
        }
        
        /// <summary>
        /// The recalculated dry molecular weight for the Flow RATA run.
        /// </summary>
        public static decimal? RataCalcDryMolecularWeight
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Dry_Molecular_Weight")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Dry_Molecular_Weight", value);
            }
        }
        
        /// <summary>
        /// The recalculated dry molecular weight for a method 2F, 2G, or M2H flow RATA.
        /// </summary>
        public static decimal? RataCalcDryMw
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Dry_MW")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Dry_MW", value);
            }
        }
        
        /// <summary>
        /// The recalculated CalculatedWAF for the operating level of a flow RATA.
        /// </summary>
        public static decimal? RataCalcLevelWaf
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Level_WAF")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Level_WAF", value);
            }
        }
        
        /// <summary>
        /// The recalculated mean CEM value of the operating level of a RATA.
        /// </summary>
        public static decimal? RataCalcMeanCem
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Mean_CEM")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Mean_CEM", value);
            }
        }
        
        /// <summary>
        /// The recalculated mean difference of the operating level of a RATA.
        /// </summary>
        public static decimal? RataCalcMeanDiff
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Mean_Diff")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Mean_Diff", value);
            }
        }
        
        /// <summary>
        /// The recalculated mean reference value of the operating level of a RATA.
        /// </summary>
        public static decimal? RataCalcMeanRv
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Mean_RV")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Mean_RV", value);
            }
        }
        
        /// <summary>
        /// The recalculated overall bias adjustment factor of the RATA.
        /// </summary>
        public static decimal? RataCalcOverallBaf
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Overall_BAF")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Overall_BAF", value);
            }
        }
        
        /// <summary>
        /// The recalculated overall relative accuracy of the RATA.
        /// </summary>
        public static decimal? RataCalcOverallRata
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Overall_RATA")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Overall_RATA", value);
            }
        }
        
        /// <summary>
        /// The WAF for the Operating Level as calculated by the software.
        /// </summary>
        public static decimal? RataCalcOverallWaf
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Overall_WAF")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Overall_WAF", value);
            }
        }
        
        /// <summary>
        /// The recalculated traverse point velocity for a method 2F, 2G, or M2H flow RATA.
        /// </summary>
        public static decimal? RataCalcPointVelocity
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Point_Velocity")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Point_Velocity", value);
            }
        }
        
        /// <summary>
        /// The recalculated relative accuracy of the operating level of a RATA.
        /// </summary>
        public static decimal? RataCalcRa
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_RA")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_RA", value);
            }
        }
        
        /// <summary>
        /// The recalculated average stack flow rate (run reference value) of a method 2F, 2G, or M2H flow RATA.
        /// </summary>
        public static decimal? RataCalcRunRv
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Run_RV")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Run_RV", value);
            }
        }
        
        /// <summary>
        /// The recalculated average run velocity for a method 2F, 2G, or M2H flow RATA.
        /// </summary>
        public static decimal? RataCalcRunVelocity
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Run_Velocity")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Run_Velocity", value);
            }
        }
        
        /// <summary>
        /// The recalculated WAF for the run of a method 2FH, 2GH, or M2H flow RATA.
        /// </summary>
        public static decimal? RataCalcRunWaf
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Run_WAF")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Run_WAF", value);
            }
        }
        
        /// <summary>
        /// The recalculated standard deviation of the differences of the operating level of a RATA.
        /// </summary>
        public static decimal? RataCalcSd
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_SD")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_SD", value);
            }
        }
        
        /// <summary>
        /// The recalculated stack area for the method 2F, 2G, or 2H RATA.
        /// </summary>
        public static decimal? RataCalcStackArea
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Stack_Area")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Stack_Area", value);
            }
        }
        
        /// <summary>
        /// The calculated stack pressure for the run of a flow RATA.
        /// </summary>
        public static decimal? RataCalcStackPressure
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Stack_Pressure")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Stack_Pressure", value);
            }
        }
        
        /// <summary>
        /// The TValue based on the number of runs in the operating level of a RATA.
        /// </summary>
        public static decimal? RataCalcTvalue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_TValue")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_TValue", value);
            }
        }
        
        /// <summary>
        /// Indicates if the CalculatedWAF for the run of a flow RATA can be recalculated.
        /// </summary>
        public static bool? RataCalculatedWafValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Calculated_WAF_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calculated_WAF_Valid", value);
            }
        }
        
        /// <summary>
        /// The recalculated wet molecular weight for the Flow RATA run.
        /// </summary>
        public static decimal? RataCalcWetMolecularWeight
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Wet_Molecular_Weight")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Wet_Molecular_Weight", value);
            }
        }
        
        /// <summary>
        /// The recalculated dry molecular weight for a method 2F, 2G, or M2H flow RATA.
        /// </summary>
        public static decimal? RataCalcWetMw
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Calc_Wet_MW")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Calc_Wet_MW", value);
            }
        }
        
        /// <summary>
        /// Indicates if WAF for the Operating Level should be calculated.
        /// </summary>
        public static bool? RataCheckWaf
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Check_WAF")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Check_WAF", value);
            }
        }
        
        /// <summary>
        /// An exemption code associated with the RATA.
        /// </summary>
        public static string RataClaimCode
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("RATA_Claim_Code")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Claim_Code", value);
            }
        }
        
        /// <summary>
        /// Indicates if the Test Claim Code for a RATA is valid.
        /// </summary>
        public static bool? RataClaimCodeValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Claim_Code_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Claim_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// Last run End Date of RATA
        /// </summary>
        public static DateTime? RataEndDate
        {
            get
            {
                return ((DateTime?)(QaParameters.GetCheckParameter("RATA_End_Date")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_End_Date", value);
            }
        }
        
        /// <summary>
        /// Last run End Hour of RATA
        /// </summary>
        public static int? RataEndHour
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("RATA_End_Hour")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_End_Hour", value);
            }
        }
        
        /// <summary>
        /// Last run End Minute of RATA.
        /// </summary>
        public static int? RataEndMinute
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("RATA_End_Minute")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_End_Minute", value);
            }
        }
        
        /// <summary>
        /// Code that indicates the expiration date of the RATA based on calculated results.
        /// </summary>
        public static string RataFrequency
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("RATA_Frequency")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Frequency", value);
            }
        }
        
        /// <summary>
        /// RATA Frequency Code Lookup Table
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.RataFrequencyCodeRow> RataFrequencyCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("RATA_Frequency_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.RataFrequencyCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("RATA_Frequency_Code_Lookup_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("RATA_Frequency_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Dummy variable to create proper order of checks.
        /// </summary>
        public static bool? RataFrequencyDetermined
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Frequency_Determined")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Frequency_Determined", value);
            }
        }
        
        /// <summary>
        /// The frequently used operating levels at which a flow RATA was performed.
        /// </summary>
        public static string RataFrequentlyUsedLevels
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("RATA_Frequently_Used_Levels")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Frequently_Used_Levels", value);
            }
        }
        
        /// <summary>
        /// The higher to two operating levels in a multi-level RATA.
        /// </summary>
        public static string RataHigherLevel
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("RATA_Higher_Level")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Higher_Level", value);
            }
        }
        
        /// <summary>
        /// A list of invalid probe types used in a flow RATA.
        /// </summary>
        public static string RataInvalidProbes
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Rata_Invalid_Probes")));
            }
            set
            {
                QaParameters.SetCheckParameter("Rata_Invalid_Probes", value);
            }
        }
        
        /// <summary>
        /// A comma delimited list of the operating levels in the RATA.
        /// </summary>
        public static string RataLevelList
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("RATA_Level_List")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Level_List", value);
            }
        }
        
        /// <summary>
        /// Indicates whether calculations can be performed for the operating level of a RATA.
        /// </summary>
        public static bool? RataLevelValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Level_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Level_Valid", value);
            }
        }
        
        /// <summary>
        /// The maximum number of traverse points in the flow RATA runs used to calculate the wall effects adjustment factor.
        /// </summary>
        public static int? RataMaximumTraversePointCount
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("RATA_Maximum_Traverse_Point_Count")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Maximum_Traverse_Point_Count", value);
            }
        }
        
        /// <summary>
        /// The maximum number of traverse points in all runs of the operating level of a flow RATA.
        /// </summary>
        public static int? RataMaximumTraversePointCountForAllRuns
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("RATA_Maximum_Traverse_Point_Count_for_All_Runs")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Maximum_Traverse_Point_Count_for_All_Runs", value);
            }
        }
        
        /// <summary>
        /// The minimum number of traverse points in the flow RATA runs used to calculate the wall effects adjustment factor.
        /// </summary>
        public static int? RataMinimumTraversePointCount
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("RATA_Minimum_Traverse_Point_Count")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Minimum_Traverse_Point_Count", value);
            }
        }
        
        /// <summary>
        /// The minimum number of wall points used to calculate the replacement velocity in the exterior method 1 traverse points in the run of a flow RATA.
        /// </summary>
        public static int? RataMinimumWallPoints
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("RATA_Minimum_Wall_Points")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Minimum_Wall_Points", value);
            }
        }
        
        /// <summary>
        /// The number of different operating levels in the run records of a RATA.
        /// </summary>
        public static int? RataNumberOfLoadLevels
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("RATA_Number_of_Load_Levels")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Number_of_Load_Levels", value);
            }
        }
        
        /// <summary>
        /// Indicates if the Operating Level Code for a RATA Summary and children records is valid.
        /// </summary>
        public static bool? RataOperatingLevelValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Operating_Level_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Operating_Level_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if PercentCO2 in the Flow RATA Run record is valid.
        /// </summary>
        public static bool? RataPercentCo2Valid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Percent_CO2_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Percent_CO2_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if PercentMoisture in the Flow RATA Run record is valid.
        /// </summary>
        public static bool? RataPercentMoistureValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Percent_Moisture_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Percent_Moisture_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if PercentO2 in the Flow RATA Run record is valid.
        /// </summary>
        public static bool? RataPercentO2Valid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Percent_O2_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Percent_O2_Valid", value);
            }
        }
        
        /// <summary>
        /// The probe types associated with the RATA Run.
        /// </summary>
        public static string RataProbeTypes
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("RATA_Probe_Types")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Probe_Types", value);
            }
        }
        
        /// <summary>
        /// All RATA Test Summary records for the monitoring system.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow> RataRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("RATA_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("RATA_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("RATA_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The rectangular duct WAF for a location.
        /// </summary>
        public static decimal? RataRectangularDuctWaf
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Rectangular_Duct_WAF")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Rectangular_Duct_WAF", value);
            }
        }
        
        /// <summary>
        /// Indicates if RATA Reference Method Code is valid.
        /// </summary>
        public static bool? RataReferenceMethodValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Reference_Method_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Reference_Method_Valid", value);
            }
        }
        
        /// <summary>
        /// The Reference Method Code for the RATA.  (Note: This is used to check Protocol Gas record, so it only applies to one-level RATAs.)
        /// </summary>
        public static string RataRefMethodCode
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("RATA_Ref_Method_Code")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Ref_Method_Code", value);
            }
        }
        
        /// <summary>
        /// The number of method 1 traverse points in a run of a flow RATA which are used to calculate the replacement velocity.
        /// </summary>
        public static int? RataReplacementPointCount
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("RATA_Replacement_Point_Count")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Replacement_Point_Count", value);
            }
        }
        
        /// <summary>
        /// Calculated RATA result.
        /// </summary>
        public static string RataResult
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("RATA_Result")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Result", value);
            }
        }
        
        /// <summary>
        /// Indicates if the Begin Date, Hour, and Minute for a RATA run are valid.
        /// </summary>
        public static bool? RataRunBeginTimeValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Run_Begin_Time_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Run_Begin_Time_Valid", value);
            }
        }
        
        /// <summary>
        /// Number of runs used in an operating level of a RATA.
        /// </summary>
        public static int? RataRunCount
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("RATA_Run_Count")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Run_Count", value);
            }
        }
        
        /// <summary>
        /// Indicates if the end date/hour/minutes in the RATA run record is valid.
        /// </summary>
        public static bool? RataRunEndTimeValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Run_End_Time_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Run_End_Time_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the Run Number for a RATA Run and children records is valid.
        /// </summary>
        public static bool? RataRunNumberValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Run_Number_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Run_Number_Valid", value);
            }
        }
        
        /// <summary>
        /// All Run records associated with a RATA.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaRataRunRow> RataRunRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("RATA_Run_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaRataRunRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("RATA_Run_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("RATA_Run_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the reported Run Begin and End Date/Hour/Minute of a RATA are consistent.
        /// </summary>
        public static bool? RataRunTimesValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Run_Times_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Run_Times_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if stack diameter is valid for a flow RATA
        /// </summary>
        public static bool? RataStackDiameterValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Stack_Diameter_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Stack_Diameter_Valid", value);
            }
        }
        
        /// <summary>
        /// An array of the stack flow rates for all the runs of a Method 2H RATA.
        /// </summary>
        public static decimal? RataStackFlowArray
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Stack_Flow_Array")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Stack_Flow_Array", value);
            }
        }
        
        /// <summary>
        /// The sum of the velocities adjusted for wall effects for a run of a flow RATA.
        /// </summary>
        public static decimal? RataSumAdjustedVelocity
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Sum_Adjusted_Velocity")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Sum_Adjusted_Velocity", value);
            }
        }
        
        /// <summary>
        /// Sum of the CEM values in the operating level of a RATA.
        /// </summary>
        public static decimal? RataSumCemValues
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Sum_CEM_Values")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Sum_CEM_Values", value);
            }
        }
        
        /// <summary>
        /// Sum of differences between the CEM value and reference value in the operating level of a RATA
        /// </summary>
        public static decimal? RataSumDifferences
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Sum_Differences")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Sum_Differences", value);
            }
        }
        
        /// <summary>
        /// Sum of the average gross unit loads in the operating level of a RATA.
        /// </summary>
        public static decimal? RataSumGrossUnitLoad
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Sum_Gross_Unit_Load")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Sum_Gross_Unit_Load", value);
            }
        }
        
        /// <summary>
        /// Indicates if alternate performance specification was used to evaluate the results of the operating level of a RATA.
        /// </summary>
        public static int? RataSummaryApsIndicator
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("RATA_Summary_APS_Indicator")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Summary_APS_Indicator", value);
            }
        }
        
        /// <summary>
        /// The calculated average gross unit load for the operating level of a RATA.
        /// </summary>
        public static decimal? RataSummaryAverageGrossUnitLoad
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Summary_Average_Gross_Unit_Load")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Summary_Average_Gross_Unit_Load", value);
            }
        }
        
        /// <summary>
        /// The bias adjustment factor calculated for an operating level of a RATA.
        /// </summary>
        public static decimal? RataSummaryBaf
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Summary_BAF")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Summary_BAF", value);
            }
        }
        
        /// <summary>
        /// The confidence cofficient calculated from the runs of a RATA.
        /// </summary>
        public static decimal? RataSummaryConfidenceCoefficient
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Summary_Confidence_Coefficient")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Summary_Confidence_Coefficient", value);
            }
        }
        
        /// <summary>
        /// Mean of the CEM values in the operating level of a RATA.
        /// </summary>
        public static decimal? RataSummaryMeanCemValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Summary_Mean_CEM_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Summary_Mean_CEM_Value", value);
            }
        }
        
        /// <summary>
        /// Mean of the differences between the reference value and CEM value in the operating level of a RATA.
        /// </summary>
        public static decimal? RataSummaryMeanDifference
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Summary_Mean_Difference")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Summary_Mean_Difference", value);
            }
        }
        
        /// <summary>
        /// Mean of the reference values in the operating level of a RATA.
        /// </summary>
        public static decimal? RataSummaryMeanReferenceValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Summary_Mean_Reference_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Summary_Mean_Reference_Value", value);
            }
        }
        
        /// <summary>
        /// All Summary records associated with a RATA.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaRataSummaryRow> RataSummaryRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("RATA_Summary_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaRataSummaryRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("RATA_Summary_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("RATA_Summary_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The relative accuracy calculated for an operating level of a RATA.
        /// </summary>
        public static decimal? RataSummaryRelativeAccuracy
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Summary_Relative_Accuracy")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Summary_Relative_Accuracy", value);
            }
        }
        
        /// <summary>
        /// The standard deviation of the differences calculated from the runs of a RATA.
        /// </summary>
        public static decimal? RataSummaryStandardDeviation
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Summary_Standard_Deviation")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Summary_Standard_Deviation", value);
            }
        }
        
        /// <summary>
        /// The T-Value based on the number of runs of a RATA.
        /// </summary>
        public static decimal? RataSummaryTvalue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Summary_TValue")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Summary_TValue", value);
            }
        }
        
        /// <summary>
        /// Sum of the reference values in the operating level of a RATA.
        /// </summary>
        public static decimal? RataSumReferenceValues
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Sum_Reference_Values")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Sum_Reference_Values", value);
            }
        }
        
        /// <summary>
        /// Sum of the squares of the differences between the CEM value and reference value in the operating level of a RATA
        /// </summary>
        public static decimal? RataSumSquareDifferences
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Sum_Square_Differences")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Sum_Square_Differences", value);
            }
        }
        
        /// <summary>
        /// The sum of the stack temperatures of all traverse points in a flow RATA run.
        /// </summary>
        public static decimal? RataSumTemperature
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Sum_Temperature")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Sum_Temperature", value);
            }
        }
        
        /// <summary>
        /// The calculated average velocity without wall effects of all traverse points in a flow RATA run.
        /// </summary>
        public static decimal? RataSumVelocity
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Sum_Velocity")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Sum_Velocity", value);
            }
        }
        
        /// <summary>
        /// Sum of calculated WAFs in an operating level of a RATA.
        /// </summary>
        public static decimal? RataSumWaf
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Sum_WAF")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Sum_WAF", value);
            }
        }
        
        /// <summary>
        /// The ID of the QA Supp Data record associated with the RATA.
        /// </summary>
        public static string RataSuppDataId
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("RATA_Supp_Data_ID")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Supp_Data_ID", value);
            }
        }
        
        /// <summary>
        /// Indicates if system type is valid for the RATA
        /// </summary>
        public static bool? RataSystemValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_System_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_System_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the Test Claim Code of a RATA is valid.
        /// </summary>
        public static bool? RataTestClaimCodeValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Test_Claim_Code_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Test_Claim_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// The recalculated RATA Traverse velocity (without wall effects).
        /// </summary>
        public static decimal? RataTraverseCalcVelocity
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("RATA_Traverse_Calc_Velocity")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Traverse_Calc_Velocity", value);
            }
        }
        
        /// <summary>
        /// The number of method 1 traverse points in a run of a flow RATA.
        /// </summary>
        public static int? RataTraversePointCount
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Rata_Traverse_Point_Count")));
            }
            set
            {
                QaParameters.SetCheckParameter("Rata_Traverse_Point_Count", value);
            }
        }
        
        /// <summary>
        /// Indicates if the RATA Traverse Point IDs consist of three alphanumeric characters.
        /// </summary>
        public static bool? RataTraversePointIdValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Traverse_Point_ID_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Traverse_Point_ID_Valid", value);
            }
        }
        
        /// <summary>
        /// All RATA Traverse records associated with a RATA.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaRataTraverseRow> RataTraverseRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("RATA_Traverse_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaRataTraverseRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("RATA_Traverse_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("RATA_Traverse_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if RATA Traverse data is valid.
        /// </summary>
        public static bool? RataTraverseValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Traverse_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Traverse_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if all validity checks have been performed prior to recalculating traverse velocity.
        /// </summary>
        public static bool? RataTraverseValidityDetermined
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Traverse_Validity_Determined")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Traverse_Validity_Determined", value);
            }
        }
        
        /// <summary>
        /// Number of runs not used in an operating level of a RATA.
        /// </summary>
        public static int? RataUnusedRunCount
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("RATA_Unused_Run_Count")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Unused_Run_Count", value);
            }
        }
        
        /// <summary>
        /// Indicates if WAF for Operating was calculated.  Used for leveling.
        /// </summary>
        public static bool? RataWafCalculated
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_WAF_Calculated")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_WAF_Calculated", value);
            }
        }
        
        /// <summary>
        /// Number of runs used in an operating level of a RATA to calculate the WAF.
        /// </summary>
        public static int? RataWafRunCount
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("RATA_WAF_Run_Count")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_WAF_Run_Count", value);
            }
        }
        
        /// <summary>
        /// The RunNumbers of all RATA runs for the operating level that contained wall effects data.
        /// </summary>
        public static string RataWafRunNumbers
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("RATA_WAF_Run_Numbers")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_WAF_Run_Numbers", value);
            }
        }
        
        /// <summary>
        /// The number of traverse points in the rectangular duct WAF test.
        /// </summary>
        public static int? RataWafTestTraversePointCount
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("RATA_WAF_Test_Traverse_Point_Count")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_WAF_Test_Traverse_Point_Count", value);
            }
        }
        
        /// <summary>
        /// Indicates if the number of wall points used to determine the replacement velocity are the same for all exterior method 1 traverse points in the run of a flow RATA.
        /// </summary>
        public static bool? RataWallPointsConsistent
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Wall_Points_Consistent")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Wall_Points_Consistent", value);
            }
        }
        
        /// <summary>
        /// Indicates if a zero value was reported for the reference or measured value in a RATA.
        /// </summary>
        public static bool? RataZeroValue
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("RATA_Zero_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("RATA_Zero_Value", value);
            }
        }
        
        /// <summary>
        /// The Rectangular Duct WAF records for the location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwRectDuctWafRow> RectangularDuctWafRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Rectangular_Duct_WAF_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwRectDuctWafRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Rectangular_Duct_WAF_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Rectangular_Duct_WAF_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Lookup table for Reference Method Codes for RATA.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.RefMethodCodeRow> ReferenceMethodCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Reference_Method_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.RefMethodCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Reference_Method_Code_Lookup_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Reference_Method_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether MonitoringSystemID, ComponentID, or both must be reported in the QA certification event record based on the RequiredTestCode.  Also determines system/component types appropriate for the test code.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.RequiredTestCodeToRequiredIdAndSystemOrComponentTypeRow> RequiredTestCodeToRequiredIdAndSystemOrComponentTypeCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Required_Test_Code_to_Required_ID_and_System_or_Component_Type_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.RequiredTestCodeToRequiredIdAndSystemOrComponentTypeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Required_Test_Code_to_Required_ID_and_System_or_Component_Type_Cross_Check_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Required_Test_Code_to_Required_ID_and_System_or_Component_Type_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if all CEM and Reference Values in a Flow RATA were rounded to the nearest 1000 scfh.
        /// </summary>
        public static bool? RoundedFlowRataValues
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Rounded_Flow_RATA_Values")));
            }
            set
            {
                QaParameters.SetCheckParameter("Rounded_Flow_RATA_Values", value);
            }
        }
        
        /// <summary>
        /// The recalculated APS indicator for the upscale injection.
        /// </summary>
        public static bool? SevenDayUpscaleCalcAps
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("7DAY_Upscale_Calc_APS")));
            }
            set
            {
                QaParameters.SetCheckParameter("7DAY_Upscale_Calc_APS", value);
            }
        }
        
        /// <summary>
        /// The recalculated result (CE or Diff) for the upscale injection.
        /// </summary>
        public static decimal? SevenDayUpscaleCalcResult
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("7DAY_Upscale_Calc_Result")));
            }
            set
            {
                QaParameters.SetCheckParameter("7DAY_Upscale_Calc_Result", value);
            }
        }
        
        /// <summary>
        /// A dummy parameter.
        /// </summary>
        public static int? SevenDayUpscaleInjectionValidated
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("7DAY_Upscale_Injection_Validated")));
            }
            set
            {
                QaParameters.SetCheckParameter("7DAY_Upscale_Injection_Validated", value);
            }
        }
        
        /// <summary>
        /// The recalculated APS indicator for the zero injection.
        /// </summary>
        public static int? SevenDayZeroCalcAps
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("7DAY_Zero_Calc_APS")));
            }
            set
            {
                QaParameters.SetCheckParameter("7DAY_Zero_Calc_APS", value);
            }
        }
        
        /// <summary>
        /// The recalculated result (CE or Diff) for the zero injection.
        /// </summary>
        public static decimal? SevenDayZeroCalcResult
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("7DAY_Zero_Calc_Result")));
            }
            set
            {
                QaParameters.SetCheckParameter("7DAY_Zero_Calc_Result", value);
            }
        }
        
        /// <summary>
        /// A dummy parameter.
        /// </summary>
        public static int? SevenDayZeroInjectionValidated
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("7DAY_Zero_Injection_Validated")));
            }
            set
            {
                QaParameters.SetCheckParameter("7DAY_Zero_Injection_Validated", value);
            }
        }
        
        /// <summary>
        /// Indicates if any runs in the APPE test overlapped.
        /// </summary>
        public static bool? SimultaneousAppeRuns
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Simultaneous_APPE_Runs")));
            }
            set
            {
                QaParameters.SetCheckParameter("Simultaneous_APPE_Runs", value);
            }
        }
        
        /// <summary>
        /// Indicates if an injection was conducted at the same time as an injection in another linearity check for the alternate range of a component.
        /// </summary>
        public static bool? SimultaneousLinearityInjectionForAlternateRange
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Simultaneous_Linearity_Injection_for_Alternate_Range")));
            }
            set
            {
                QaParameters.SetCheckParameter("Simultaneous_Linearity_Injection_for_Alternate_Range", value);
            }
        }
        
        /// <summary>
        /// Indicates if linearity injections were performed simultaneously.
        /// </summary>
        public static bool? SimultaneousLinearityInjections
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Simultaneous_Linearity_Injections")));
            }
            set
            {
                QaParameters.SetCheckParameter("Simultaneous_Linearity_Injections", value);
            }
        }
        
        /// <summary>
        /// Indicates if RATA runs were performed simultaneously.
        /// </summary>
        public static string SimultaneousRataRuns
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Simultaneous_RATA_Runs")));
            }
            set
            {
                QaParameters.SetCheckParameter("Simultaneous_RATA_Runs", value);
            }
        }
        
        /// <summary>
        /// Indicates if any runs in the unit default test overlapped.
        /// </summary>
        public static bool? SimultaneousUnitDefaultRuns
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Simultaneous_Unit_Default_Runs")));
            }
            set
            {
                QaParameters.SetCheckParameter("Simultaneous_Unit_Default_Runs", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the standard or alternative historical load usage data collection period was used for achieving a single-load flow claim exemption.
        /// </summary>
        public static string SlcCollectionPeriod
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("SLC_Collection_Period")));
            }
            set
            {
                QaParameters.SetCheckParameter("SLC_Collection_Period", value);
            }
        }
        
        /// <summary>
        /// Span Records at location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.MonitorSpanRow> SpanRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Span_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.MonitorSpanRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Span_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Span_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Monitor_System_Component records linked to the current component including the fields from the associated system record.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemComponentRow> SystemComponentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("System_Component_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemComponentRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("System_Component_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("System_Component_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Lookup table that stores system-wide values.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwSystemParameterRow> SystemParameterLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("System_Parameter_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwSystemParameterRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("System_Parameter_Lookup_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("System_Parameter_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All RATA Summary records for a monitoring system, including associated RATA information.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaRataSummaryRow> SystemRataSummaryRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("System_RATA_Summary_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaRataSummaryRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("System_RATA_Summary_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("System_RATA_Summary_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Monitor_System_Component records for the current system including the fields from the associated component record.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemComponentRow> SystemSystemComponentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("System_System_Component_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemComponentRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("System_System_Component_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("System_System_Component_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// A list of valid test basis codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.TestBasisCodeRow> TestBasisCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Test_Basis_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.TestBasisCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Test_Basis_Code_Lookup_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Test_Basis_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the reported begin time of a test is valid.
        /// </summary>
        public static bool? TestBeginDateValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Test_Begin_Date_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Test_Begin_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the reported begin hour of a test is valid.
        /// </summary>
        public static bool? TestBeginHourValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Test_Begin_Hour_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Test_Begin_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the reported begin minute of a test is valid.
        /// </summary>
        public static bool? TestBeginMinuteValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Test_Begin_Minute_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Test_Begin_Minute_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the reported begin time of a test is prior to its end time.
        /// </summary>
        public static bool? TestDatesConsistent
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Test_Dates_Consistent")));
            }
            set
            {
                QaParameters.SetCheckParameter("Test_Dates_Consistent", value);
            }
        }
        
        /// <summary>
        /// Indicates if the reported end date of a test os valid.
        /// </summary>
        public static bool? TestEndDateValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Test_End_Date_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Test_End_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the reported end hour of a test is valid.
        /// </summary>
        public static bool? TestEndHourValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Test_End_Hour_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Test_End_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the reported end minute of a test is valid.
        /// </summary>
        public static bool? TestEndMinuteValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Test_End_Minute_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Test_End_Minute_Valid", value);
            }
        }
        
        /// <summary>
        /// First day of quarter in test extension exemption record.
        /// </summary>
        public static DateTime? TestExtensionExemptionBeginDate
        {
            get
            {
                return ((DateTime?)(QaParameters.GetCheckParameter("Test_Extension_Exemption_Begin_Date")));
            }
            set
            {
                QaParameters.SetCheckParameter("Test_Extension_Exemption_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// End day of quarter in test extension exemption record.
        /// </summary>
        public static DateTime? TestExtensionExemptionEndDate
        {
            get
            {
                return ((DateTime?)(QaParameters.GetCheckParameter("Test_Extension_Exemption_End_Date")));
            }
            set
            {
                QaParameters.SetCheckParameter("Test_Extension_Exemption_End_Date", value);
            }
        }
        
        /// <summary>
        /// The Test Extension Exemption records for the location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestExtensionExemptionRow> TestExtensionExemptionRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Test_Extension_Exemption_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestExtensionExemptionRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Test_Extension_Exemption_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Test_Extension_Exemption_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if Test Number is valid.
        /// </summary>
        public static bool? TestNumberValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Test_Number_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Test_Number_Valid", value);
            }
        }
        
        /// <summary>
        /// All Test Qualification records associated with a RATA.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestClaimRow> TestQualificationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Test_Qualification_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestClaimRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Test_Qualification_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Test_Qualification_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// A list of valid test reason codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.TestReasonCodeRow> TestReasonCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Test_Reason_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.TestReasonCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Test_Reason_Code_Lookup_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Test_Reason_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The first day of the reporting period.
        /// </summary>
        public static DateTime? TestReportingPeriodBeginDate
        {
            get
            {
                return ((DateTime?)(QaParameters.GetCheckParameter("Test_Reporting_Period_Begin_Date")));
            }
            set
            {
                QaParameters.SetCheckParameter("Test_Reporting_Period_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// Indicates if reporting period is valid for a test.
        /// </summary>
        public static bool? TestReportingPeriodValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Test_Reporting_Period_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Test_Reporting_Period_Valid", value);
            }
        }
        
        /// <summary>
        /// A list of valid test result codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.TestResultCodeRow> TestResultCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Test_Result_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.TestResultCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Test_Result_Code_Lookup_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Test_Result_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Used for leveling.
        /// </summary>
        public static bool? TestSpanDetermined
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Test_Span_Determined")));
            }
            set
            {
                QaParameters.SetCheckParameter("Test_Span_Determined", value);
            }
        }
        
        /// <summary>
        /// Indicates if span scale of a test is a valid code.
        /// </summary>
        public static bool? TestSpanScaleValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Test_Span_Scale_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Test_Span_Scale_Valid", value);
            }
        }
        
        /// <summary>
        /// The span value for the component type of the test according to the monitoring plan.
        /// </summary>
        public static decimal? TestSpanValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Test_Span_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("Test_Span_Value", value);
            }
        }
        
        /// <summary>
        /// Acceptable tolerances between reported and calculated values for tests.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.TestTolerancesRow> TestTolerancesCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Test_Tolerances_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.TestTolerancesRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Test_Tolerances_Cross_Check_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Test_Tolerances_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates the test types that are included in the QA Cert Event required test code.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.TestTypeToRequiredTestCodeRow> TestTypeToRequiredTestCodeCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Test_Type_to_Required_Test_Code_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.TestTypeToRequiredTestCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Test_Type_to_Required_Test_Code_Cross_Check_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Test_Type_to_Required_Test_Code_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The recalculated result of a fuel flowmeter transmitter transducer test.
        /// </summary>
        public static string TransmitterTransducerTestCalcResult
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Transmitter_Transducer_Test_Calc_Result")));
            }
            set
            {
                QaParameters.SetCheckParameter("Transmitter_Transducer_Test_Calc_Result", value);
            }
        }
        
        /// <summary>
        /// Indicates if the component tested in the fuel flowmeter transmitter transducer test has a valid component type.
        /// </summary>
        public static bool? TransmitterTransducerTestComponentTypeValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Transmitter_Transducer_Test_Component_Type_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Transmitter_Transducer_Test_Component_Type_Valid", value);
            }
        }
        
        /// <summary>
        /// All fuel flowmeter transmitter transducer test summary records for the component.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryFfaccttRow> TransmitterTransducerTestRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Transmitter_Transducer_Test_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryFfaccttRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Transmitter_Transducer_Test_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Transmitter_Transducer_Test_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the result of the transmitter transducer test has been recalcuated.
        /// </summary>
        public static bool? TransmitterTransducerTestResultDetermined
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Transmitter_Transducer_Test_Result_Determined")));
            }
            set
            {
                QaParameters.SetCheckParameter("Transmitter_Transducer_Test_Result_Determined", value);
            }
        }
        
        /// <summary>
        /// A table of T-Values based on the number of runs in the RATA.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.TValuesRow> TvaluesCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("TValues_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.TValuesRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("TValues_Cross_Check_Table", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("TValues_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The sum of the reference values in the runs of the "flagged" operating level of an unit default Test.
        /// </summary>
        public static decimal? UnitDefaultFlaggedLevelSumReferenceValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Unit_Default_Flagged_Level_Sum_Reference_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Flagged_Level_Sum_Reference_Value", value);
            }
        }
        
        /// <summary>
        /// The average NOx Rate of the "flagged" operating level of a unit default test.
        ///
        /// </summary>
        public static decimal? UnitDefaultFlaggedNoxRate
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Unit_Default_Flagged_NOx_Rate")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Flagged_NOx_Rate", value);
            }
        }
        
        /// <summary>
        /// The OperatingLevelForRun in the unit default test where the RunUsedIndicator is equal to 1.
        /// </summary>
        public static string UnitDefaultFlaggedOpLevel
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Unit_Default_Flagged_Op_Level")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Flagged_Op_Level", value);
            }
        }
        
        /// <summary>
        /// Indicates if the fuel code in the Unit Default test is valid.
        /// </summary>
        public static bool? UnitDefaultFuelValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Unit_Default_Fuel_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Fuel_Valid", value);
            }
        }
        
        /// <summary>
        /// The OperatingLevelForRun with an insufficient number of runs.
        /// </summary>
        public static string UnitDefaultIncompleteLevel
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Unit_Default_Incomplete_Level")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Incomplete_Level", value);
            }
        }
        
        /// <summary>
        /// The OperatingLevelForRun in the previous unit default test run record.
        /// </summary>
        public static string UnitDefaultLastOpLevel
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Unit_Default_Last_Op_Level")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Last_Op_Level", value);
            }
        }
        
        /// <summary>
        /// The RunNumber of the previous run of the unit default test when sort in OperatingLevelForRun, RunNumber order.
        /// </summary>
        public static int? UnitDefaultLastRunNumber
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Unit_Default_Last_Run_Number")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Last_Run_Number", value);
            }
        }
        
        /// <summary>
        /// A counter fo the current operating level of an Unit default Test being evaluated.
        /// </summary>
        public static int? UnitDefaultLevelCount
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Unit_Default_Level_Count")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Level_Count", value);
            }
        }
        
        /// <summary>
        /// A counter fo the number of runs in the operating level of the Unit Default Test being evaluated.
        /// </summary>
        public static int? UnitDefaultLevelRunCount
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Unit_Default_Level_Run_Count")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Level_Run_Count", value);
            }
        }
        
        /// <summary>
        /// The sum of the reference values in the runs of an operating level of an unit default Test.
        /// </summary>
        public static decimal? UnitDefaultLevelSumReferenceValue
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Unit_Default_Level_Sum_Reference_Value")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Level_Sum_Reference_Value", value);
            }
        }
        
        /// <summary>
        /// The maximum average NOx Rate of all operating levels of a unit default test.
        ///
        /// </summary>
        public static decimal? UnitDefaultMaximumNoxRate
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Unit_Default_Maximum_NOx_Rate")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Maximum_NOx_Rate", value);
            }
        }
        
        /// <summary>
        /// Indicates if the default emission rate has been recalculated.
        /// </summary>
        public static bool? UnitDefaultNoxRateDetermined
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Unit_Default_NOx_Rate_Determined")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_NOx_Rate_Determined", value);
            }
        }
        
        /// <summary>
        /// All Run records for the Unit Default test.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaUnitDefaultTestRunRow> UnitDefaultRunRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Unit_Default_Run_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaUnitDefaultTestRunRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Unit_Default_Run_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Unit_Default_Run_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// A string of run numbers in the unit default test.
        /// </summary>
        public static string UnitDefaultRunSequence
        {
            get
            {
                return ((string)(QaParameters.GetCheckParameter("Unit_Default_Run_Sequence")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Run_Sequence", value);
            }
        }
        
        /// <summary>
        /// Indicates if the sequence of run numbers in the unit default test is consecutive.
        /// </summary>
        public static bool? UnitDefaultRunSequenceConsecutive
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Unit_Default_Run_Sequence_Consecutive")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Run_Sequence_Consecutive", value);
            }
        }
        
        /// <summary>
        /// Indicates if the sequence of run numbers in the unit default test is valid.
        /// </summary>
        public static bool? UnitDefaultRunSequenceValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Unit_Default_Run_Sequence_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Run_Sequence_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the run times in the unit default test are valid.
        /// </summary>
        public static bool? UnitDefaultRunTimesValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Unit_Default_Run_Times_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Run_Times_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if all runs in the flagged operating level of a Unit Default test are equal to 1.
        /// </summary>
        public static bool? UnitDefaultRunUsedIndicatorsConsistent
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Unit_Default_Run_Used_Indicators_Consistent")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Run_Used_Indicators_Consistent", value);
            }
        }
        
        /// <summary>
        /// The begin date of the first run of the Unit Default test.
        /// </summary>
        public static DateTime? UnitDefaultTestBeginDate
        {
            get
            {
                return ((DateTime?)(QaParameters.GetCheckParameter("Unit_Default_Test_Begin_Date")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Test_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// The begin hour of the first run of the Unit Default test.
        /// </summary>
        public static int? UnitDefaultTestBeginHour
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Unit_Default_Test_Begin_Hour")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Test_Begin_Hour", value);
            }
        }
        
        /// <summary>
        /// The begin minute of the first run of the Unit Default test.
        /// </summary>
        public static int? UnitDefaultTestBeginMinute
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Unit_Default_Test_Begin_Minute")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Test_Begin_Minute", value);
            }
        }
        
        /// <summary>
        /// The end date of the last run of the unit default test.
        /// </summary>
        public static DateTime? UnitDefaultTestEndDate
        {
            get
            {
                return ((DateTime?)(QaParameters.GetCheckParameter("Unit_Default_Test_End_Date")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Test_End_Date", value);
            }
        }
        
        /// <summary>
        /// The end hour of the last run of the unit default test.
        /// </summary>
        public static int? UnitDefaultTestEndHour
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Unit_Default_Test_End_Hour")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Test_End_Hour", value);
            }
        }
        
        /// <summary>
        /// The end minute of the last run of the unit default test.
        /// </summary>
        public static int? UnitDefaultTestEndMinute
        {
            get
            {
                return ((int?)(QaParameters.GetCheckParameter("Unit_Default_Test_End_Minute")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Test_End_Minute", value);
            }
        }
        
        /// <summary>
        /// The NOx default emission rate recalculated from the values in the runs of unit default test.
        ///
        /// </summary>
        public static decimal? UnitDefaultTestNoxRate
        {
            get
            {
                return ((decimal?)(QaParameters.GetCheckParameter("Unit_Default_Test_NOx_Rate")));
            }
            set
            {
                QaParameters.SetCheckParameter("Unit_Default_Test_NOx_Rate", value);
            }
        }
        
        /// <summary>
        /// All unit default test records for the location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryUnitdefRow> UnitDefaultTestRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Unit_Default_Test_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryUnitdefRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Unit_Default_Test_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Unit_Default_Test_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Unit Stack Configuration records for all of a facility's locations that were retrieved for the evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUnitStackConfigurationRow> UnitStackConfigurationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(QaParameters.GetCheckParameter("Unit_Stack_Configuration_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUnitStackConfigurationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    QaParameters.SetCheckParameter("Unit_Stack_Configuration_Records", null);
                }
                else
                {
                    QaParameters.SetCheckParameter("Unit_Stack_Configuration_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates that the results of the upscale injection of a 7day calibration test can be recalculated.
        /// </summary>
        public static bool? UpscaleCalibrationInjectionValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Upscale_Calibration_Injection_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Upscale_Calibration_Injection_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates that the upscale gas level code of an online offline calibration test is valid.
        /// </summary>
        public static bool? UpscaleOocGasLevelValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Upscale_OOC_Gas_Level_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Upscale_OOC_Gas_Level_Valid", value);
            }
        }
        
        /// <summary>
        /// This is used for levelling only.
        /// </summary>
        public static bool? ValidPgvpRecord
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Valid_PGVP_Record")));
            }
            set
            {
                QaParameters.SetCheckParameter("Valid_PGVP_Record", value);
            }
        }
        
        /// <summary>
        /// Indicates that the results of the zero-level injection of a 7day calibration test can be recalculated.
        /// </summary>
        public static bool? ZeroCalibrationInjectionValid
        {
            get
            {
                return ((bool?)(QaParameters.GetCheckParameter("Zero_Calibration_Injection_Valid")));
            }
            set
            {
                QaParameters.SetCheckParameter("Zero_Calibration_Injection_Valid", value);
            }
        }
        
        /// <summary>
        /// Gets the parameter value using the category property if it is not null, otherwise using the Process object if it is not null, and otherwise returning null.
        /// </summary>
        /// <param name="parameterId">The string id used to access the parameter in the check parameter collection.</param>
        /// <returns>Returns the requested check parameter as an object if it exists, and as a null if it does not.</returns>
        public static object GetCheckParameter(string parameterId)
        {
            cLegacyCheckParameter checkParameter;
            if (((QaParameters.Category == null) 
                        == false))
            {
                checkParameter = QaParameters.Category.GetCheckParameter(parameterId);
            }
            else
            {
                if (((QaParameters.Process == null) 
                            == false))
                {
                    checkParameter = QaParameters.Process.GetCheckParameter(parameterId);
                }
                else
                {
                    checkParameter = null;
                }
            }
            if ((checkParameter == null))
            {
                return null;
            }
            else
            {
                return checkParameter.ParameterValue;
            }
        }
        
        /// <summary>
        /// Sets the parameter value using the category property if it is not null, otherwise using the Process object if it is not null, and otherwise does nothing.
        /// </summary>
        /// <param name="parameterId">The string id used to access the parameter in the check parameter collection.</param>
        /// <param name="parameterValue">The value to which to set the parameter.</param>
        public static void SetCheckParameter(string parameterId, object parameterValue)
        {
            if (((QaParameters.Category == null) 
                        == false))
            {
                QaParameters.Category.SetCheckParameter(parameterId, parameterValue);
            }
            else
            {
                if (((QaParameters.Process == null) 
                            == false))
                {
                    QaParameters.Process.SetCheckParameter(parameterId, parameterValue);
                }
            }
        }
        
        /// <summary>
        /// Initializes the values in the check parameter object.
        /// </summary>
        public static void Init(cProcess process)
        {
            QaParameters._process = process;
            QaParameters.Category = null;
            QaParameters.RegisterParameters();
        }
        
        /// <summary>
        /// Registers each check parameter.
        /// </summary>
        public static void RegisterParameters()
        {
            if (((QaParameters.Process == null) 
                        || (QaParameters.Process.ProcessParameters == null)))
            {
                return;
            }
            Process.ProcessParameters.RegisterParameter(2030, "Accuracy_Specification_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(2013, "Accuracy_Test_Calc_Result");
            Process.ProcessParameters.RegisterParameter(2014, "Accuracy_Test_Component_Type_Valid");
            Process.ProcessParameters.RegisterParameter(2016, "Accuracy_Test_Method_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(2033, "Accuracy_Test_Method_Valid");
            Process.ProcessParameters.RegisterParameter(2012, "Accuracy_Test_Records");
            Process.ProcessParameters.RegisterParameter(3234, "Air_Emission_Testing_Records");
            Process.ProcessParameters.RegisterParameter(1792, "Analyzer_Range_Records");
            Process.ProcessParameters.RegisterParameter(2311, "APPE_Calc_Avg_HI_Rate");
            Process.ProcessParameters.RegisterParameter(2161, "APPE_Calc_Gas_Heat_Input");
            Process.ProcessParameters.RegisterParameter(2171, "APPE_Calc_Level_Average_HI_Rate");
            Process.ProcessParameters.RegisterParameter(2172, "APPE_Calc_Level_Mean_Reference_Value");
            Process.ProcessParameters.RegisterParameter(2312, "APPE_Calc_Mean_RV");
            Process.ProcessParameters.RegisterParameter(2152, "APPE_Calc_Oil_Heat_Input");
            Process.ProcessParameters.RegisterParameter(2162, "APPE_Calc_Oil_Mass");
            Process.ProcessParameters.RegisterParameter(2167, "APPE_Calc_Run_HI_Rate");
            Process.ProcessParameters.RegisterParameter(2126, "APPE_Calc_Run_Total_HI");
            Process.ProcessParameters.RegisterParameter(2163, "APPE_Gas_and_Oil_Systems_Consistent");
            Process.ProcessParameters.RegisterParameter(2306, "APPE_Gas_Calc_HI");
            Process.ProcessParameters.RegisterParameter(2159, "APPE_Gas_GCV_Maximum_Value");
            Process.ProcessParameters.RegisterParameter(2160, "APPE_Gas_GCV_Minimum_Value");
            Process.ProcessParameters.RegisterParameter(2114, "APPE_Gas_Records");
            Process.ProcessParameters.RegisterParameter(2123, "APPE_Heat_Input_Consistent_with_Operating_Level");
            Process.ProcessParameters.RegisterParameter(2130, "APPE_Heat_Input_Rate_Array");
            Process.ProcessParameters.RegisterParameter(2174, "APPE_Last_Run_Number");
            Process.ProcessParameters.RegisterParameter(2132, "APPE_Level_Count");
            Process.ProcessParameters.RegisterParameter(2173, "APPE_Level_Count_Validated");
            Process.ProcessParameters.RegisterParameter(2110, "APPE_Level_Maximum_HI_Rate");
            Process.ProcessParameters.RegisterParameter(2168, "APPE_Level_Run_Count");
            Process.ProcessParameters.RegisterParameter(2127, "APPE_Level_Sum_HI_Rate");
            Process.ProcessParameters.RegisterParameter(2128, "APPE_Level_Sum_Reference_Value");
            Process.ProcessParameters.RegisterParameter(2230, "APPE_Maximum_NOx_Rate");
            Process.ProcessParameters.RegisterParameter(2131, "APPE_NOx_Rate_Array");
            Process.ProcessParameters.RegisterParameter(2307, "APPE_Oil_Calc_HI");
            Process.ProcessParameters.RegisterParameter(2308, "APPE_Oil_Calc_Mass_Oil");
            Process.ProcessParameters.RegisterParameter(2147, "APPE_Oil_Density_Maximum_Value");
            Process.ProcessParameters.RegisterParameter(2145, "APPE_Oil_Density_Minimum_Value");
            Process.ProcessParameters.RegisterParameter(2141, "APPE_Oil_Density_UOM");
            Process.ProcessParameters.RegisterParameter(2149, "APPE_Oil_Density_UOM_Valid");
            Process.ProcessParameters.RegisterParameter(2150, "APPE_Oil_GCV_Maximum_Value");
            Process.ProcessParameters.RegisterParameter(2151, "APPE_Oil_GCV_Minimum_Value");
            Process.ProcessParameters.RegisterParameter(2148, "APPE_Oil_GCV_UOM");
            Process.ProcessParameters.RegisterParameter(2146, "APPE_Oil_GCV_UOM_Valid");
            Process.ProcessParameters.RegisterParameter(2113, "APPE_Oil_Records");
            Process.ProcessParameters.RegisterParameter(2133, "APPE_Oil_System_Type");
            Process.ProcessParameters.RegisterParameter(2309, "APPE_Run_Calc_HI");
            Process.ProcessParameters.RegisterParameter(2310, "APPE_Run_Calc_HI_Rate");
            Process.ProcessParameters.RegisterParameter(2129, "APPE_Run_Length");
            Process.ProcessParameters.RegisterParameter(2112, "APPE_Run_Records");
            Process.ProcessParameters.RegisterParameter(2260, "APPE_Run_Sequence");
            Process.ProcessParameters.RegisterParameter(2099, "APPE_Run_Sequence_Consecutive");
            Process.ProcessParameters.RegisterParameter(2175, "APPE_Run_Sequence_Valid");
            Process.ProcessParameters.RegisterParameter(2116, "APPE_Run_System_Count");
            Process.ProcessParameters.RegisterParameter(2098, "APPE_Run_Times_Valid");
            Process.ProcessParameters.RegisterParameter(2179, "APPE_Summary_Records");
            Process.ProcessParameters.RegisterParameter(2169, "APPE_System_Fuel_Code");
            Process.ProcessParameters.RegisterParameter(2115, "APPE_System_List");
            Process.ProcessParameters.RegisterParameter(2117, "APPE_Systems_with_Inconsistent_UOM");
            Process.ProcessParameters.RegisterParameter(2096, "APPE_System_Valid");
            Process.ProcessParameters.RegisterParameter(2101, "APPE_Test_Begin_Date");
            Process.ProcessParameters.RegisterParameter(2106, "APPE_Test_Begin_Hour");
            Process.ProcessParameters.RegisterParameter(2105, "APPE_Test_Begin_Minute");
            Process.ProcessParameters.RegisterParameter(2102, "APPE_Test_End_Date");
            Process.ProcessParameters.RegisterParameter(2103, "APPE_Test_End_Hour");
            Process.ProcessParameters.RegisterParameter(2104, "APPE_Test_End_Minute");
            Process.ProcessParameters.RegisterParameter(2107, "APPE_Test_Records");
            Process.ProcessParameters.RegisterParameter(2166, "APPE_Use_Calculated_Run_HI");
            Process.ProcessParameters.RegisterParameter(3584, "APS_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(2097, "Associated_System");
            Process.ProcessParameters.RegisterParameter(2170, "Calculate_APPE_Segments");
            Process.ProcessParameters.RegisterParameter(1316, "Calculate_Average_Gross_Unit_Load");
            Process.ProcessParameters.RegisterParameter(1181, "Calculate_Linearity_Level");
            Process.ProcessParameters.RegisterParameter(1182, "Calculate_Linearity_Test");
            Process.ProcessParameters.RegisterParameter(1314, "Calculate_RATA_Level");
            Process.ProcessParameters.RegisterParameter(1840, "Calculate_Run_Velocity");
            Process.ProcessParameters.RegisterParameter(2407, "Calculate_Unit_Default_NOx_Rate");
            Process.ProcessParameters.RegisterParameter(1631, "Calculate_Upscale_Calibration_Injection");
            Process.ProcessParameters.RegisterParameter(1632, "Calculate_Zero_Calibration_Injection");
            Process.ProcessParameters.RegisterParameter(1598, "Calibration_Injection_Count");
            Process.ProcessParameters.RegisterParameter(1618, "Calibration_Injection_Times_Appropriate");
            Process.ProcessParameters.RegisterParameter(1620, "Calibration_Injection_Times_Valid");
            Process.ProcessParameters.RegisterParameter(1643, "Calibration_Maximum_Upscale_Reference_Value");
            Process.ProcessParameters.RegisterParameter(1599, "Calibration_Maximum_Zero_Reference_Value");
            Process.ProcessParameters.RegisterParameter(1600, "Calibration_Minimum_Upscale_Reference_Value");
            Process.ProcessParameters.RegisterParameter(1644, "Calibration_Minimum_Zero_Reference_Value");
            Process.ProcessParameters.RegisterParameter(1617, "Calibration_Test_Aborted");
            Process.ProcessParameters.RegisterParameter(1601, "Calibration_Test_Begin_Date");
            Process.ProcessParameters.RegisterParameter(1602, "Calibration_Test_Begin_Hour");
            Process.ProcessParameters.RegisterParameter(1603, "Calibration_Test_Begin_Minute");
            Process.ProcessParameters.RegisterParameter(1610, "Calibration_Test_Component_Type_Valid");
            Process.ProcessParameters.RegisterParameter(1606, "Calibration_Test_End_Date");
            Process.ProcessParameters.RegisterParameter(1605, "Calibration_Test_End_Hour");
            Process.ProcessParameters.RegisterParameter(1604, "Calibration_Test_End_Minute");
            Process.ProcessParameters.RegisterParameter(1642, "Calibration_Test_Records");
            Process.ProcessParameters.RegisterParameter(1628, "Calibration_Test_Result");
            Process.ProcessParameters.RegisterParameter(1629, "Calibration_Test_Supp_Data_ID");
            Process.ProcessParameters.RegisterParameter(1636, "Calibration_Test_Validity_Performed");
            Process.ProcessParameters.RegisterParameter(1619, "Calibration_Upscale_Gas_Level_Code");
            Process.ProcessParameters.RegisterParameter(1623, "Calibration_Upscale_Injection_Calc_APS_Indicator");
            Process.ProcessParameters.RegisterParameter(1625, "Calibration_Upscale_Injection_Calc_Result");
            Process.ProcessParameters.RegisterParameter(1638, "Calibration_Upscale_Reference_Value_Percent_of_Span");
            Process.ProcessParameters.RegisterParameter(1622, "Calibration_Zero_Injection_Calc_APS_Indicator");
            Process.ProcessParameters.RegisterParameter(1624, "Calibration_Zero_Injection_Calc_Result");
            Process.ProcessParameters.RegisterParameter(1637, "Calibration_Zero_Reference_Value_Percent_of_Span");
            Process.ProcessParameters.RegisterParameter(2186, "Completion_Test_Date_And_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(1185, "Component_Linearity_Injection_Records");
            Process.ProcessParameters.RegisterParameter(539, "Component_Records");
            Process.ProcessParameters.RegisterParameter(2185, "Conditional_Begin_Date_and_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(3262, "CrossCheck_ProtocolGasParameterToType");
            Process.ProcessParameters.RegisterParameter(1597, "Current_7Day_Calibration_Test");
            Process.ProcessParameters.RegisterParameter(2011, "Current_Accuracy_Test");
            Process.ProcessParameters.RegisterParameter(2158, "Current_Appendix_E_HI_for_Gas");
            Process.ProcessParameters.RegisterParameter(2109, "Current_Appendix_E_HI_for_Oil");
            Process.ProcessParameters.RegisterParameter(2125, "Current_Appendix_E_Run");
            Process.ProcessParameters.RegisterParameter(2124, "Current_Appendix_E_Summary");
            Process.ProcessParameters.RegisterParameter(2095, "Current_Appendix_E_Test");
            Process.ProcessParameters.RegisterParameter(1596, "Current_Calibration_Injection");
            Process.ProcessParameters.RegisterParameter(492, "Current_Component");
            Process.ProcessParameters.RegisterParameter(1747, "Current_Cycle_Time_Injection");
            Process.ProcessParameters.RegisterParameter(1730, "Current_Cycle_Time_Test");
            Process.ProcessParameters.RegisterParameter(1846, "Current_Flow_RATA_Run");
            Process.ProcessParameters.RegisterParameter(1711, "Current_Flow_to_Load_Check");
            Process.ProcessParameters.RegisterParameter(1647, "Current_Flow_to_Load_Reference");
            Process.ProcessParameters.RegisterParameter(2041, "Current_Fuel_Flow_To_Load_Baseline");
            Process.ProcessParameters.RegisterParameter(2081, "Current_Fuel_Flow_to_Load_Test");
            Process.ProcessParameters.RegisterParameter(1148, "Current_Linearity_Injection");
            Process.ProcessParameters.RegisterParameter(1147, "Current_Linearity_Summary");
            Process.ProcessParameters.RegisterParameter(1145, "Current_Linearity_Test");
            Process.ProcessParameters.RegisterParameter(699, "Current_Location");
            Process.ProcessParameters.RegisterParameter(1085, "Current_Monitor_Location");
            Process.ProcessParameters.RegisterParameter(1963, "Current_OOC_Test");
            Process.ProcessParameters.RegisterParameter(3225, "Current_Protocol_Gas_Record");
            Process.ProcessParameters.RegisterParameter(2182, "Current_QA_Cert_Event");
            Process.ProcessParameters.RegisterParameter(1269, "Current_RATA");
            Process.ProcessParameters.RegisterParameter(1304, "Current_RATA_Run");
            Process.ProcessParameters.RegisterParameter(1293, "Current_RATA_Summary");
            Process.ProcessParameters.RegisterParameter(1806, "Current_RATA_Traverse");
            Process.ProcessParameters.RegisterParameter(2032, "Current_Record");
            Process.ProcessParameters.RegisterParameter(258, "Current_System");
            Process.ProcessParameters.RegisterParameter(1728, "Current_Test");
            Process.ProcessParameters.RegisterParameter(2193, "Current_Test_Extension_Exemption");
            Process.ProcessParameters.RegisterParameter(1329, "Current_Test_Qualification");
            Process.ProcessParameters.RegisterParameter(2021, "Current_Transmitter_Transducer_Test");
            Process.ProcessParameters.RegisterParameter(2376, "Current_Unit_Default_Run");
            Process.ProcessParameters.RegisterParameter(2372, "Current_Unit_Default_Test");
            Process.ProcessParameters.RegisterParameter(1749, "Cycle_Time_Calc_Injection_Cycle_Time");
            Process.ProcessParameters.RegisterParameter(1732, "Cycle_Time_Calc_Test_Result");
            Process.ProcessParameters.RegisterParameter(1750, "Cycle_Time_Calc_Total_Cycle_Time");
            Process.ProcessParameters.RegisterParameter(1746, "Cycle_Time_High_Injection_Count");
            Process.ProcessParameters.RegisterParameter(1744, "Cycle_Time_High_Reference_Value");
            Process.ProcessParameters.RegisterParameter(1752, "Cycle_Time_Injection_Dates_Consistent");
            Process.ProcessParameters.RegisterParameter(1871, "Cycle_Time_Injection_Gas_Level_Valid");
            Process.ProcessParameters.RegisterParameter(1756, "Cycle_Time_Injection_Records");
            Process.ProcessParameters.RegisterParameter(1742, "Cycle_Time_Injection_Times_Valid");
            Process.ProcessParameters.RegisterParameter(1751, "Cycle_Time_Reference_Percent_Of_Span");
            Process.ProcessParameters.RegisterParameter(1733, "Cycle_Time_Test_Aborted");
            Process.ProcessParameters.RegisterParameter(1736, "Cycle_Time_Test_Begin_Date");
            Process.ProcessParameters.RegisterParameter(1737, "Cycle_Time_Test_Begin_Hour");
            Process.ProcessParameters.RegisterParameter(1738, "Cycle_Time_Test_Begin_Minute");
            Process.ProcessParameters.RegisterParameter(1731, "Cycle_Time_Test_Component_Type_Valid");
            Process.ProcessParameters.RegisterParameter(1739, "Cycle_Time_Test_End_Date");
            Process.ProcessParameters.RegisterParameter(1740, "Cycle_Time_Test_End_Hour");
            Process.ProcessParameters.RegisterParameter(1741, "Cycle_Time_Test_End_Minute");
            Process.ProcessParameters.RegisterParameter(1735, "Cycle_Time_Test_Records");
            Process.ProcessParameters.RegisterParameter(1734, "Cycle_Time_Test_Supp_Data_Id");
            Process.ProcessParameters.RegisterParameter(1757, "Cycle_Time_Test_Total_Time_Calculated");
            Process.ProcessParameters.RegisterParameter(1755, "Cycle_Time_Test_Validity_Determined");
            Process.ProcessParameters.RegisterParameter(1745, "Cycle_Time_Zero_Injection_Count");
            Process.ProcessParameters.RegisterParameter(1743, "Cycle_Time_Zero_Reference_Value");
            Process.ProcessParameters.RegisterParameter(328, "Default_Records");
            Process.ProcessParameters.RegisterParameter(1641, "Duplicate_7Day_Calibration");
            Process.ProcessParameters.RegisterParameter(2176, "Duplicate_Appendix_E_Test");
            Process.ProcessParameters.RegisterParameter(2050, "Duplicate_Cycle_Time");
            Process.ProcessParameters.RegisterParameter(2052, "Duplicate_Flow_To_Load_Check");
            Process.ProcessParameters.RegisterParameter(2051, "Duplicate_Flow_To_Load_Reference");
            Process.ProcessParameters.RegisterParameter(2053, "Duplicate_Fuel_Flow_Accuracy");
            Process.ProcessParameters.RegisterParameter(2055, "Duplicate_Fuel_Flow_To_Load_Baseline");
            Process.ProcessParameters.RegisterParameter(2082, "Duplicate_Fuel_Flow_to_Load_Test");
            Process.ProcessParameters.RegisterParameter(1640, "Duplicate_Linearity");
            Process.ProcessParameters.RegisterParameter(1867, "Duplicate_Linearity_Injection");
            Process.ProcessParameters.RegisterParameter(2201, "Duplicate_Miscellaneous_Test");
            Process.ProcessParameters.RegisterParameter(2049, "Duplicate_Online_Offline_Calibration");
            Process.ProcessParameters.RegisterParameter(1639, "Duplicate_RATA");
            Process.ProcessParameters.RegisterParameter(2054, "Duplicate_Transmitter_Transducer");
            Process.ProcessParameters.RegisterParameter(2375, "Duplicate_Unit_Default_Test");
            Process.ProcessParameters.RegisterParameter(2917, "ECMPS_MP_Begin_Date");
            Process.ProcessParameters.RegisterParameter(2015, "Evaluate_Accuracy_Test");
            Process.ProcessParameters.RegisterParameter(2018, "Evaluate_Accuracy_Test_Screen");
            Process.ProcessParameters.RegisterParameter(1965, "Evaluate_OOC_Injections");
            Process.ProcessParameters.RegisterParameter(2017, "Evaluate_OOC_Screen");
            Process.ProcessParameters.RegisterParameter(2192, "Event_Code_to_System_or_Component_Type_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(3059, "Event_Code_to_Test_Type_Codes_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(2183, "Event_Date_Valid");
            Process.ProcessParameters.RegisterParameter(2184, "Event_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(2108, "Extra_APPE_Test");
            Process.ProcessParameters.RegisterParameter(1394, "Extra_Linearity_Test");
            Process.ProcessParameters.RegisterParameter(1420, "Extra_RATA");
            Process.ProcessParameters.RegisterParameter(2374, "Extra_Unit_Default_Test");
            Process.ProcessParameters.RegisterParameter(2291, "F2L_Calc_Flow");
            Process.ProcessParameters.RegisterParameter(2288, "F2L_Calc_GHR");
            Process.ProcessParameters.RegisterParameter(2290, "F2L_Calc_GUL");
            Process.ProcessParameters.RegisterParameter(2289, "F2L_Calc_Ratio");
            Process.ProcessParameters.RegisterParameter(1699, "Facility_QA_Supplemental_Attribute_Records");
            Process.ProcessParameters.RegisterParameter(1672, "Facility_QA_Supplemental_Data_Records");
            Process.ProcessParameters.RegisterParameter(376, "Facility_Qualification_Records");
            Process.ProcessParameters.RegisterParameter(1673, "Facility_RATA_Run_Records");
            Process.ProcessParameters.RegisterParameter(1700, "Facility_RATA_Summary_Records");
            Process.ProcessParameters.RegisterParameter(2044, "Facility_Unit_Capacity_Records");
            Process.ProcessParameters.RegisterParameter(1701, "Facility_Unit_Stack_Configuration_Records");
            Process.ProcessParameters.RegisterParameter(2058, "FF2LBAS_Accuracy_Test_Baseline_Start_Date");
            Process.ProcessParameters.RegisterParameter(2059, "FF2LBAS_Accuracy_Test_Baseline_Start_Hour");
            Process.ProcessParameters.RegisterParameter(2060, "FF2LBAS_Baseline_Start_Date");
            Process.ProcessParameters.RegisterParameter(2061, "FF2LBAS_Baseline_Start_Hour");
            Process.ProcessParameters.RegisterParameter(2056, "FF2LBAS_Collection_Period_Hours");
            Process.ProcessParameters.RegisterParameter(2047, "FF2LBAS_Fuel_Flow_To_Load_Ratio_UOM_Code_Valid");
            Process.ProcessParameters.RegisterParameter(2048, "FF2LBAS_GHR_UOM_Code_Valid");
            Process.ProcessParameters.RegisterParameter(2046, "FF2LBAS_Load_UOM_Code");
            Process.ProcessParameters.RegisterParameter(2043, "FF2LBAS_Method_Valid");
            Process.ProcessParameters.RegisterParameter(2057, "FF2LBAS_PEI_Required");
            Process.ProcessParameters.RegisterParameter(2042, "FF2LBAS_System_Valid");
            Process.ProcessParameters.RegisterParameter(2122, "FF2LBAS_Test_Basis");
            Process.ProcessParameters.RegisterParameter(2083, "FF2LTST_System_Valid");
            Process.ProcessParameters.RegisterParameter(3089, "First_ECMPS_Reporting_Period");
            Process.ProcessParameters.RegisterParameter(1854, "Flow_RATA_Level_Valid");
            Process.ProcessParameters.RegisterParameter(2208, "Flow_RATA_Record_Valid");
            Process.ProcessParameters.RegisterParameter(1306, "Flow_RATA_Run_Records");
            Process.ProcessParameters.RegisterParameter(1310, "Flow_RATA_Run_Valid");
            Process.ProcessParameters.RegisterParameter(1722, "Flow_to_Load_Check_Average_Gross_Unit_Load");
            Process.ProcessParameters.RegisterParameter(1726, "Flow_To_Load_Check_Calc_Test_Result");
            Process.ProcessParameters.RegisterParameter(1725, "Flow_to_Load_Check_Load_Units_of_Measure");
            Process.ProcessParameters.RegisterParameter(1723, "Flow_To_Load_Check_Operating_Level_Code_Valid");
            Process.ProcessParameters.RegisterParameter(1712, "Flow_to_Load_Check_Records");
            Process.ProcessParameters.RegisterParameter(1713, "Flow_to_Load_Check_Supp_Data_ID");
            Process.ProcessParameters.RegisterParameter(1714, "Flow_to_Load_Check_System_Valid");
            Process.ProcessParameters.RegisterParameter(1668, "Flow_to_Load_Reference_Calc_Average_Gross_Unit_Load");
            Process.ProcessParameters.RegisterParameter(1669, "Flow_To_Load_Reference_Calc_Average_Reference_Method_Flow");
            Process.ProcessParameters.RegisterParameter(1695, "Flow_To_Load_Reference_Calc_Flow_To_Load_Ratio");
            Process.ProcessParameters.RegisterParameter(1696, "Flow_To_Load_Reference_Calc_GHR");
            Process.ProcessParameters.RegisterParameter(1697, "Flow_to_Load_Reference_Methodology_Valid");
            Process.ProcessParameters.RegisterParameter(1666, "Flow_To_Load_Reference_Operating_Level_Code_Valid");
            Process.ProcessParameters.RegisterParameter(1671, "Flow_To_Load_Reference_RATA_Summary_ID");
            Process.ProcessParameters.RegisterParameter(1689, "Flow_To_Load_Reference_RATA_Supp_ID");
            Process.ProcessParameters.RegisterParameter(1667, "Flow_To_Load_Reference_RATA_Test_Number_Valid");
            Process.ProcessParameters.RegisterParameter(1653, "Flow_to_Load_Reference_Records");
            Process.ProcessParameters.RegisterParameter(1655, "Flow_to_Load_Reference_Supp_Data_ID");
            Process.ProcessParameters.RegisterParameter(1648, "Flow_to_Load_Reference_System_Valid");
            Process.ProcessParameters.RegisterParameter(430, "Fuel_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(2045, "Fuel_Flow_To_Load_Baseline_Records");
            Process.ProcessParameters.RegisterParameter(2079, "Fuel_Flow_To_Load_Baseline_Uom_To_Load_Uom_And_Systemtype_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(2084, "Fuel_Flow_to_Load_Test_Records");
            Process.ProcessParameters.RegisterParameter(3222, "Gas_Type_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(1287, "High_Average_Gross_Unit_Load");
            Process.ProcessParameters.RegisterParameter(1284, "High_BAF");
            Process.ProcessParameters.RegisterParameter(1312, "Highest_RATA_CEM_Value");
            Process.ProcessParameters.RegisterParameter(1894, "Highest_RATA_Run_Number");
            Process.ProcessParameters.RegisterParameter(1686, "High_Run_Count");
            Process.ProcessParameters.RegisterParameter(1678, "High_Sum_Gross_Unit_Load");
            Process.ProcessParameters.RegisterParameter(1681, "High_Sum_Reference_Value");
            Process.ProcessParameters.RegisterParameter(1327, "Inconsistent_RATA_Fields");
            Process.ProcessParameters.RegisterParameter(2111, "Last_APPE_Maximum_HI_Rate");
            Process.ProcessParameters.RegisterParameter(1621, "Last_Calibration_Injection_Date");
            Process.ProcessParameters.RegisterParameter(1172, "Last_Injection_Time");
            Process.ProcessParameters.RegisterParameter(1189, "Last_Linearity_Level_Code");
            Process.ProcessParameters.RegisterParameter(1303, "Last_RATA_Run_Number");
            Process.ProcessParameters.RegisterParameter(1805, "Last_RATA_Traverse_Point_ID");
            Process.ProcessParameters.RegisterParameter(2258, "Linearity_Calc_APS");
            Process.ProcessParameters.RegisterParameter(2255, "Linearity_Calc_MMV");
            Process.ProcessParameters.RegisterParameter(2256, "Linearity_Calc_MRV");
            Process.ProcessParameters.RegisterParameter(2257, "Linearity_Calc_PE");
            Process.ProcessParameters.RegisterParameter(1149, "Linearity_Component_Valid");
            Process.ProcessParameters.RegisterParameter(1866, "Linearity_Gas_Level_Valid");
            Process.ProcessParameters.RegisterParameter(1168, "Linearity_Injection_Count");
            Process.ProcessParameters.RegisterParameter(1173, "Linearity_Injection_Included");
            Process.ProcessParameters.RegisterParameter(1561, "Linearity_Injection_Records");
            Process.ProcessParameters.RegisterParameter(1176, "Linearity_Injection_Reference_Value_Valid");
            Process.ProcessParameters.RegisterParameter(1291, "Linearity_Injection_Times_Valid");
            Process.ProcessParameters.RegisterParameter(1187, "Linearity_Injection_Time_Valid");
            Process.ProcessParameters.RegisterParameter(2712, "Linearity_Intermediate_Values");
            Process.ProcessParameters.RegisterParameter(1161, "Linearity_Level_List");
            Process.ProcessParameters.RegisterParameter(1169, "Linearity_Level_Valid");
            Process.ProcessParameters.RegisterParameter(1167, "Linearity_Measured_Value_Total");
            Process.ProcessParameters.RegisterParameter(1190, "Linearity_Reference_Percent_of_Span");
            Process.ProcessParameters.RegisterParameter(1170, "Linearity_Reference_Value_Consistent_with_Span");
            Process.ProcessParameters.RegisterParameter(1162, "Linearity_Reference_Values_Consistent");
            Process.ProcessParameters.RegisterParameter(1166, "Linearity_Reference_Value_Total");
            Process.ProcessParameters.RegisterParameter(1159, "Linearity_Sequence_Valid");
            Process.ProcessParameters.RegisterParameter(1180, "Linearity_Summary_APS_Indicator");
            Process.ProcessParameters.RegisterParameter(1188, "Linearity_Summary_Mean_Difference");
            Process.ProcessParameters.RegisterParameter(1177, "Linearity_Summary_Mean_Measured_Value");
            Process.ProcessParameters.RegisterParameter(1178, "Linearity_Summary_Mean_Reference_Value");
            Process.ProcessParameters.RegisterParameter(1179, "Linearity_Summary_Percent_Error");
            Process.ProcessParameters.RegisterParameter(1174, "Linearity_Summary_Percent_Error_Valid");
            Process.ProcessParameters.RegisterParameter(1562, "Linearity_Summary_Records");
            Process.ProcessParameters.RegisterParameter(1392, "Linearity_Supp_Data_ID");
            Process.ProcessParameters.RegisterParameter(1150, "Linearity_Test_Aborted");
            Process.ProcessParameters.RegisterParameter(1151, "Linearity_Test_Begin_Date");
            Process.ProcessParameters.RegisterParameter(1152, "Linearity_Test_Begin_Hour");
            Process.ProcessParameters.RegisterParameter(1153, "Linearity_Test_Begin_Minute");
            Process.ProcessParameters.RegisterParameter(1154, "Linearity_Test_End_Date");
            Process.ProcessParameters.RegisterParameter(1155, "Linearity_Test_End_Hour");
            Process.ProcessParameters.RegisterParameter(1156, "Linearity_Test_End_Minute");
            Process.ProcessParameters.RegisterParameter(1158, "Linearity_Test_Injection_Records");
            Process.ProcessParameters.RegisterParameter(1191, "Linearity_Test_Records");
            Process.ProcessParameters.RegisterParameter(1157, "Linearity_Test_Result");
            Process.ProcessParameters.RegisterParameter(2967, "Linearity_Test_Type");
            Process.ProcessParameters.RegisterParameter(2118, "Load_Lower_Boundary");
            Process.ProcessParameters.RegisterParameter(365, "Load_Records");
            Process.ProcessParameters.RegisterParameter(2119, "Load_Upper_Boundary");
            Process.ProcessParameters.RegisterParameter(475, "Location_Analyzer_Range_Records");
            Process.ProcessParameters.RegisterParameter(700, "Location_Attribute_Records");
            Process.ProcessParameters.RegisterParameter(508, "Location_Control_Records");
            Process.ProcessParameters.RegisterParameter(2892, "Location_Operating_Status_Records");
            Process.ProcessParameters.RegisterParameter(859, "Location_Reporting_Frequency_Records");
            Process.ProcessParameters.RegisterParameter(540, "Location_System_Component_Records");
            Process.ProcessParameters.RegisterParameter(1380, "Location_Test_Records");
            Process.ProcessParameters.RegisterParameter(510, "Location_Unit_Type_Records");
            Process.ProcessParameters.RegisterParameter(1289, "Low_Average_Gross_Unit_Load");
            Process.ProcessParameters.RegisterParameter(1286, "Low_BAF");
            Process.ProcessParameters.RegisterParameter(1684, "Low_Run_Count");
            Process.ProcessParameters.RegisterParameter(1680, "Low_Sum_Gross_Unit_Load");
            Process.ProcessParameters.RegisterParameter(1683, "Low_Sum_Reference_Value");
            Process.ProcessParameters.RegisterParameter(340, "Method_Records");
            Process.ProcessParameters.RegisterParameter(1288, "Mid_Average_Gross_Unit_Load");
            Process.ProcessParameters.RegisterParameter(1285, "Mid_BAF");
            Process.ProcessParameters.RegisterParameter(1685, "Mid_Run_Count");
            Process.ProcessParameters.RegisterParameter(1679, "Mid_Sum_Gross_Unit_Load");
            Process.ProcessParameters.RegisterParameter(1682, "Mid_Sum_Reference_Value");
            Process.ProcessParameters.RegisterParameter(2085, "Miscellaneous_Test_ID_Fieldname");
            Process.ProcessParameters.RegisterParameter(2087, "Miscellaneous_Test_Type_Valid");
            Process.ProcessParameters.RegisterParameter(3102, "Monitoring_Plan_Location_Records_for_QA");
            Process.ProcessParameters.RegisterParameter(345, "Monitor_System_Records");
            Process.ProcessParameters.RegisterParameter(1332, "Normal_RATA_Operating_Levels");
            Process.ProcessParameters.RegisterParameter(2301, "Offline_Upscale_Calc_APS");
            Process.ProcessParameters.RegisterParameter(2300, "Offline_Upscale_Calc_Result");
            Process.ProcessParameters.RegisterParameter(2304, "Offline_Zero_Calc_APS");
            Process.ProcessParameters.RegisterParameter(2305, "Offline_Zero_Calc_Result");
            Process.ProcessParameters.RegisterParameter(2140, "Oil_Volume_UOM_to_Density_UOM_to_GCV_UOM");
            Process.ProcessParameters.RegisterParameter(2298, "Online_Upscale_Calc_APS");
            Process.ProcessParameters.RegisterParameter(2299, "Online_Upscale_Calc_Result");
            Process.ProcessParameters.RegisterParameter(2302, "Online_Zero_Calc_APS");
            Process.ProcessParameters.RegisterParameter(2303, "Online_Zero_Calc_Result");
            Process.ProcessParameters.RegisterParameter(1968, "OOC_Injection_Times_Valid");
            Process.ProcessParameters.RegisterParameter(1973, "OOC_Offline_Upscale_Injection_Calc_APS_Indicator");
            Process.ProcessParameters.RegisterParameter(1976, "OOC_Offline_Upscale_Injection_Calc_Result");
            Process.ProcessParameters.RegisterParameter(1969, "OOC_Offline_Zero_Injection_Calc_APS_Indicator");
            Process.ProcessParameters.RegisterParameter(1970, "OOC_Offline_Zero_Injection_Calc_Result");
            Process.ProcessParameters.RegisterParameter(1972, "OOC_Online_Upscale_Injection_Calc_APS_Indicator");
            Process.ProcessParameters.RegisterParameter(1975, "OOC_Online_Upscale_Injection_Calc_Result");
            Process.ProcessParameters.RegisterParameter(1971, "OOC_Online_Zero_Injection_Calc_APS_Indicator");
            Process.ProcessParameters.RegisterParameter(1974, "OOC_Online_Zero_Injection_Calc_Result");
            Process.ProcessParameters.RegisterParameter(1966, "OOC_Test_Calc_Result");
            Process.ProcessParameters.RegisterParameter(1964, "OOC_Test_Component_Type_Valid");
            Process.ProcessParameters.RegisterParameter(1978, "OOC_Test_Records");
            Process.ProcessParameters.RegisterParameter(1980, "OOC_Upscale_Reference_Value_Percent_Of_Span");
            Process.ProcessParameters.RegisterParameter(1967, "OOC_Zero_Reference_Value_Percent_Of_Span");
            Process.ProcessParameters.RegisterParameter(804, "Operating_Level_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(1333, "Overall_BAF");
            Process.ProcessParameters.RegisterParameter(1282, "Overall_Relative_Accuracy");
            Process.ProcessParameters.RegisterParameter(765, "Parameter_Units_Of_Measure_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(1813, "Pressure_Measure_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(2402, "Previous_Unit_Default_Level_Calculated");
            Process.ProcessParameters.RegisterParameter(3307, "Protocol_Gas_Approval_Requested");
            Process.ProcessParameters.RegisterParameter(3313, "Protocol_Gas_Balance_Component_List");
            Process.ProcessParameters.RegisterParameter(3306, "Protocol_Gas_Component_List_Valid");
            Process.ProcessParameters.RegisterParameter(3567, "Protocol_Gas_Cylinder_ID_List");
            Process.ProcessParameters.RegisterParameter(3314, "Protocol_Gas_Duplicate_Component_List");
            Process.ProcessParameters.RegisterParameter(3229, "Protocol_Gases");
            Process.ProcessParameters.RegisterParameter(3309, "Protocol_Gas_Exclusive_Component_List");
            Process.ProcessParameters.RegisterParameter(3308, "Protocol_Gas_Invalid_Component_List");
            Process.ProcessParameters.RegisterParameter(3227, "Protocol_Gas_Parameter");
            Process.ProcessParameters.RegisterParameter(3224, "Protocol_Gas_Vendor_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(3067, "QA_Cert_Event_and_Type_Consistent");
            Process.ProcessParameters.RegisterParameter(2188, "QA_Cert_Event_Component_Type");
            Process.ProcessParameters.RegisterParameter(3061, "QA_Cert_Event_Missing_Test_Types");
            Process.ProcessParameters.RegisterParameter(2190, "QA_Cert_Event_Required_ID_Code");
            Process.ProcessParameters.RegisterParameter(2187, "QA_Cert_Event_System_Type");
            Process.ProcessParameters.RegisterParameter(2191, "QA_Cert_Event_Valid_System_Or_Component");
            Process.ProcessParameters.RegisterParameter(1877, "Qa_Certification_Event_Records");
            Process.ProcessParameters.RegisterParameter(1690, "QA_Supplemental_Attribute_Records");
            Process.ProcessParameters.RegisterParameter(1331, "QA_Supplemental_Data_Records");
            Process.ProcessParameters.RegisterParameter(1279, "RATA_Aborted");
            Process.ProcessParameters.RegisterParameter(1855, "RATA_Adjusted_Velocity_Determined");
            Process.ProcessParameters.RegisterParameter(1851, "RATA_Adjusted_WAF_Determined");
            Process.ProcessParameters.RegisterParameter(1864, "RATA_Applicable_WAF");
            Process.ProcessParameters.RegisterParameter(1270, "RATA_Begin_Date");
            Process.ProcessParameters.RegisterParameter(1271, "RATA_Begin_Hour");
            Process.ProcessParameters.RegisterParameter(1272, "RATA_Begin_Minute");
            Process.ProcessParameters.RegisterParameter(2278, "RATA_Calc_Adjusted_Run_Velocity");
            Process.ProcessParameters.RegisterParameter(2270, "RATA_Calc_APS");
            Process.ProcessParameters.RegisterParameter(2272, "RATA_Calc_Area");
            Process.ProcessParameters.RegisterParameter(1850, "RATA_Calc_Average_Adjusted_Velocity");
            Process.ProcessParameters.RegisterParameter(2271, "RATA_Calc_Average_GUL");
            Process.ProcessParameters.RegisterParameter(1852, "RATA_Calc_Average_Stack_Flow");
            Process.ProcessParameters.RegisterParameter(1922, "Rata_Calc_Average_Stack_Flow_2H");
            Process.ProcessParameters.RegisterParameter(1841, "RATA_Calc_Average_Velocity");
            Process.ProcessParameters.RegisterParameter(2269, "RATA_Calc_BAF");
            Process.ProcessParameters.RegisterParameter(1842, "RATA_Calc_Calculated_WAF");
            Process.ProcessParameters.RegisterParameter(2267, "RATA_Calc_CC");
            Process.ProcessParameters.RegisterParameter(1797, "RATA_Calc_Dry_Molecular_Weight");
            Process.ProcessParameters.RegisterParameter(2275, "RATA_Calc_Dry_MW");
            Process.ProcessParameters.RegisterParameter(1863, "RATA_Calc_Level_WAF");
            Process.ProcessParameters.RegisterParameter(2263, "RATA_Calc_Mean_CEM");
            Process.ProcessParameters.RegisterParameter(2264, "RATA_Calc_Mean_Diff");
            Process.ProcessParameters.RegisterParameter(2262, "RATA_Calc_Mean_RV");
            Process.ProcessParameters.RegisterParameter(2286, "RATA_Calc_Overall_BAF");
            Process.ProcessParameters.RegisterParameter(2287, "RATA_Calc_Overall_RATA");
            Process.ProcessParameters.RegisterParameter(3158, "RATA_Calc_Overall_WAF");
            Process.ProcessParameters.RegisterParameter(2285, "RATA_Calc_Point_Velocity");
            Process.ProcessParameters.RegisterParameter(2268, "RATA_Calc_RA");
            Process.ProcessParameters.RegisterParameter(2280, "RATA_Calc_Run_RV");
            Process.ProcessParameters.RegisterParameter(2277, "RATA_Calc_Run_Velocity");
            Process.ProcessParameters.RegisterParameter(2279, "RATA_Calc_Run_WAF");
            Process.ProcessParameters.RegisterParameter(2266, "RATA_Calc_SD");
            Process.ProcessParameters.RegisterParameter(1775, "RATA_Calc_Stack_Area");
            Process.ProcessParameters.RegisterParameter(1821, "RATA_Calc_Stack_Pressure");
            Process.ProcessParameters.RegisterParameter(2265, "RATA_Calc_TValue");
            Process.ProcessParameters.RegisterParameter(1828, "RATA_Calculated_WAF_Valid");
            Process.ProcessParameters.RegisterParameter(1798, "RATA_Calc_Wet_Molecular_Weight");
            Process.ProcessParameters.RegisterParameter(2276, "RATA_Calc_Wet_MW");
            Process.ProcessParameters.RegisterParameter(3155, "RATA_Check_WAF");
            Process.ProcessParameters.RegisterParameter(1328, "RATA_Claim_Code");
            Process.ProcessParameters.RegisterParameter(1330, "RATA_Claim_Code_Valid");
            Process.ProcessParameters.RegisterParameter(1273, "RATA_End_Date");
            Process.ProcessParameters.RegisterParameter(1274, "RATA_End_Hour");
            Process.ProcessParameters.RegisterParameter(1275, "RATA_End_Minute");
            Process.ProcessParameters.RegisterParameter(1325, "RATA_Frequency");
            Process.ProcessParameters.RegisterParameter(1881, "RATA_Frequency_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(1335, "RATA_Frequency_Determined");
            Process.ProcessParameters.RegisterParameter(2325, "RATA_Frequently_Used_Levels");
            Process.ProcessParameters.RegisterParameter(1517, "RATA_Higher_Level");
            Process.ProcessParameters.RegisterParameter(1885, "Rata_Invalid_Probes");
            Process.ProcessParameters.RegisterParameter(1283, "RATA_Level_List");
            Process.ProcessParameters.RegisterParameter(1294, "RATA_Level_Valid");
            Process.ProcessParameters.RegisterParameter(1862, "RATA_Maximum_Traverse_Point_Count");
            Process.ProcessParameters.RegisterParameter(2246, "RATA_Maximum_Traverse_Point_Count_for_All_Runs");
            Process.ProcessParameters.RegisterParameter(1861, "RATA_Minimum_Traverse_Point_Count");
            Process.ProcessParameters.RegisterParameter(1845, "RATA_Minimum_Wall_Points");
            Process.ProcessParameters.RegisterParameter(1334, "RATA_Number_of_Load_Levels");
            Process.ProcessParameters.RegisterParameter(1868, "RATA_Operating_Level_Valid");
            Process.ProcessParameters.RegisterParameter(1794, "RATA_Percent_CO2_Valid");
            Process.ProcessParameters.RegisterParameter(1796, "RATA_Percent_Moisture_Valid");
            Process.ProcessParameters.RegisterParameter(1795, "RATA_Percent_O2_Valid");
            Process.ProcessParameters.RegisterParameter(1810, "RATA_Probe_Types");
            Process.ProcessParameters.RegisterParameter(1419, "RATA_Records");
            Process.ProcessParameters.RegisterParameter(1779, "RATA_Rectangular_Duct_WAF");
            Process.ProcessParameters.RegisterParameter(1776, "RATA_Reference_Method_Valid");
            Process.ProcessParameters.RegisterParameter(3226, "RATA_Ref_Method_Code");
            Process.ProcessParameters.RegisterParameter(1832, "RATA_Replacement_Point_Count");
            Process.ProcessParameters.RegisterParameter(1277, "RATA_Result");
            Process.ProcessParameters.RegisterParameter(1308, "RATA_Run_Begin_Time_Valid");
            Process.ProcessParameters.RegisterParameter(1295, "RATA_Run_Count");
            Process.ProcessParameters.RegisterParameter(1309, "RATA_Run_End_Time_Valid");
            Process.ProcessParameters.RegisterParameter(1869, "RATA_Run_Number_Valid");
            Process.ProcessParameters.RegisterParameter(1307, "RATA_Run_Records");
            Process.ProcessParameters.RegisterParameter(1570, "RATA_Run_Times_Valid");
            Process.ProcessParameters.RegisterParameter(1793, "RATA_Stack_Diameter_Valid");
            Process.ProcessParameters.RegisterParameter(1853, "RATA_Stack_Flow_Array");
            Process.ProcessParameters.RegisterParameter(1829, "RATA_Sum_Adjusted_Velocity");
            Process.ProcessParameters.RegisterParameter(1301, "RATA_Sum_CEM_Values");
            Process.ProcessParameters.RegisterParameter(1297, "RATA_Sum_Differences");
            Process.ProcessParameters.RegisterParameter(1300, "RATA_Sum_Gross_Unit_Load");
            Process.ProcessParameters.RegisterParameter(1326, "RATA_Summary_APS_Indicator");
            Process.ProcessParameters.RegisterParameter(1315, "RATA_Summary_Average_Gross_Unit_Load");
            Process.ProcessParameters.RegisterParameter(1324, "RATA_Summary_BAF");
            Process.ProcessParameters.RegisterParameter(1320, "RATA_Summary_Confidence_Coefficient");
            Process.ProcessParameters.RegisterParameter(1317, "RATA_Summary_Mean_CEM_Value");
            Process.ProcessParameters.RegisterParameter(1319, "RATA_Summary_Mean_Difference");
            Process.ProcessParameters.RegisterParameter(1318, "RATA_Summary_Mean_Reference_Value");
            Process.ProcessParameters.RegisterParameter(1563, "RATA_Summary_Records");
            Process.ProcessParameters.RegisterParameter(1323, "RATA_Summary_Relative_Accuracy");
            Process.ProcessParameters.RegisterParameter(1321, "RATA_Summary_Standard_Deviation");
            Process.ProcessParameters.RegisterParameter(1322, "RATA_Summary_TValue");
            Process.ProcessParameters.RegisterParameter(1313, "RATA_Sum_Reference_Values");
            Process.ProcessParameters.RegisterParameter(1302, "RATA_Sum_Square_Differences");
            Process.ProcessParameters.RegisterParameter(1823, "RATA_Sum_Temperature");
            Process.ProcessParameters.RegisterParameter(1822, "RATA_Sum_Velocity");
            Process.ProcessParameters.RegisterParameter(1299, "RATA_Sum_WAF");
            Process.ProcessParameters.RegisterParameter(1393, "RATA_Supp_Data_ID");
            Process.ProcessParameters.RegisterParameter(1276, "RATA_System_Valid");
            Process.ProcessParameters.RegisterParameter(1962, "RATA_Test_Claim_Code_Valid");
            Process.ProcessParameters.RegisterParameter(1820, "RATA_Traverse_Calc_Velocity");
            Process.ProcessParameters.RegisterParameter(1831, "Rata_Traverse_Point_Count");
            Process.ProcessParameters.RegisterParameter(1807, "RATA_Traverse_Point_ID_Valid");
            Process.ProcessParameters.RegisterParameter(1858, "RATA_Traverse_Records");
            Process.ProcessParameters.RegisterParameter(1812, "RATA_Traverse_Valid");
            Process.ProcessParameters.RegisterParameter(1819, "RATA_Traverse_Validity_Determined");
            Process.ProcessParameters.RegisterParameter(1296, "RATA_Unused_Run_Count");
            Process.ProcessParameters.RegisterParameter(3117, "RATA_WAF_Calculated");
            Process.ProcessParameters.RegisterParameter(1298, "RATA_WAF_Run_Count");
            Process.ProcessParameters.RegisterParameter(3159, "RATA_WAF_Run_Numbers");
            Process.ProcessParameters.RegisterParameter(1778, "RATA_WAF_Test_Traverse_Point_Count");
            Process.ProcessParameters.RegisterParameter(1844, "RATA_Wall_Points_Consistent");
            Process.ProcessParameters.RegisterParameter(2004, "RATA_Zero_Value");
            Process.ProcessParameters.RegisterParameter(1777, "Rectangular_Duct_WAF_Records");
            Process.ProcessParameters.RegisterParameter(1510, "Reference_Method_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(2189, "Required_Test_Code_to_Required_ID_and_System_or_Component_Type_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(1311, "Rounded_Flow_RATA_Values");
            Process.ProcessParameters.RegisterParameter(2292, "7DAY_Upscale_Calc_APS");
            Process.ProcessParameters.RegisterParameter(2295, "7DAY_Upscale_Calc_Result");
            Process.ProcessParameters.RegisterParameter(2412, "7DAY_Upscale_Injection_Validated");
            Process.ProcessParameters.RegisterParameter(2293, "7DAY_Zero_Calc_APS");
            Process.ProcessParameters.RegisterParameter(2294, "7DAY_Zero_Calc_Result");
            Process.ProcessParameters.RegisterParameter(2411, "7DAY_Zero_Injection_Validated");
            Process.ProcessParameters.RegisterParameter(2100, "Simultaneous_APPE_Runs");
            Process.ProcessParameters.RegisterParameter(1186, "Simultaneous_Linearity_Injection_for_Alternate_Range");
            Process.ProcessParameters.RegisterParameter(1163, "Simultaneous_Linearity_Injections");
            Process.ProcessParameters.RegisterParameter(1278, "Simultaneous_RATA_Runs");
            Process.ProcessParameters.RegisterParameter(2393, "Simultaneous_Unit_Default_Runs");
            Process.ProcessParameters.RegisterParameter(1557, "SLC_Collection_Period");
            Process.ProcessParameters.RegisterParameter(531, "Span_Records");
            Process.ProcessParameters.RegisterParameter(459, "System_Component_Records");
            Process.ProcessParameters.RegisterParameter(3220, "System_Parameter_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(1675, "System_RATA_Summary_Records");
            Process.ProcessParameters.RegisterParameter(1635, "System_System_Component_Records");
            Process.ProcessParameters.RegisterParameter(1721, "Test_Basis_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(1397, "Test_Begin_Date_Valid");
            Process.ProcessParameters.RegisterParameter(1575, "Test_Begin_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(1574, "Test_Begin_Minute_Valid");
            Process.ProcessParameters.RegisterParameter(1576, "Test_Dates_Consistent");
            Process.ProcessParameters.RegisterParameter(1396, "Test_End_Date_Valid");
            Process.ProcessParameters.RegisterParameter(1572, "Test_End_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(1573, "Test_End_Minute_Valid");
            Process.ProcessParameters.RegisterParameter(2194, "Test_Extension_Exemption_Begin_Date");
            Process.ProcessParameters.RegisterParameter(2195, "Test_Extension_Exemption_End_Date");
            Process.ProcessParameters.RegisterParameter(1878, "Test_Extension_Exemption_Records");
            Process.ProcessParameters.RegisterParameter(1860, "Test_Number_Valid");
            Process.ProcessParameters.RegisterParameter(1961, "Test_Qualification_Records");
            Process.ProcessParameters.RegisterParameter(1160, "Test_Reason_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(2200, "Test_Reporting_Period_Begin_Date");
            Process.ProcessParameters.RegisterParameter(1718, "Test_Reporting_Period_Valid");
            Process.ProcessParameters.RegisterParameter(1927, "Test_Result_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(1977, "Test_Span_Determined");
            Process.ProcessParameters.RegisterParameter(1164, "Test_Span_Scale_Valid");
            Process.ProcessParameters.RegisterParameter(1165, "Test_Span_Value");
            Process.ProcessParameters.RegisterParameter(1476, "Test_Tolerances_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(3060, "Test_Type_to_Required_Test_Code_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(2022, "Transmitter_Transducer_Test_Calc_Result");
            Process.ProcessParameters.RegisterParameter(2028, "Transmitter_Transducer_Test_Component_Type_Valid");
            Process.ProcessParameters.RegisterParameter(2029, "Transmitter_Transducer_Test_Records");
            Process.ProcessParameters.RegisterParameter(2031, "Transmitter_Transducer_Test_Result_Determined");
            Process.ProcessParameters.RegisterParameter(2261, "TValues_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(2405, "Unit_Default_Flagged_Level_Sum_Reference_Value");
            Process.ProcessParameters.RegisterParameter(2406, "Unit_Default_Flagged_NOx_Rate");
            Process.ProcessParameters.RegisterParameter(2403, "Unit_Default_Flagged_Op_Level");
            Process.ProcessParameters.RegisterParameter(2409, "Unit_Default_Fuel_Valid");
            Process.ProcessParameters.RegisterParameter(2450, "Unit_Default_Incomplete_Level");
            Process.ProcessParameters.RegisterParameter(2401, "Unit_Default_Last_Op_Level");
            Process.ProcessParameters.RegisterParameter(2380, "Unit_Default_Last_Run_Number");
            Process.ProcessParameters.RegisterParameter(2381, "Unit_Default_Level_Count");
            Process.ProcessParameters.RegisterParameter(2382, "Unit_Default_Level_Run_Count");
            Process.ProcessParameters.RegisterParameter(2383, "Unit_Default_Level_Sum_Reference_Value");
            Process.ProcessParameters.RegisterParameter(2384, "Unit_Default_Maximum_NOx_Rate");
            Process.ProcessParameters.RegisterParameter(2408, "Unit_Default_NOx_Rate_Determined");
            Process.ProcessParameters.RegisterParameter(2378, "Unit_Default_Run_Records");
            Process.ProcessParameters.RegisterParameter(2385, "Unit_Default_Run_Sequence");
            Process.ProcessParameters.RegisterParameter(2394, "Unit_Default_Run_Sequence_Consecutive");
            Process.ProcessParameters.RegisterParameter(2400, "Unit_Default_Run_Sequence_Valid");
            Process.ProcessParameters.RegisterParameter(2386, "Unit_Default_Run_Times_Valid");
            Process.ProcessParameters.RegisterParameter(2404, "Unit_Default_Run_Used_Indicators_Consistent");
            Process.ProcessParameters.RegisterParameter(2387, "Unit_Default_Test_Begin_Date");
            Process.ProcessParameters.RegisterParameter(2388, "Unit_Default_Test_Begin_Hour");
            Process.ProcessParameters.RegisterParameter(2389, "Unit_Default_Test_Begin_Minute");
            Process.ProcessParameters.RegisterParameter(2390, "Unit_Default_Test_End_Date");
            Process.ProcessParameters.RegisterParameter(2391, "Unit_Default_Test_End_Hour");
            Process.ProcessParameters.RegisterParameter(2392, "Unit_Default_Test_End_Minute");
            Process.ProcessParameters.RegisterParameter(2410, "Unit_Default_Test_NOx_Rate");
            Process.ProcessParameters.RegisterParameter(2377, "Unit_Default_Test_Records");
            Process.ProcessParameters.RegisterParameter(384, "Unit_Stack_Configuration_Records");
            Process.ProcessParameters.RegisterParameter(1626, "Upscale_Calibration_Injection_Valid");
            Process.ProcessParameters.RegisterParameter(1979, "Upscale_OOC_Gas_Level_Valid");
            Process.ProcessParameters.RegisterParameter(3235, "Valid_PGVP_Record");
            Process.ProcessParameters.RegisterParameter(1627, "Zero_Calibration_Injection_Valid");
        }
    }
}
