//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ECMPS.Checks.Mp.Parameters
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using ECMPS.Checks.CheckEngine;
    using ECMPS.Checks.CheckEngine.SpecialParameterClasses;
    using ECMPS.Checks.TypeUtilities;
    
    
    /// Parameter class for the Mp process
    public sealed class MpParameters
    {
        
        // Storage field for property 'Process'
        private static cProcess _process;
        
        // Storage field for property 'Category'
        private static cCategory _category;
        
        /// The process object for the current evaluation process.  Set by the actual process during initialization.
        public static cProcess Process
        {
            get
            {
                return _process;
            }
        }
        
        /// The current category object set at the beginning of the category's processing of checks and nulled at the end of the processing.
        public static cCategory Category
        {
            get
            {
                return _category;
            }
            set
            {
                _category = value;
            }
        }
        
        /// <summary>
        /// Indicates if location has an invalid location evaluation period.
        /// </summary>
        public static bool? AbortLocationEvaluation
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Abort_Location_Evaluation")));
            }
            set
            {
                MpParameters.SetCheckParameter("Abort_Location_Evaluation", value);
            }
        }
        
        /// <summary>
        /// Indicates if the unit is affected by a program.
        /// </summary>
        public static bool? AffectedUnit
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Affected_Unit")));
            }
            set
            {
                MpParameters.SetCheckParameter("Affected_Unit", value);
            }
        }
        
        /// <summary>
        /// Shows Active/Inactive Status for a Component
        /// </summary>
        public static bool? AnalyzerRangeActive
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Analyzer_Range_Active")));
            }
            set
            {
                MpParameters.SetCheckParameter("Analyzer_Range_Active", value);
            }
        }
        
        /// <summary>
        /// A lookup table of Analyzer Range Codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.AnalyzerRangeCodeRow> AnalyzerRangeCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Analyzer_Range_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.AnalyzerRangeCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Analyzer_Range_Code_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Analyzer_Range_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Analyzer Range Code is valid.
        /// </summary>
        public static bool? AnalyzerRangeCodeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Analyzer_Range_Code_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Analyzer_Range_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Start Date and Hour is prior to the End Date and Hour for Analyzer Range.
        /// </summary>
        public static bool? AnalyzerRangeDatesAndHoursConsistent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Analyzer_Range_Dates_and_Hours_Consistent")));
            }
            set
            {
                MpParameters.SetCheckParameter("Analyzer_Range_Dates_and_Hours_Consistent", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the value reported is Valid.
        /// </summary>
        public static bool? AnalyzerRangeEndDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Analyzer_Range_End_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Analyzer_Range_End_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the value reported is valid.
        /// </summary>
        public static bool? AnalyzerRangeEndHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Analyzer_Range_End_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Analyzer_Range_End_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// The first date that the Analyzer Range is active during an evaluation period.
        /// </summary>
        public static DateTime? AnalyzerRangeEvaluationBeginDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Analyzer_Range_Evaluation_Begin_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Analyzer_Range_Evaluation_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// The first hour that the Analyzer Range is active during an evaluation period.
        /// </summary>
        public static int? AnalyzerRangeEvaluationBeginHour
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("Analyzer_Range_Evaluation_Begin_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("Analyzer_Range_Evaluation_Begin_Hour", value);
            }
        }
        
        /// <summary>
        /// The last date that the Analyzer Range is active during an evaluation period.
        /// </summary>
        public static DateTime? AnalyzerRangeEvaluationEndDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Analyzer_Range_Evaluation_End_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Analyzer_Range_Evaluation_End_Date", value);
            }
        }
        
        /// <summary>
        /// The last hour that the Analyzer Range is active during an evaluation period.
        /// </summary>
        public static int? AnalyzerRangeEvaluationEndHour
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("Analyzer_Range_Evaluation_End_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("Analyzer_Range_Evaluation_End_Hour", value);
            }
        }
        
        /// <summary>
        /// A collection of records for all Analyzer Range records for the component with the associated component information.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwAnalyzerRangeRow> AnalyzerRangeRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Analyzer_Range_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwAnalyzerRangeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Analyzer_Range_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Analyzer_Range_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Analyzer Range Start Date is Valid.
        /// </summary>
        public static bool? AnalyzerRangeStartDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Analyzer_Range_Start_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Analyzer_Range_Start_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Analyzer Range Start Hour is Valid.
        /// </summary>
        public static bool? AnalyzerRangeStartHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Analyzer_Range_Start_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Analyzer_Range_Start_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// A method that is required for a formula.
        /// </summary>
        public static string AppropriateMethodForFormula
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Appropriate_Method_For_Formula")));
            }
            set
            {
                MpParameters.SetCheckParameter("Appropriate_Method_For_Formula", value);
            }
        }
        
        /// <summary>
        /// A system type or component type and basis that is appropriate for a formula.
        /// </summary>
        public static string AppropriateSystemOrComponentForFormula
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Appropriate_System_or_Component_for_Formula")));
            }
            set
            {
                MpParameters.SetCheckParameter("Appropriate_System_or_Component_for_Formula", value);
            }
        }
        
        /// <summary>
        /// The first date that the Location Attribute record is active during an evaluation period.
        /// </summary>
        public static DateTime? AttributeEvaluationBeginDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Attribute_Evaluation_Begin_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Attribute_Evaluation_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// The last date that the Location Attribute record is active during an evaluation period.
        /// </summary>
        public static DateTime? AttributeEvaluationEndDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Attribute_Evaluation_End_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Attribute_Evaluation_End_Date", value);
            }
        }
        
        /// <summary>
        /// A lookup table of Bypass Approach Codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.BypassApproachCodeRow> BypassApproachCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Bypass_Approach_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.BypassApproachCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Bypass_Approach_Code_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Bypass_Approach_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The recalculated Average Percent Value in the Monitoring Qualification Percent record.
        /// </summary>
        public static decimal? CalculatedAveragePercentValue
        {
            get
            {
                return ((decimal?)(MpParameters.GetCheckParameter("Calculated_Average_Percent_Value")));
            }
            set
            {
                MpParameters.SetCheckParameter("Calculated_Average_Percent_Value", value);
            }
        }
        
        /// <summary>
        /// Combines Method Records and MATS (Supplemental) Method Records into a single set.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckMp.Function.CombinedMethods> CombinedFacilityMethodRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Combined_Facility_Method_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckMp.Function.CombinedMethods>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Combined_Facility_Method_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Combined_Facility_Method_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Shows Active/Inactive Status for a Component
        /// </summary>
        public static bool? ComponentActive
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Component_Active")));
            }
            set
            {
                MpParameters.SetCheckParameter("Component_Active", value);
            }
        }
        
        /// <summary>
        /// Analyzer Range Records linked to the component.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.AnalyzerRangeRow> ComponentAnalyzerRangeRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Component_Analyzer_Range_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.AnalyzerRangeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Component_Analyzer_Range_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Component_Analyzer_Range_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the value reported in the field is valid.
        /// </summary>
        public static bool? ComponentBasisCodeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Component_Basis_Code_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Component_Basis_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the value in the field is valid.
        /// </summary>
        public static bool? ComponentComponentTypeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Component_Component_Type_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Component_Component_Type_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Start Date and Hour is prior to the End Date and Hour in every System Component record for the Component.
        /// </summary>
        public static bool? ComponentDatesAndHoursConsistent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Component_Dates_and_Hours_Consistent")));
            }
            set
            {
                MpParameters.SetCheckParameter("Component_Dates_and_Hours_Consistent", value);
            }
        }
        
        /// <summary>
        /// The first date that the component is active during an evaluation period.
        /// </summary>
        public static DateTime? ComponentEvaluationBeginDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Component_Evaluation_Begin_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Component_Evaluation_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// The first hour that the component is active during an evaluation period.
        /// </summary>
        public static int? ComponentEvaluationBeginHour
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("Component_Evaluation_Begin_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("Component_Evaluation_Begin_Hour", value);
            }
        }
        
        /// <summary>
        /// The last date that the component is active during an evaluation period.
        /// </summary>
        public static DateTime? ComponentEvaluationEndDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Component_Evaluation_End_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Component_Evaluation_End_Date", value);
            }
        }
        
        /// <summary>
        /// The last hour that the component is active during an evaluation period.
        /// </summary>
        public static int? ComponentEvaluationEndHour
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("Component_Evaluation_End_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("Component_Evaluation_End_Hour", value);
            }
        }
        
        /// <summary>
        /// The emission parameter monitored by the component.
        /// </summary>
        public static string ComponentParameterCode
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Component_Parameter_Code")));
            }
            set
            {
                MpParameters.SetCheckParameter("Component_Parameter_Code", value);
            }
        }
        
        /// <summary>
        /// Component Records at location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwComponentRow> ComponentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Component_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwComponentRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Component_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Component_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Appropriate Sample Acquisition Method Codes for Component Type and Basis.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ComponentTypeAndBasisToSampleAcquisitionMethodRow> ComponentTypeAndBasisToSampleAcquisitionMethodCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Component_Type_And_Basis_To_Sample_Acquisition_Method_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ComponentTypeAndBasisToSampleAcquisitionMethodRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Component_Type_And_Basis_To_Sample_Acquisition_Method_Cross_Check_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Component_Type_And_Basis_To_Sample_Acquisition_Method_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// List of appropriate span methods for component type and span scale.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ComponentTypeAndSpanScaleToSpanMethodRow> ComponentTypeAndSpanScaleToSpanMethodCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Component_Type_And_Span_Scale_To_Span_Method_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ComponentTypeAndSpanScaleToSpanMethodRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Component_Type_And_Span_Scale_To_Span_Method_Cross_Check_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Component_Type_And_Span_Scale_To_Span_Method_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// A lookup table of Component Type Codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.ComponentTypeCodeRow> ComponentTypeCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Component_Type_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.ComponentTypeCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Component_Type_Code_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Component_Type_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the control is active.
        /// </summary>
        public static bool? ControlActiveStatus
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Control_Active_Status")));
            }
            set
            {
                MpParameters.SetCheckParameter("Control_Active_Status", value);
            }
        }
        
        /// <summary>
        /// Control Code Lookup Table
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.ControlCodeRow> ControlCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Control_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.ControlCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Control_Code_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Control_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Control Code reported is Valid.
        /// </summary>
        public static bool? ControlCodeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Control_Code_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Control_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// Date on which evaluation period ends for the control record.
        /// </summary>
        public static DateTime? ControlEvaluationEndDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Control_Evaluation_End_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Control_Evaluation_End_Date", value);
            }
        }
        
        /// <summary>
        /// Date on which evaluation period begins for the control record.
        /// </summary>
        public static DateTime? ControlEvaluationStartDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Control_Evaluation_Start_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Control_Evaluation_Start_Date", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Control Dates reported are Consistent.
        /// </summary>
        public static bool? ControlInstallDateConsistentWithRetireDate
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Control_Install_Date_Consistent_With_Retire_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Control_Install_Date_Consistent_With_Retire_Date", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the Control Install Date reported is Valid.
        /// </summary>
        public static bool? ControlInstallDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Control_Install_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Control_Install_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the Control Parameter Code reported is Valid.
        /// </summary>
        public static bool? ControlParameterCodeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Control_Parameter_Code_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Control_Parameter_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// Control records with control info included.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.UnitControlRow> ControlRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Control_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.UnitControlRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Control_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Control_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether the Control Retire Date reported is Valid.
        /// </summary>
        public static bool? ControlRetireDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Control_Retire_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Control_Retire_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// List of appropriate unit types for the control equipment.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ControlToUnitTypeCrossCheckTableRow> ControlToUnitTypeCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Control_to_Unit_Type_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ControlToUnitTypeCrossCheckTableRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Control_to_Unit_Type_Cross_Check_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Control_to_Unit_Type_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains the cross check table that ties MATS Supplemental Compliance Parameters to valid Methods.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.MatsSupplementalComplianceParameterToMethodRow> CrosscheckMatssupplementalcomplianceparametertomethod
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("CrossCheck_MatsSupplementalComplianceParameterToMethod")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.MatsSupplementalComplianceParameterToMethodRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("CrossCheck_MatsSupplementalComplianceParameterToMethod", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("CrossCheck_MatsSupplementalComplianceParameterToMethod", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// This parameter contains the Program Parameter to Location Type cross check table.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ProgramParameterToLocationTypeRow> CrosscheckProgramparametertolocationtype
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("CrossCheck_ProgramParameterToLocationType")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ProgramParameterToLocationTypeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("CrossCheck_ProgramParameterToLocationType", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("CrossCheck_ProgramParameterToLocationType", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// This parameter contains the Program Parameter to Method Code cross check table.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ProgramParameterToMethodCodeRow> CrosscheckProgramparametertomethodcode
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("CrossCheck_ProgramParameterToMethodCode")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ProgramParameterToMethodCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("CrossCheck_ProgramParameterToMethodCode", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("CrossCheck_ProgramParameterToMethodCode", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// This parameter contains the Program Parameter to Method Parameter cross check table.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ProgramParameterToMethodParameterRow> CrosscheckProgramparametertomethodparameter
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("CrossCheck_ProgramParameterToMethodParameter")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ProgramParameterToMethodParameterRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("CrossCheck_ProgramParameterToMethodParameter", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("CrossCheck_ProgramParameterToMethodParameter", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// This parameter contains the Program Parameter to Severity cross check table.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ProgramParameterToSeverityRow> CrosscheckProgramparametertoseverity
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("CrossCheck_ProgramParameterToSeverity")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ProgramParameterToSeverityRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("CrossCheck_ProgramParameterToSeverity", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("CrossCheck_ProgramParameterToSeverity", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// List of information for the Current record in Analyzer Range.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwAnalyzerRangeRow CurrentAnalyzerRange
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Analyzer_Range")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwAnalyzerRangeRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Analyzer_Range", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Analyzer_Range", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Contains the current begin date and hour combined into a single date element.
        /// </summary>
        public static DateTime? CurrentBeginDateAndHour
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Current_Begin_Date_and_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("Current_Begin_Date_and_Hour", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the Begin Hour for the current record is valid.
        /// </summary>
        public static bool? CurrentBeginDateAndHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Current_Begin_Date_And_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Current_Begin_Date_And_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the Begin Date for the current record is valid.
        /// </summary>
        public static bool? CurrentBeginDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Current_Begin_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Current_Begin_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// List of information for the Current record in Component.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwComponentRow CurrentComponent
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Component")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwComponentRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Component", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Component", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current control record being evaluated.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.Table.UnitControlRow CurrentControl
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Control")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.Table.UnitControlRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Control", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Control", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether the current record's begin date and hour and end date and hour are valid and that the begin date and hour is before the end date and hour.
        /// </summary>
        public static bool? CurrentDatesAndHoursConsistent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Current_Dates_And_Hours_Consistent")));
            }
            set
            {
                MpParameters.SetCheckParameter("Current_Dates_And_Hours_Consistent", value);
            }
        }
        
        /// <summary>
        /// Collection of Data Elements for the Default being evaluated (values from Monitor_Default)
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorDefaultRow CurrentDefault
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Default")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorDefaultRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Default", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Default", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Contains the current end date and hour combined into a single date element.
        /// </summary>
        public static DateTime? CurrentEndDateAndHour
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Current_End_Date_and_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("Current_End_Date_and_Hour", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the End Hour for the current record is valid.
        /// </summary>
        public static bool? CurrentEndDateAndHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Current_End_Date_And_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Current_End_Date_And_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the End Date for the current record is valid.
        /// </summary>
        public static bool? CurrentEndDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Current_End_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Current_End_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// List/Collection of information for the formula being evaluated.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorFormulaRow CurrentFormula
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Formula")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorFormulaRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Formula", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Formula", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Collection of Data Elements for the Fuel being evaluated (values from Unit_Fuel)
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationFuelRow CurrentFuel
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Fuel")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationFuelRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Fuel", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Fuel", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Collection of Data Elements for the Fuel Flow Record being evaluated
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.Table.SystemFuelFlowRow CurrentFuelFlow
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Fuel_Flow")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.Table.SystemFuelFlowRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Fuel_Flow", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Fuel_Flow", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Collection of Data Elements for the Load being evaluated
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorLoadRow CurrentLoad
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Load")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorLoadRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Load", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Load", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The monitor location being evaluated including linked stack information (active/retire date) and unit information (non load based indicator).
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpLocationRow CurrentLocation
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Location")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpLocationRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Location", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Location", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Monitor Location Attribute record.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpLocationAttributeRow CurrentLocationAttribute
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Location_Attribute")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpLocationAttributeRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Location_Attribute", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Location_Attribute", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Collection of Data Elements for the Method being evaluated (values from Monitor_Method)
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorMethodRow CurrentMethod
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Method")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorMethodRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Method", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Method", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether the method code for the current record is valid.
        /// </summary>
        public static bool? CurrentMethodValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Current_Method_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Current_Method_Valid", value);
            }
        }
        
        /// <summary>
        /// Collection of Data Elements for the MonitoringPlanComment being evaluated 
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorPlanCommentRow CurrentMonitoringPlanComment
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Monitoring_Plan_Comment")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorPlanCommentRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Monitoring_Plan_Comment", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Monitoring_Plan_Comment", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// List providing all Monitoring Plan Configuration information for the current Monitoring Plan.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorPlanRow CurrentMonitoringPlanConfiguration
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Monitoring_Plan_Configuration")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorPlanRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Monitoring_Plan_Configuration", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Monitoring_Plan_Configuration", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether the parameter code is valid for the current record.
        /// </summary>
        public static bool? CurrentParameterValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Current_Parameter_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Current_Parameter_Valid", value);
            }
        }
        
        /// <summary>
        /// This is a list/collection of information about the program being evaluated.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationProgramRow CurrentProgram
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Program")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationProgramRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Program", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Program", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Indicates if current Unit Program record is active.
        /// </summary>
        public static bool? CurrentProgramActive
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Current_Program_Active")));
            }
            set
            {
                MpParameters.SetCheckParameter("Current_Program_Active", value);
            }
        }
        
        /// <summary>
        /// A data row contiaining a specific PROGRAM_PARAMETER row.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckMp.Function.UnitProgramParameter CurrentProgramParameter
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Program_Parameter")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckMp.Function.UnitProgramParameter(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Program_Parameter", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Program_Parameter", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether the current Unit Program Parameter record is active.
        /// </summary>
        public static bool? CurrentProgramParameterActive
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Current_Program_Parameter_Active")));
            }
            set
            {
                MpParameters.SetCheckParameter("Current_Program_Parameter_Active", value);
            }
        }
        
        /// <summary>
        /// This is a list/collection of information about the Qualification Record being evaluated.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpQualificationRow CurrentQualification
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Qualification")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpQualificationRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Qualification", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Qualification", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Indicates if current Monitor Qualification record is active.
        /// </summary>
        public static bool? CurrentQualificationActive
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Current_Qualification_Active")));
            }
            set
            {
                MpParameters.SetCheckParameter("Current_Qualification_Active", value);
            }
        }
        
        /// <summary>
        /// Contains the Monitor Qualification LEE record currently being processed.
        ///
        ///Set in the Monitor Qualification LEE Category.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckMp.Function.MonitorQualificationLEEParameter CurrentQualificationLee
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Qualification_LEE")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckMp.Function.MonitorQualificationLEEParameter(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Qualification_LEE", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Qualification_LEE", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// This is a list/collection of information about the Qualification LME Record being evaluated.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorQualificationLmeRow CurrentQualificationLme
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Qualification_LME")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorQualificationLmeRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Qualification_LME", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Qualification_LME", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Monitoring Qualification Percent Record being evaluated along with associated Monitor Qualification data.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorQualificationPctRow CurrentQualificationPercent
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Qualification_Percent")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorQualificationPctRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Qualification_Percent", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Qualification_Percent", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Collection of Data Elements for the span being evaluated.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSpanRow CurrentSpan
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Span")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSpanRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Span", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Span", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Collection of Data Elements for the Monitoring System being evaluated
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemRow CurrentSystem
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_System")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_System", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_System", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Monitor_System_Component being evaluated, including the fields for the associated component record.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemComponentRow CurrentSystemComponent
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_System_Component")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorSystemComponentRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_System_Component", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_System_Component", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Data related to the unit being evaluated.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorLocationRow CurrentUnit
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Unit")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorLocationRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Unit", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Unit", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Current Unit Capacity record information.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.Table.UnitCapacityRow CurrentUnitCapacity
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Unit_Capacity")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.Table.UnitCapacityRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Unit_Capacity", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Unit_Capacity", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The Unit Stack Configuration record being evaluated.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.Table.UnitStackConfigurationRow CurrentUnitStackConfiguration
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_Unit_Stack_Configuration")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.Table.UnitStackConfigurationRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_Unit_Stack_Configuration", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_Unit_Stack_Configuration", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Collection of Data Elements for the WAF being evaluated (values from RECT_DUCT_WAF).
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.Dbo.View.VwRectDuctWafRow CurrentWaf
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("Current_WAF")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.Dbo.View.VwRectDuctWafRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Current_WAF", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Current_WAF", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Default is active during the Evaluation Period.
        /// </summary>
        public static bool? DefaultActiveStatus
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Default_Active_Status")));
            }
            set
            {
                MpParameters.SetCheckParameter("Default_Active_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates if monitor default start date and hour is prior to end date and hour.
        /// </summary>
        public static bool? DefaultDatesAndHoursConsistent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Default_Dates_and_Hours_Consistent")));
            }
            set
            {
                MpParameters.SetCheckParameter("Default_Dates_and_Hours_Consistent", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Default End Date is valid.
        /// </summary>
        public static bool? DefaultEndDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Default_End_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Default_End_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Default End Hour is valid.
        /// </summary>
        public static bool? DefaultEndHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Default_End_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Default_End_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// The date on which the Evaluation Period begins for the Default Record.
        /// </summary>
        public static DateTime? DefaultEvaluationBeginDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Default_Evaluation_Begin_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Default_Evaluation_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// The hour in which the Evaluation Period begins for the Default Record.
        /// </summary>
        public static int? DefaultEvaluationBeginHour
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("Default_Evaluation_Begin_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("Default_Evaluation_Begin_Hour", value);
            }
        }
        
        /// <summary>
        /// The date on which the Evaluation Period ends for the Default Record.
        /// </summary>
        public static DateTime? DefaultEvaluationEndDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Default_Evaluation_End_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Default_Evaluation_End_Date", value);
            }
        }
        
        /// <summary>
        /// The hour in which the Evaluation Period ends for the Default Record.
        /// </summary>
        public static int? DefaultEvaluationEndHour
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("Default_Evaluation_End_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("Default_Evaluation_End_Hour", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the Default Fuel Code is Valid.
        /// </summary>
        public static bool? DefaultFuelCodeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Default_Fuel_Code_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Default_Fuel_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// Links Default Parameter, Boiler Type, and Fuel Type to Default Value for generic default emission rates.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.DefaultParameterBoilerTypeAndFuelTypeToDefaultValueRow> DefaultParameterBoilerTypeAndFuelTypeToDefaultValueCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Default_Parameter,_Boiler_Type,_And_Fuel_Type_To_Default_Value_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.DefaultParameterBoilerTypeAndFuelTypeToDefaultValueRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Default_Parameter,_Boiler_Type,_And_Fuel_Type_To_Default_Value_Cross_Check_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Default_Parameter,_Boiler_Type,_And_Fuel_Type_To_Default_Value_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Default Parameter Code Valid.
        /// </summary>
        public static bool? DefaultParameterCodeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Default_Parameter_Code_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Default_Parameter_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// Cross check table linking Parameter Code to Parameter Category filtered on Category Code equal to "DEFAULT"
        ///
        ///Display: Column 1 only.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ParameterToCategoryRow> DefaultParameterList
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Default_Parameter_List")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ParameterToCategoryRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Default_Parameter_List", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Default_Parameter_List", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// List of DefaultPurposeCodes appropriate for the ParameterCode.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.DefaultParameterToPurposeRow> DefaultParameterToPurposeCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Default_Parameter_To_Purpose_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.DefaultParameterToPurposeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Default_Parameter_To_Purpose_Cross_Check_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Default_Parameter_To_Purpose_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// List of DefaultSourceCodes appropriate for the ParameterCode.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.DefaultParameterToSourceOfValueRow> DefaultParameterToSourceOfValueCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Default_Parameter_To_Source_Of_Value_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.DefaultParameterToSourceOfValueRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Default_Parameter_To_Source_Of_Value_Cross_Check_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Default_Parameter_To_Source_Of_Value_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// A lookup table of Default Purpose Codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.DefaultPurposeCodeRow> DefaultPurposeCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Default_Purpose_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.DefaultPurposeCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Default_Purpose_Code_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Default_Purpose_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Default Purpose Code is Valid.
        /// </summary>
        public static bool? DefaultPurposeCodeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Default_Purpose_Code_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Default_Purpose_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// Default records with default info included.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorDefaultRow> DefaultRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Default_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorDefaultRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Default_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Default_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// A lookup table of Default Source Codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.DefaultSourceCodeRow> DefaultSourceCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Default_Source_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.DefaultSourceCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Default_Source_Code_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Default_Source_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Default Source Code is Valid.
        /// </summary>
        public static bool? DefaultSourceCodeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Default_Source_Code_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Default_Source_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Default Start Date is valid.
        /// </summary>
        public static bool? DefaultStartDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Default_Start_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Default_Start_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Default Start Hour is valid.
        /// </summary>
        public static bool? DefaultStartHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Default_Start_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Default_Start_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// The unit fuel represented by the fuel code in the monitoring default record.
        /// </summary>
        public static string DefaultUnitFuel
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Default_Unit_Fuel")));
            }
            set
            {
                MpParameters.SetCheckParameter("Default_Unit_Fuel", value);
            }
        }
        
        /// <summary>
        /// Indicates if the Default Value is Valid.
        /// </summary>
        public static bool? DefaultValueValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Default_Value_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Default_Value_Valid", value);
            }
        }
        
        /// <summary>
        /// The date when new rules for ECMPS go into effect for the MP evaluation.
        /// </summary>
        public static DateTime? EcmpsMpBeginDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("ECMPS_MP_Begin_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("ECMPS_MP_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// All quarterly emissions file record for the configuration whose emissions files is being evaluated.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemEmissionsRow> EmissionsFileRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Emissions_File_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwEvemEmissionsRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Emissions_File_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Emissions_File_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicator of whether we should continue to evaluate this monitoring plan.  The value is set in the MONPLAN cataegory and is checked in the MP process immediately after that category.
        /// </summary>
        public static bool? EvaluateMonitoringPlan
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Evaluate_Monitoring_Plan")));
            }
            set
            {
                MpParameters.SetCheckParameter("Evaluate_Monitoring_Plan", value);
            }
        }
        
        /// <summary>
        /// The begin date of the evaluation period for the current record.
        ///
        ///This is the parameter value that replaces directly accessing the Evaluation Begin Date property of the Check Engine object.
        /// </summary>
        public static DateTime? EvaluationBeginDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Evaluation_Begin_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Evaluation_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// The end date of the evaluation period for the current record.
        ///
        ///This is the parameter value that replaces directly accessing the Evaluation EndDate property of the Check Engine object.
        /// </summary>
        public static DateTime? EvaluationEndDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Evaluation_End_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Evaluation_End_Date", value);
            }
        }
        
        /// <summary>
        /// Load records for all of a facility's locations that were retrieved for the evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorLoadRow> FacilityLoadRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Facility_Load_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorLoadRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Facility_Load_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Facility_Load_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The monitor location attribute records for all of a facility's locations that were retrieved for the evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationAttributeRow> FacilityLocationAttributeRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Facility_Location_Attribute_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationAttributeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Facility_Location_Attribute_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Facility_Location_Attribute_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The monitor location records for the facility of the records being evaluated.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorLocationRow> FacilityLocationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Facility_Location_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorLocationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Facility_Location_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Facility_Location_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Method records for all of a facility's locations that were retrieved for the evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorMethodRow> FacilityMethodRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Facility_Method_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorMethodRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Facility_Method_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Facility_Method_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Monitor Qualification records for all of a facility's locations that were retrieved for the evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.MonitorQualificationRow> FacilityQualificationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Facility_Qualification_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.MonitorQualificationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Facility_Qualification_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Facility_Qualification_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The System records for all of a facility's locations that were retrieved for the evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemRow> FacilitySystemRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Facility_System_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Facility_System_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Facility_System_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The unit stack configuration records for all of a facility's locations that were retrieved for the evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUnitStackConfigurationRow> FacilityUnitStackConfigurationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Facility_Unit_Stack_Configuration_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUnitStackConfigurationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Facility_Unit_Stack_Configuration_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Facility_Unit_Stack_Configuration_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The first ECMPS Reporting Period for the related facility.
        /// </summary>
        public static int? FirstEcmpsReportingPeriod
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("First_ECMPS_Reporting_Period")));
            }
            set
            {
                MpParameters.SetCheckParameter("First_ECMPS_Reporting_Period", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not Flow Span value reported is Valid.
        /// </summary>
        public static bool? FlowSpanValueValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Flow_Span_Value_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Flow_Span_Value_Valid", value);
            }
        }
        
        /// <summary>
        /// This indicates if an active flow system is present.
        /// </summary>
        public static bool? FlowSystemActivePresent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Flow_System_Active_Present")));
            }
            set
            {
                MpParameters.SetCheckParameter("Flow_System_Active_Present", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Formula is active during the Evaluation Period.
        /// </summary>
        public static bool? FormulaActiveStatus
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Formula_Active_Status")));
            }
            set
            {
                MpParameters.SetCheckParameter("Formula_Active_Status", value);
            }
        }
        
        /// <summary>
        /// A lookup table of Equation Codes with the associated Parameter Code.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.EquationCodeRow> FormulaCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Formula_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.EquationCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Formula_Code_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Formula_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Links formula codes to the f-factors parameters that are factors in the formula.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FormulaCodeToFFactorParameterRow> FormulaCodeToFFactorParameterCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Formula_Code_To_F-factor_Parameter_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FormulaCodeToFFactorParameterRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Formula_Code_To_F-factor_Parameter_Cross_Check_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Formula_Code_To_F-factor_Parameter_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether Formula Equation Code is valid.
        /// </summary>
        public static bool? FormulaCodeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Formula_Code_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Formula_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the Start Date and Hour are prior to the End Date and Hour for the Formula.
        /// </summary>
        public static bool? FormulaDatesAndHoursConsistent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Formula_Dates_and_Hours_Consistent")));
            }
            set
            {
                MpParameters.SetCheckParameter("Formula_Dates_and_Hours_Consistent", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Formula End Date is Valid
        /// </summary>
        public static bool? FormulaEndDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Formula_End_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Formula_End_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Formula End Hour is Valid
        /// </summary>
        public static bool? FormulaEndHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Formula_End_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Formula_End_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// The first date that the formula is active during an evaluation period.
        /// </summary>
        public static DateTime? FormulaEvaluationBeginDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Formula_Evaluation_Begin_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Formula_Evaluation_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// The first hour that the formula is active during an evaluation period.
        /// </summary>
        public static int? FormulaEvaluationBeginHour
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("Formula_Evaluation_Begin_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("Formula_Evaluation_Begin_Hour", value);
            }
        }
        
        /// <summary>
        /// The last date that the formula is active during an evaluation period.
        /// </summary>
        public static DateTime? FormulaEvaluationEndDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Formula_Evaluation_End_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Formula_Evaluation_End_Date", value);
            }
        }
        
        /// <summary>
        /// The last hour that the formula is active during an evaluation period.
        /// </summary>
        public static int? FormulaEvaluationEndHour
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("Formula_Evaluation_End_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("Formula_Evaluation_End_Hour", value);
            }
        }
        
        /// <summary>
        /// Links formula parameter and component type and basis to required formula code.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FormulaParameterAndComponentTypeAndBasisToFormulaCodeRow> FormulaParameterAndComponentTypeAndBasisToFormulaCodeCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Formula_Parameter_And_Component_Type_And_Basis_To_Formula_Code_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FormulaParameterAndComponentTypeAndBasisToFormulaCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Formula_Parameter_And_Component_Type_And_Basis_To_Formula_Code_Cross_Check_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Formula_Parameter_And_Component_Type_And_Basis_To_Formula_Code_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Cross check table linking Parameter Code to Parameter Category filtered on Category Code equal to "FORMULA"
        ///
        ///Display: Column 1 only.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ParameterToCategoryRow> FormulaParameterList
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Formula_Parameter_List")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ParameterToCategoryRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Formula_Parameter_List", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Formula_Parameter_List", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Formula Parameter Code is valid.
        /// </summary>
        public static bool? FormulaParameterValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Formula_Parameter_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Formula_Parameter_Valid", value);
            }
        }
        
        /// <summary>
        /// Formula records with formula info included
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorFormulaRow> FormulaRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Formula_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorFormulaRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Formula_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Formula_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the Formula Start Date is Valid.
        /// </summary>
        public static bool? FormulaStartDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Formula_Start_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Formula_Start_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Formula Start Hour is Valid.
        /// </summary>
        public static bool? FormulaStartHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Formula_Start_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Formula_Start_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// Cross check for formula codes with required Method Parameter and Code combinations.  The crosscheck will have a row for each valid Method Parameer and Code combination for a formula.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FormulaToRequiredMethodRow> FormulaToRequiredMethodCrosscheck
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Formula_to_Required_Method_Crosscheck")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FormulaToRequiredMethodRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Formula_to_Required_Method_Crosscheck", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Formula_to_Required_Method_Crosscheck", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains rows for each formula code with required fuels.  If for a formula one of a list of fuels is required, the cross check will contain a row for each fuel in the list.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FormulaToRequiredUnitFuelRow> FormulaToRequiredUnitFuelCrosscheck
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Formula_to_Required_Unit_Fuel_Crosscheck")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FormulaToRequiredUnitFuelRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Formula_to_Required_Unit_Fuel_Crosscheck", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Formula_to_Required_Unit_Fuel_Crosscheck", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Fuel is active during the Evaluation Period.
        /// </summary>
        public static bool? FuelActiveStatus
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Fuel_Active_Status")));
            }
            set
            {
                MpParameters.SetCheckParameter("Fuel_Active_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the Fuel Begin Date reported is Valid.
        /// </summary>
        public static bool? FuelBeginDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Fuel_Begin_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Fuel_Begin_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// A lookup table of Fuel codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.FuelCodeRow> FuelCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Fuel_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.FuelCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Fuel_Code_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Fuel_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// List of minimum and maximum moisture defautl values by fuel code.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FuelCodeToMinimumAndMaximumMoistureDefaultValueRow> FuelCodeToMinimumAndMaximumMoistureDefaultCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Fuel_Code_To_Minimum_And_Maximum_Moisture_Default_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.FuelCodeToMinimumAndMaximumMoistureDefaultValueRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Fuel_Code_To_Minimum_And_Maximum_Moisture_Default_Cross_Check_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Fuel_Code_To_Minimum_And_Maximum_Moisture_Default_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Fuell Code is valid for the Monitoring Location.
        /// </summary>
        public static bool? FuelCodeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Fuel_Code_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Fuel_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// Inidcates whether or not the Fuel Dates are Consistent.
        /// </summary>
        public static bool? FuelDatesConsistent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Fuel_Dates_Consistent")));
            }
            set
            {
                MpParameters.SetCheckParameter("Fuel_Dates_Consistent", value);
            }
        }
        
        /// <summary>
        /// A lookup table of demonstration methods associated with fuel properties.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.DemMethodCodeRow> FuelDemonstrationMethodLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Fuel_Demonstration_Method_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.DemMethodCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Fuel_Demonstration_Method_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Fuel_Demonstration_Method_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Fuel End Date is Valid.
        /// </summary>
        public static bool? FuelEndDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Fuel_End_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Fuel_End_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Date on which evaluation period begins for Fuel.
        /// </summary>
        public static DateTime? FuelEvaluationBeginDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Fuel_Evaluation_Begin_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Fuel_Evaluation_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// Date on which evaluation period ends for Fuel.
        /// </summary>
        public static DateTime? FuelEvaluationEndDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Fuel_Evaluation_End_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Fuel_Evaluation_End_Date", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Fuel Flow Record is active during the Evaluation Period.
        /// </summary>
        public static bool? FuelFlowActiveStatus
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Fuel_Flow_Active_Status")));
            }
            set
            {
                MpParameters.SetCheckParameter("Fuel_Flow_Active_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Fuel Flow Dates and Hours reported are Consistent.
        /// </summary>
        public static bool? FuelFlowDatesAndHoursConsistent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Fuel_Flow_Dates_and_Hours_Consistent")));
            }
            set
            {
                MpParameters.SetCheckParameter("Fuel_Flow_Dates_and_Hours_Consistent", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Fuel Flow End Date reported is Valid.
        /// </summary>
        public static bool? FuelFlowEndDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Fuel_Flow_End_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Fuel_Flow_End_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whehter or not the Fuel Flow End Hour reported is Valid.
        /// </summary>
        public static bool? FuelFlowEndHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Fuel_Flow_End_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Fuel_Flow_End_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// Fuel Flow Evaluation End Date
        /// </summary>
        public static DateTime? FuelFlowEvaluationEndDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Fuel_Flow_Evaluation_End_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Fuel_Flow_Evaluation_End_Date", value);
            }
        }
        
        /// <summary>
        /// Fuel Flow Evaluation End Hour
        /// </summary>
        public static DateTime? FuelFlowEvaluationEndHour
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Fuel_Flow_Evaluation_End_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("Fuel_Flow_Evaluation_End_Hour", value);
            }
        }
        
        /// <summary>
        /// Fuel Flow Evaluation Start Date
        /// </summary>
        public static DateTime? FuelFlowEvaluationStartDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Fuel_Flow_Evaluation_Start_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Fuel_Flow_Evaluation_Start_Date", value);
            }
        }
        
        /// <summary>
        /// Fuel Flow Evaluation Start Hour
        /// </summary>
        public static int? FuelFlowEvaluationStartHour
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("Fuel_Flow_Evaluation_Start_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("Fuel_Flow_Evaluation_Start_Hour", value);
            }
        }
        
        /// <summary>
        /// Fuel Flow Maximum Rate Source Code Lookup Table
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.MaxRateSourceCodeRow> FuelFlowMaximumRateSourceCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Fuel_Flow_Maximum_Rate_Source_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.MaxRateSourceCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Fuel_Flow_Maximum_Rate_Source_Code_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Fuel_Flow_Maximum_Rate_Source_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Fuel Flow Records for the system.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.SystemFuelFlowRow> FuelFlowRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Fuel_Flow_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.SystemFuelFlowRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Fuel_Flow_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Fuel_Flow_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Fuel Flow Start Date reported is Valid.
        /// </summary>
        public static bool? FuelFlowStartDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Fuel_Flow_Start_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Fuel_Flow_Start_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Fuel Flow Start Hour reported is Valid.
        /// </summary>
        public static bool? FuelFlowStartHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Fuel_Flow_Start_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Fuel_Flow_Start_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// The fuel group associated with the fuel code in the Unit Fuel record.
        /// </summary>
        public static string FuelGroup
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Fuel_Group")));
            }
            set
            {
                MpParameters.SetCheckParameter("Fuel_Group", value);
            }
        }
        
        /// <summary>
        /// A lookup table of Fuel Indicator Codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.IndicatorCodeRow> FuelIndicatorCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Fuel_Indicator_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.IndicatorCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Fuel_Indicator_Code_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Fuel_Indicator_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// List of primary and secondary fuels that have defaults, but the defaults do not cover the period of the method with FSP75 or FSP75C.
        /// </summary>
        public static string FuelsWithIncompleteDefaults
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Fuels_with_Incomplete_Defaults")));
            }
            set
            {
                MpParameters.SetCheckParameter("Fuels_with_Incomplete_Defaults", value);
            }
        }
        
        /// <summary>
        /// Contains a list of primary or secondary fuels with missing defaults.
        /// </summary>
        public static string FuelsWithMissingDefaults
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Fuels_with_Missing_Defaults")));
            }
            set
            {
                MpParameters.SetCheckParameter("Fuels_with_Missing_Defaults", value);
            }
        }
        
        /// <summary>
        /// List of required component types that were not linked to the system for the entire evaluation period.
        /// </summary>
        public static string IncompleteComponentsForSystem
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Incomplete_Components_for_System")));
            }
            set
            {
                MpParameters.SetCheckParameter("Incomplete_Components_for_System", value);
            }
        }
        
        /// <summary>
        /// A list of default parameters that are required for the current formula but do not span the entire evaluation period.
        /// </summary>
        public static string IncompleteDefaultForFormula
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Incomplete_Default_for_Formula")));
            }
            set
            {
                MpParameters.SetCheckParameter("Incomplete_Default_for_Formula", value);
            }
        }
        
        /// <summary>
        /// A list of parameters of default records that are required for the current method but do not span the entire evaluation period.
        /// </summary>
        public static string IncompleteDefaultForMethod
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Incomplete_Default_for_Method")));
            }
            set
            {
                MpParameters.SetCheckParameter("Incomplete_Default_for_Method", value);
            }
        }
        
        /// <summary>
        /// A list of parameters of default records that are required for the current system but do not span the entire evaluation period.
        /// </summary>
        public static string IncompleteDefaultForSystem
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Incomplete_Default_for_System")));
            }
            set
            {
                MpParameters.SetCheckParameter("Incomplete_Default_for_System", value);
            }
        }
        
        /// <summary>
        /// A list of fuel codes of default records that are required for the current method but do not span the entire evaluation period.
        /// </summary>
        public static string IncompleteDefaultFuelForMethod
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Incomplete_Default_Fuel_for_Method")));
            }
            set
            {
                MpParameters.SetCheckParameter("Incomplete_Default_Fuel_for_Method", value);
            }
        }
        
        /// <summary>
        /// A list of required formula parameter + equation code for a system component that are not present during the entire evaluation period.
        /// </summary>
        public static bool? IncompleteFormulaForComponent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Incomplete_Formula_for_Component")));
            }
            set
            {
                MpParameters.SetCheckParameter("Incomplete_Formula_for_Component", value);
            }
        }
        
        /// <summary>
        /// A required fuelflow system that is not active during the entire evaluation period.
        /// </summary>
        public static string IncompleteFuelSystemForMethod
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Incomplete_Fuel_System_For_Method")));
            }
            set
            {
                MpParameters.SetCheckParameter("Incomplete_Fuel_System_For_Method", value);
            }
        }
        
        /// <summary>
        /// List of fuels with Appendix E or PEMS systems that is not active during the entire evaluation period.
        /// </summary>
        public static string IncompleteNoxSystemForMethod
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Incomplete_Nox_System_For_Method")));
            }
            set
            {
                MpParameters.SetCheckParameter("Incomplete_Nox_System_For_Method", value);
            }
        }
        
        /// <summary>
        /// A list of Qual Type Codes for monitoring qualifications that are required for the current method but do not span the evaluation period.
        /// </summary>
        public static string IncompleteQualificationForMethod
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Incomplete_Qualification_for_Method")));
            }
            set
            {
                MpParameters.SetCheckParameter("Incomplete_Qualification_for_Method", value);
            }
        }
        
        /// <summary>
        /// A required system type for a monitor method that does not span the method evaluation period.
        /// </summary>
        public static string IncompleteSystemForMethod
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Incomplete_System_for_Method")));
            }
            set
            {
                MpParameters.SetCheckParameter("Incomplete_System_for_Method", value);
            }
        }
        
        /// <summary>
        /// Indicates if this is the first time a unit has reported a Monitor Qualification record for the particular QualificationTypeCode.
        /// </summary>
        public static bool? InitialQualification
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Initial_Qualification")));
            }
            set
            {
                MpParameters.SetCheckParameter("Initial_Qualification", value);
            }
        }
        
        /// <summary>
        /// A list of default parameters required when using fuel-specific missing data or bypass approach whose values are not equal to the MPC/MER/MPF in correspoding span record.
        /// </summary>
        public static string InvalidMaximumDefault
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Invalid_Maximum_Default")));
            }
            set
            {
                MpParameters.SetCheckParameter("Invalid_Maximum_Default", value);
            }
        }
        
        /// <summary>
        /// Fuels inappropriate for methodology.
        /// </summary>
        public static string InvalidMethodFuel
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Invalid_Method_Fuel")));
            }
            set
            {
                MpParameters.SetCheckParameter("Invalid_Method_Fuel", value);
            }
        }
        
        /// <summary>
        /// A list of method parameters not using CEM/AMS methods when another parameter is using a CEM method.
        /// </summary>
        public static string InvalidParametersForCemMethod
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Invalid_Parameters_for_CEM_Method")));
            }
            set
            {
                MpParameters.SetCheckParameter("Invalid_Parameters_for_CEM_Method", value);
            }
        }
        
        /// <summary>
        /// A list of method parameters not using LME methods when another parameter is using a LME method.
        /// </summary>
        public static string InvalidParametersForLmeMethod
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Invalid_Parameters_for_LME_Method")));
            }
            set
            {
                MpParameters.SetCheckParameter("Invalid_Parameters_for_LME_Method", value);
            }
        }
        
        /// <summary>
        /// Unit Type inappropriate for the Control.
        /// </summary>
        public static string InvalidUnitTypeForControl
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Invalid_Unit_Type_for_Control")));
            }
            set
            {
                MpParameters.SetCheckParameter("Invalid_Unit_Type_for_Control", value);
            }
        }
        
        /// <summary>
        /// Load Active Status for the location.
        /// </summary>
        public static bool? LoadActiveStatus
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Load_Active_Status")));
            }
            set
            {
                MpParameters.SetCheckParameter("Load_Active_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Load Dates and Hours are Consistent.
        /// </summary>
        public static bool? LoadDatesAndHoursConsistent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Load_Dates_And_Hours_Consistent")));
            }
            set
            {
                MpParameters.SetCheckParameter("Load_Dates_And_Hours_Consistent", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the Load End Date is Valid.
        /// </summary>
        public static bool? LoadEndDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Load_End_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Load_End_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Load End Hour is Valid.
        /// </summary>
        public static bool? LoadEndHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Load_End_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Load_End_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// The last date on which there should be an evaluation of the Load Record.
        /// </summary>
        public static DateTime? LoadEvaluationEndDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Load_Evaluation_End_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Load_Evaluation_End_Date", value);
            }
        }
        
        /// <summary>
        /// The last hour on which there should be an evaluation of the Load Record.
        /// </summary>
        public static int? LoadEvaluationEndHour
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("Load_Evaluation_End_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("Load_Evaluation_End_Hour", value);
            }
        }
        
        /// <summary>
        /// The first date on which there should be an evaluation of the Load Record.
        /// </summary>
        public static DateTime? LoadEvaluationStartDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Load_Evaluation_Start_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Load_Evaluation_Start_Date", value);
            }
        }
        
        /// <summary>
        /// The first hour on which there should be an evaluation of the Load Record.
        /// </summary>
        public static int? LoadEvaluationStartHour
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("Load_Evaluation_Start_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("Load_Evaluation_Start_Hour", value);
            }
        }
        
        /// <summary>
        /// This indicator indicates if this location must perform load level analysis. 
        /// </summary>
        public static bool? LoadLevelsRequired
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Load_Levels_Required")));
            }
            set
            {
                MpParameters.SetCheckParameter("Load_Levels_Required", value);
            }
        }
        
        /// <summary>
        /// Load records for current location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorLoadRow> LoadRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Load_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorLoadRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Load_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Load_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Load Start Date reported is Valid.
        /// </summary>
        public static bool? LoadStartDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Load_Start_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Load_Start_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the Load Start Hour reported is Valid.
        /// </summary>
        public static bool? LoadStartHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Load_Start_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Load_Start_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// Shows Active/Inactive Status for a Location
        /// </summary>
        public static bool? LocationActive
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Location_Active")));
            }
            set
            {
                MpParameters.SetCheckParameter("Location_Active", value);
            }
        }
        
        /// <summary>
        /// A collection of records for all Analyzer Range records for the location with the associated component information.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.AnalyzerRangeRow> LocationAnalyzerRangeRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Location_Analyzer_Range_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.AnalyzerRangeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Location_Analyzer_Range_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Location_Analyzer_Range_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Location Attribute End Date is valid for the location.
        /// </summary>
        public static bool? LocationAttributeEndDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Location_Attribute_End_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Location_Attribute_End_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// The monitor location attribute records for the location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.MonitorLocationAttributeRow> LocationAttributeRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Location_Attribute_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.MonitorLocationAttributeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Location_Attribute_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Location_Attribute_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the location reporting a location attribute record is a stack, a unit not linked to a stack, or a unit with a flow monitor.
        /// </summary>
        public static bool? LocationAttributeRecordValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Location_Attribute_Record_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Location_Attribute_Record_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Location Attribute Start Date is valid for the location.
        /// </summary>
        public static bool? LocationAttributeStartDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Location_Attribute_Start_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Location_Attribute_Start_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Unit Capacity records for the location or all units linked to the location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationCapacityRow> LocationCapacityRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Location_Capacity_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationCapacityRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Location_Capacity_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Location_Capacity_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Unit Control records which apply to the monitoring location.
        ///
        ///For a unit, this is the Unit Control records for the unit.
        ///
        ///For a stack or pipe, this is the Unit Control records for all units linked to the stack or pipe via Unit Stack Configuration records.  The  InstallDate for the location control record should be the later of the InstallDate in the Unit Control record and the StartDate in the Unit Stack Configuration record.  The  RetireDate for the location control record should be the earlier of the RetireDate in the Unit Control record and the EndDate in the Unit Stack Configuration record.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationControlRow> LocationControlRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Location_Control_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationControlRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Location_Control_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Location_Control_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if location attribute start date is prior to end date.
        /// </summary>
        public static bool? LocationDatesConsistent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Location_Dates_Consistent")));
            }
            set
            {
                MpParameters.SetCheckParameter("Location_Dates_Consistent", value);
            }
        }
        
        /// <summary>
        /// The first date that the monitor location is active during an evaluation period.
        /// </summary>
        public static DateTime? LocationEvaluationBeginDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Location_Evaluation_Begin_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Location_Evaluation_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// The last date that the monitor location is active during an evaluation period.
        /// </summary>
        public static DateTime? LocationEvaluationEndDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Location_Evaluation_End_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Location_Evaluation_End_Date", value);
            }
        }
        
        /// <summary>
        /// Fuel Records at Location linked ti associated information in the Fuel Code Lookup table.
        ///
        ///For a unit, this is the Unit Fuel records for the unit.
        ///
        ///For a stack or pipe, this is the Unit Fuel records for all units linked to the stack or pipe via Unit Stack Configuration records.  The  StartDate for the location fuel record should be the later of the StartDate in the Unit Fuel record and the StartDate in the Unit Stack Configuration record.  The  EndDate for the location fuel record should be the earlier of the EndDate in the Unit Fuel record and the EndDate in the Unit Stack Configuration record.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationFuelRow> LocationFuelRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Location_Fuel_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationFuelRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Location_Fuel_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Location_Fuel_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The parameter contains all Program Parameter rows associated with a location and includes UP_ID, UNIT_ID PRG_CODE, CLASS, EMISSION_RECORDING_BEGIN_DATE, UNIT_MONITOR_CERT_BEGIN_DATE and END_DATE columns from the parent UNIT_PROGRAM row.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckMp.Function.LocationProgramParameter> LocationProgramParameterRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Location_Program_Parameter_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckMp.Function.LocationProgramParameter>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Location_Program_Parameter_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Location_Program_Parameter_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Program records which apply to the monitoring location.
        ///
        ///For a unit, this is the Unit Program records for the unit.
        ///
        ///For a stack or pipe, this is the Unit Program records for all units linked to the stack or pipe via Unit Stack Configuration records.  The  UnitMonitorCertStartDate for the location program record should be the later of the UnitMonitorCertStartDate in the Unit Program record and the StartDate in the Unit Stack Configuration record.  The  EndDate for the location program record should be the earlier of the EndDate in the Unit Program record and the EndDate in the Unit Stack Configuration record.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationProgramRow> LocationProgramRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Location_Program_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationProgramRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Location_Program_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Location_Program_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Unit Program Reporting Frequency records which apply to the monitoring location.
        ///
        ///For a unit, this is the Unit Reporting Frequency records for the unit.
        ///
        ///For a stack or pipe, this is the Unit Reporting Frequency records for all units linked to the stack or pipe via Unit Stack Configuration records.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationReportingFrequencyRow> LocationReportingFrequencyRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Location_Reporting_Frequency_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationReportingFrequencyRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Location_Reporting_Frequency_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Location_Reporting_Frequency_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// System Component Records at location with associated component data.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemComponentRow> LocationSystemComponentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Location_System_Component_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemComponentRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Location_System_Component_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Location_System_Component_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// System Fuel Flow Records for location with associated system data.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.SystemFuelFlowRow> LocationSystemFuelFlowRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Location_System_Fuel_Flow_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.SystemFuelFlowRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Location_System_Fuel_Flow_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Location_System_Fuel_Flow_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All test summary records associated with the location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow> LocationTestRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Location_Test_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaTestSummaryRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Location_Test_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Location_Test_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates the type of location the Monitor Location- Common Stack (CS), Multiple Stack (MS), Common Pipe (CP), Multiple Pipe (MP), Unit linked to Stacks and Pipes (UB), Unit linked to Stacks (US), Unit linked to Pipes (UP), Unit not linked to Stack or Pipe (U).  If Stack ID has an invalid prefix, location type will be null.
        ///
        ///Generated in Location object.
        /// </summary>
        public static string LocationType
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Location_Type")));
            }
            set
            {
                MpParameters.SetCheckParameter("Location_Type", value);
            }
        }
        
        /// <summary>
        /// Plugin to indicate whether location is a unit, common stack, multiple stack, common pipe, or multiple pipe.
        /// </summary>
        public static string LocationTypeDescription
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Location_Type_Description")));
            }
            set
            {
                MpParameters.SetCheckParameter("Location_Type_Description", value);
            }
        }
        
        /// <summary>
        /// Unit Type records for the unit or all the units linked to a stack or pipe.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationUnitTypeRow> LocationUnitTypeRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Location_Unit_Type_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwLocationUnitTypeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Location_Unit_Type_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Location_Unit_Type_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains the combined set of Monitor Method and  MATS Method rows for the current location being evaluated.
        ///
        ///Set in the Monitor Location category.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckMp.Function.MatsCombinedMethod> MatsCombinedMethodRecordsByLocation
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("MATS_Combined_Method_Records_By_Location")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckMp.Function.MatsCombinedMethod>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("MATS_Combined_Method_Records_By_Location", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("MATS_Combined_Method_Records_By_Location", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains the Date on which MATS Began for the current monitoring plan.
        ///
        ///This date is the late of the EvaluationBeginDate and the date the MATS program began.
        /// </summary>
        public static DateTime? MatsEvaluationBeginDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("MATS_Evaluation_Begin_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("MATS_Evaluation_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// Contains the MATS Method Code lookup table.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Lookup.Table.MatsMethodCodeRow> MatsMethodCodeLookup
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("MATS_Method_Code_Lookup")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Lookup.Table.MatsMethodCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("MATS_Method_Code_Lookup", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("MATS_Method_Code_Lookup", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains the MATS Method Parameter Code lookup table.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Lookup.Table.MatsMethodParameterCodeRow> MatsMethodParameterCodeLookup
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("MATS_Method_Parameter_Code_Lookup")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Lookup.Table.MatsMethodParameterCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("MATS_Method_Parameter_Code_Lookup", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("MATS_Method_Parameter_Code_Lookup", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains the MATS Supplemental Compliance Method Records for the current MP.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckMp.Function.MATSMethodDataParameter> MatsMpSupplementalComplianceMethodRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("MATS_MP_Supplemental_Compliance_Method_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckMp.Function.MATSMethodDataParameter>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("MATS_MP_Supplemental_Compliance_Method_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("MATS_MP_Supplemental_Compliance_Method_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Primarily used in the Emission Report Evaluation.
        ///
        ///Boolean value indicating whether a MATS required method exists.
        /// </summary>
        public static bool? MatsRequiredCheck
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("MATS_Required_Check")));
            }
            set
            {
                MpParameters.SetCheckParameter("MATS_Required_Check", value);
            }
        }
        
        /// <summary>
        /// Contains the MATS Supplemental Compliance Method Record currently being processed.
        /// </summary>
        public static ECMPS.Checks.Data.Ecmps.CheckMp.Function.MATSMethodDataParameter MatsSupplementalComplianceMethodRecord
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpParameters.GetCheckParameter("MATS_Supplemental_Compliance_Method_Record")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.Ecmps.CheckMp.Function.MATSMethodDataParameter(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("MATS_Supplemental_Compliance_Method_Record", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("MATS_Supplemental_Compliance_Method_Record", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// Maximum default value for parameter and units of measure.
        /// </summary>
        public static decimal? MaximumDefaultValue
        {
            get
            {
                return ((decimal?)(MpParameters.GetCheckParameter("Maximum_Default_Value")));
            }
            set
            {
                MpParameters.SetCheckParameter("Maximum_Default_Value", value);
            }
        }
        
        /// <summary>
        /// Indicates the furthest date in the future expected in an evaluation.
        /// </summary>
        public static DateTime? MaximumFutureDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Maximum_Future_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Maximum_Future_Date", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Maximum Load Units of Measure is Valid.
        /// </summary>
        public static bool? MaximumLoadUnitsOfMeasureValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Maximum_Load_Units_Of_Measure_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Maximum_Load_Units_Of_Measure_Valid", value);
            }
        }
        
        /// <summary>
        /// Maximum span value for component type and units of measure.
        /// </summary>
        public static decimal? MaximumSpanValue
        {
            get
            {
                return ((decimal?)(MpParameters.GetCheckParameter("Maximum_Span_Value")));
            }
            set
            {
                MpParameters.SetCheckParameter("Maximum_Span_Value", value);
            }
        }
        
        /// <summary>
        /// Shows Active/Inactive Status for a Method
        /// </summary>
        public static bool? MethodActive
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Method_Active")));
            }
            set
            {
                MpParameters.SetCheckParameter("Method_Active", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the value reported for the field is valid.
        /// </summary>
        public static bool? MethodBypassApproachCodeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Method_Bypass_Approach_Code_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Method_Bypass_Approach_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// A lookup table of Method Codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.MethodCodeRow> MethodCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Method_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.MethodCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Method_Code_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Method_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if monitor method start date and hour is prior to end date and hour.
        /// </summary>
        public static bool? MethodDatesAndHoursConsistent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Method_Dates_and_Hours_Consistent")));
            }
            set
            {
                MpParameters.SetCheckParameter("Method_Dates_and_Hours_Consistent", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Method End Date is valid.
        /// </summary>
        public static bool? MethodEndDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Method_End_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Method_End_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Method End Hour is valid.
        /// </summary>
        public static bool? MethodEndHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Method_End_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Method_End_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// The first date that the monitor method is active during an evaluation period.
        /// </summary>
        public static DateTime? MethodEvaluationBeginDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Method_Evaluation_Begin_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Method_Evaluation_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// The first hour that the monitor method is active during an evaluation period.
        /// </summary>
        public static int? MethodEvaluationBeginHour
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("Method_Evaluation_Begin_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("Method_Evaluation_Begin_Hour", value);
            }
        }
        
        /// <summary>
        /// The last date that the monitor method is active during an evaluation period.
        /// </summary>
        public static DateTime? MethodEvaluationEndDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Method_Evaluation_End_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Method_Evaluation_End_Date", value);
            }
        }
        
        /// <summary>
        /// The last hour that the monitor method is active during an evaluation period.
        /// </summary>
        public static int? MethodEvaluationEndHour
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("Method_Evaluation_End_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("Method_Evaluation_End_Hour", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Method Method Code reported is valid.
        /// </summary>
        public static bool? MethodMethodCodeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Method_Method_Code_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Method_Method_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// Method Parameter Equivalent cross check table.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.MethodParameterEquivalentCrosscheckRow> MethodParameterEquivalentCrosscheck
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Method_Parameter_Equivalent_Crosscheck")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.MethodParameterEquivalentCrosscheckRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Method_Parameter_Equivalent_Crosscheck", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Method_Parameter_Equivalent_Crosscheck", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Cross check table linking Parameter Code to Parameter Category filtered on Category Code equal to "METHOD"
        ///
        ///Display: Column 1 only.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ParameterToCategoryRow> MethodParameterList
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Method_Parameter_List")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.ParameterToCategoryRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Method_Parameter_List", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Method_Parameter_List", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Links method parameter codes to default parameter codes and span component types for fuel-specific missing data.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.MethodParameterToMaximumDefaultParameterToComponentTypeRow> MethodParameterToMaximumDefaultParameterLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Method_Parameter_To_Maximum_Default_Parameter_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.MethodParameterToMaximumDefaultParameterToComponentTypeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Method_Parameter_To_Maximum_Default_Parameter_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Method_Parameter_To_Maximum_Default_Parameter_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Method Parameter reported is valid
        /// </summary>
        public static bool? MethodParameterValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Method_Parameter_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Method_Parameter_Valid", value);
            }
        }
        
        /// <summary>
        /// Records for Methods at Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorMethodRow> MethodRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Method_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorMethodRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Method_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Method_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Method Start Date is valid.
        /// </summary>
        public static bool? MethodStartDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Method_Start_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Method_Start_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Method Start Hour is valid.
        /// </summary>
        public static bool? MethodStartHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Method_Start_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Method_Start_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Method Substitute Date Code reported is valid.
        /// </summary>
        public static bool? MethodSubstituteDataCodeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Method_Substitute_Data_Code_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Method_Substitute_Data_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// Appropriate Substitute Data Codes for Method and Method Parameter.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.MethodToSubstituteDataCodeRow> MethodToSubstituteDataCodeCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Method_To_Substitute_Data_Code_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.MethodToSubstituteDataCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Method_To_Substitute_Data_Code_Cross_Check_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Method_To_Substitute_Data_Code_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Cross check table linking Parameter Code and Method Code to System Type Code.
        ///
        ///Filter: System Type Code is not null.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.MethodParameterToMethodToSystemTypeRow> MethodToSystemTypeCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Method_to_System_Type_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.MethodParameterToMethodToSystemTypeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Method_to_System_Type_Cross_Check_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Method_to_System_Type_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Minimum default value for parameter and units of measure.
        /// </summary>
        public static decimal? MinimumDefaultValue
        {
            get
            {
                return ((decimal?)(MpParameters.GetCheckParameter("Minimum_Default_Value")));
            }
            set
            {
                MpParameters.SetCheckParameter("Minimum_Default_Value", value);
            }
        }
        
        /// <summary>
        /// The minimum span value for component type and unit type.
        /// </summary>
        public static decimal? MinimumSpanValue
        {
            get
            {
                return ((decimal?)(MpParameters.GetCheckParameter("Minimum_Span_Value")));
            }
            set
            {
                MpParameters.SetCheckParameter("Minimum_Span_Value", value);
            }
        }
        
        /// <summary>
        /// List of required component types that were not linked to the system.
        /// </summary>
        public static string MissingComponentsForSystem
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Missing_Components_for_System")));
            }
            set
            {
                MpParameters.SetCheckParameter("Missing_Components_for_System", value);
            }
        }
        
        /// <summary>
        /// A list of default parameters that are required for a given formula but are not present.
        /// </summary>
        public static string MissingDefaultForFormula
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Missing_Default_for_Formula")));
            }
            set
            {
                MpParameters.SetCheckParameter("Missing_Default_for_Formula", value);
            }
        }
        
        /// <summary>
        /// A list of default parameter that are required for the current method but are not found in the default table.
        /// </summary>
        public static string MissingDefaultForMethod
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Missing_Default_for_Method")));
            }
            set
            {
                MpParameters.SetCheckParameter("Missing_Default_for_Method", value);
            }
        }
        
        /// <summary>
        /// A list of default parameter that are required for the current system but are not found in the default table.
        /// </summary>
        public static string MissingDefaultForSystem
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Missing_Default_for_System")));
            }
            set
            {
                MpParameters.SetCheckParameter("Missing_Default_for_System", value);
            }
        }
        
        /// <summary>
        /// The required default parameter that is missing for the system and component type.
        /// </summary>
        public static string MissingDefaultForSystemAndComponent
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Missing_Default_For_System_And_Component")));
            }
            set
            {
                MpParameters.SetCheckParameter("Missing_Default_For_System_And_Component", value);
            }
        }
        
        /// <summary>
        /// A list of default fuel codes that are required for the current method but are not found in the default table.
        /// </summary>
        public static string MissingDefaultFuelForMethod
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Missing_Default_Fuel_for_Method")));
            }
            set
            {
                MpParameters.SetCheckParameter("Missing_Default_Fuel_for_Method", value);
            }
        }
        
        /// <summary>
        /// A list of required formula parameter + equation code that are missing for a system component.
        /// </summary>
        public static bool? MissingFormulaForComponent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Missing_Formula_for_Component")));
            }
            set
            {
                MpParameters.SetCheckParameter("Missing_Formula_for_Component", value);
            }
        }
        
        /// <summary>
        /// A list of required formula parameter + equation code that are missing for a method.
        /// </summary>
        public static string MissingFormulaForMethod
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Missing_Formula_For_Method")));
            }
            set
            {
                MpParameters.SetCheckParameter("Missing_Formula_For_Method", value);
            }
        }
        
        /// <summary>
        /// A list of required formula parameter + equation code that are missing for a system.
        /// </summary>
        public static string MissingFormulaForSystem
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Missing_Formula_For_System")));
            }
            set
            {
                MpParameters.SetCheckParameter("Missing_Formula_For_System", value);
            }
        }
        
        /// <summary>
        /// A required fuelflow system this is missing.
        /// </summary>
        public static string MissingFuelSystemForMethod
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Missing_Fuel_System_For_Method")));
            }
            set
            {
                MpParameters.SetCheckParameter("Missing_Fuel_System_For_Method", value);
            }
        }
        
        /// <summary>
        /// A list of maximum default parameters not found in monitor default records for the location during the evaluation period that required when using fuel-specific missing data or bypass approach.
        /// </summary>
        public static string MissingMaximumDefault
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Missing_Maximum_Default")));
            }
            set
            {
                MpParameters.SetCheckParameter("Missing_Maximum_Default", value);
            }
        }
        
        /// <summary>
        /// List of missing method parameters NOXR and HI when NOX/NOXR Method is reported.
        /// </summary>
        public static string MissingMethodsForNoxNoxrMethod
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Missing_Methods_for_NOX_NOXR_Method")));
            }
            set
            {
                MpParameters.SetCheckParameter("Missing_Methods_for_NOX_NOXR_Method", value);
            }
        }
        
        /// <summary>
        /// List of fuels without Appendix E or PEMS systems.
        /// </summary>
        public static string MissingNoxSystemForMethod
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Missing_Nox_System_For_Method")));
            }
            set
            {
                MpParameters.SetCheckParameter("Missing_Nox_System_For_Method", value);
            }
        }
        
        /// <summary>
        /// A list of Qual Type Codes that are required for the current method but are not found in the monitoring qualification table.
        /// </summary>
        public static string MissingQualificationForMethod
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Missing_Qualification_for_Method")));
            }
            set
            {
                MpParameters.SetCheckParameter("Missing_Qualification_for_Method", value);
            }
        }
        
        /// <summary>
        /// Indicates which moisture default missing data parameter is required.
        /// </summary>
        public static string MoistureDefaultParameter
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Moisture_Default_Parameter")));
            }
            set
            {
                MpParameters.SetCheckParameter("Moisture_Default_Parameter", value);
            }
        }
        
        /// <summary>
        /// Indicates if a minimum moisture default is required if an HI formula has moisture as a factor and moisture method comes from a moisture system.
        /// </summary>
        public static bool? MoistureDefaultRequired
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Moisture_Default_Required")));
            }
            set
            {
                MpParameters.SetCheckParameter("Moisture_Default_Required", value);
            }
        }
        
        /// <summary>
        /// Set to true if formula has moisture as a factor.
        /// </summary>
        public static bool? MoistureMethodRequired
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Moisture_Method_Required")));
            }
            set
            {
                MpParameters.SetCheckParameter("Moisture_Method_Required", value);
            }
        }
        
        /// <summary>
        /// Records for MonitoringPlanComments at Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorPlanCommentRow> MonitoringPlanCommentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Monitoring_Plan_Comment_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorPlanCommentRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Monitoring_Plan_Comment_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Monitoring_Plan_Comment_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All Unit Op Status Records for the units in the monitoring plan.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUnitOpStatusRow> MonitoringPlanOpStatusRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Monitoring_Plan_Op_Status_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUnitOpStatusRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Monitoring_Plan_Op_Status_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Monitoring_Plan_Op_Status_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Program records for the units in the Monitoring Plan.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpUnitProgramRow> MonitoringPlanProgramList
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Monitoring_Plan_Program_List")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpUnitProgramRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Monitoring_Plan_Program_List", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Monitoring_Plan_Program_List", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Monitor Plan Comment Begin Date is Valid.
        /// </summary>
        public static bool? MonitorPlanCommentBeginDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Monitor_Plan_Comment_Begin_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Monitor_Plan_Comment_Begin_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Monitor Plan Comment End Date is Valid.
        /// </summary>
        public static bool? MonitorPlanCommentEndDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Monitor_Plan_Comment_End_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Monitor_Plan_Comment_End_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates in the BeginDate in the Monitor Qualification record is valid.
        /// </summary>
        public static bool? MonitorQualificationBeginDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Monitor_Qualification_Begin_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Monitor_Qualification_Begin_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the BeginDate and EndDate in the Monitor Qualification record are consistent
        /// </summary>
        public static bool? MonitorQualificationDatesConsistent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Monitor_Qualification_Dates_Consistent")));
            }
            set
            {
                MpParameters.SetCheckParameter("Monitor_Qualification_Dates_Consistent", value);
            }
        }
        
        /// <summary>
        /// Indicates in the EndDate in the Monitor Qualification record is valid.
        /// </summary>
        public static bool? MonitorQualificationEndDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Monitor_Qualification_End_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Monitor_Qualification_End_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the QualificationYear in the Monitor Qualification Percent record is valid.
        /// </summary>
        public static bool? MonitorQualificationPercentQualificationYearValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Monitor_Qualification_Percent_Qualification_Year_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Monitor_Qualification_Percent_Qualification_Year_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the Yr1QualificationDataYear in the Monitor Qualification Percent record is valid.
        /// </summary>
        public static bool? MonitorQualificationPercentYr1QualificationDataYearValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Monitor_Qualification_Percent_Yr1_Qualification_Data_Year_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Monitor_Qualification_Percent_Yr1_Qualification_Data_Year_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the Yr2QualificationDataYear in the Monitor Qualification Percent record is valid.
        /// </summary>
        public static bool? MonitorQualificationPercentYr2QualificationDataYearValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Monitor_Qualification_Percent_Yr2_Qualification_Data_Year_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Monitor_Qualification_Percent_Yr2_Qualification_Data_Year_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the Yr3QualificationDataYear in the Monitor Qualification Percent record is valid.
        /// </summary>
        public static bool? MonitorQualificationPercentYr3QualificationDataYearValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Monitor_Qualification_Percent_Yr3_Qualification_Data_Year_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Monitor_Qualification_Percent_Yr3_Qualification_Data_Year_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if the Qualification Type is valid.
        /// </summary>
        public static bool? MonitorQualificationValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Monitor_Qualification_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Monitor_Qualification_Valid", value);
            }
        }
        
        /// <summary>
        /// System Records at location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemRow> MonitorSystemRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Monitor_System_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Monitor_System_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Monitor_System_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Plugin for Span Value validity check.
        /// </summary>
        public static string MpcMec
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("MPC_MEC")));
            }
            set
            {
                MpParameters.SetCheckParameter("MPC_MEC", value);
            }
        }
        
        /// <summary>
        /// Data view containing the monitor plan location information for a particular monitoring plan.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpLocationRow> MpLocations
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("MP_Locations")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpLocationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("MP_Locations", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("MP_Locations", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Records for Methods for all locations in the monitoring configuration
        ///
        ///This parameter was originally used in Emissions but will also now be used in Monitoring Plan checks.  For Monitoring Plan checks it will include all the methods in the Monitoring Plan being evaluated.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodRow> MpMethodRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("MP_Method_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpMonitorMethodRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("MP_Method_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("MP_Method_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Unit Stack Configuration records where the unit and stack/pipe are both part of a specific monitoring plan.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUnitStackConfigurationRow> MpUnitStackConfigurationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("MP_Unit_Stack_Configuration_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUnitStackConfigurationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("MP_Unit_Stack_Configuration_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("MP_Unit_Stack_Configuration_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Non Load Based Indicator for a location
        /// </summary>
        public static int? NonLoadBasedIndicator
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("Non_Load_Based_Indicator")));
            }
            set
            {
                MpParameters.SetCheckParameter("Non_Load_Based_Indicator", value);
            }
        }
        
        /// <summary>
        /// Indicates whether an Inappropriate NOXG Default is Reported when NOXU Reported for Any Hour.
        /// </summary>
        public static bool? NoxgNoxuDefaultsConsistent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("NOXG/NOXU_Defaults_Consistent")));
            }
            set
            {
                MpParameters.SetCheckParameter("NOXG/NOXU_Defaults_Consistent", value);
            }
        }
        
        /// <summary>
        /// Indicates if the LME unit reports NOX.
        /// </summary>
        public static bool? NoxLmeUnit
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("NOX_LME_Unit")));
            }
            set
            {
                MpParameters.SetCheckParameter("NOX_LME_Unit", value);
            }
        }
        
        /// <summary>
        /// Cross-check table that defines Part 75 defaults for NOX maximum potential concentration based on fuel and unit type.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.NoxMpcToFuelCategoryAndUnitTypeRow> NoxMpcToFuelCategoryAndUnitType
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("NOX_MPC_to_Fuel_Category_and_Unit_Type")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.NoxMpcToFuelCategoryAndUnitTypeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("NOX_MPC_to_Fuel_Category_and_Unit_Type", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("NOX_MPC_to_Fuel_Category_and_Unit_Type", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// NOX System Type Code.
        /// </summary>
        public static string NoxSystemType
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Nox_System_Type")));
            }
            set
            {
                MpParameters.SetCheckParameter("Nox_System_Type", value);
            }
        }

        /// <summary>
        /// The method parameter description for the Current NSPS4T Program Parameter record.
        /// </summary>
        public static string Nsps4tMethodParameterDescription
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("NSPS4T_Method_Parameter_Description")));
            }
            set
            {
                MpParameters.SetCheckParameter("NSPS4T_Method_Parameter_Description", value);
            }
        }

        /// <summary>
        /// Indicates if a formula requires an O2 value.
        /// </summary>
        public static bool? O2ComponentRequired
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("O2_Component_Required")));
            }
            set
            {
                MpParameters.SetCheckParameter("O2_Component_Required", value);
            }
        }
        
        /// <summary>
        /// Contains the list of overlapping parameter values determined in a check.
        /// </summary>
        public static string OverlappingParameterList
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Overlapping_Parameter_List")));
            }
            set
            {
                MpParameters.SetCheckParameter("Overlapping_Parameter_List", value);
            }
        }
        
        /// <summary>
        /// Contains the cross check that link the method and parameter codes for a method to the list of allowable formula codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CrossCheck.Table.ParameterMethodToFormulaRow> ParameterAndMethodAndLocationToFormulaCrosscheck
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Parameter_And_Method_And_Location_To_Formula_Crosscheck")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CrossCheck.Table.ParameterMethodToFormulaRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Parameter_And_Method_And_Location_To_Formula_Crosscheck", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Parameter_And_Method_And_Location_To_Formula_Crosscheck", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Cross check table linking Parameter Code to Method Code.
        ///
        ///Display: Columns 1 and 2 only.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.MethodParameterToMethodToSystemTypeRow> ParameterToMethodCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Parameter_to_Method_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.MethodParameterToMethodToSystemTypeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Parameter_to_Method_Cross_Check_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Parameter_to_Method_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Lists all combinations of valid Parameter Codes and  Units of Measure codes with min and max values.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.ParameterUomRow> ParameterUnitsOfMeasureLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Parameter_Units_Of_Measure_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.ParameterUomRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Parameter_Units_Of_Measure_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Parameter_Units_Of_Measure_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// This indicates if an flow system is present that is active or retired after 2007.
        ///
        ///
        /// </summary>
        public static bool? Post2008FlowSystemPresent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Post2008_Flow_System_Present")));
            }
            set
            {
                MpParameters.SetCheckParameter("Post2008_Flow_System_Present", value);
            }
        }
        
        /// <summary>
        /// Contains the program code information needed to produce program list for checks.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Lookup.Table.ProgramCodeRow> ProgramCodeTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Program_Code_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Lookup.Table.ProgramCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Program_Code_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Program_Code_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The first date that the Program is active during an evaluation period.
        /// </summary>
        public static DateTime? ProgramEvaluationBeginDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Program_Evaluation_Begin_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Program_Evaluation_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// The last date that the Program is active during an evaluation period.
        /// </summary>
        public static DateTime? ProgramEvaluationEndDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Program_Evaluation_End_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Program_Evaluation_End_Date", value);
            }
        }
        
        /// <summary>
        /// Contains a list of ozone season program codes.
        /// </summary>
        public static string ProgramIsOzoneSeasonList
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Program_is_Ozone_Season_List")));
            }
            set
            {
                MpParameters.SetCheckParameter("Program_is_Ozone_Season_List", value);
            }
        }
        
        /// <summary>
        /// The method parameter description for the Current Program parameter record.
        /// </summary>
        public static string ProgramMethodParameterDescription
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Program_Method_Parameter_Description")));
            }
            set
            {
                MpParameters.SetCheckParameter("Program_Method_Parameter_Description", value);
            }
        }
        
        /// <summary>
        /// Indicates the evaluation begin date for a Unit Program Parameter record.
        /// </summary>
        public static DateTime? ProgramParameterEvaluationBeginDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Program_Parameter_Evaluation_Begin_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Program_Parameter_Evaluation_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// Indicates the evaluation end date for a Unit Program Parmeter record.
        /// </summary>
        public static DateTime? ProgramParameterEvaluationEndDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Program_Parameter_Evaluation_End_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Program_Parameter_Evaluation_End_Date", value);
            }
        }
        
        /// <summary>
        /// The QA Supplemental Data records for the location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataRow> QaSupplementalDataRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("QA_Supplemental_Data_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQaSuppDataRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("QA_Supplemental_Data_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("QA_Supplemental_Data_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates in QualificationTypeCode in Monitor Qualification record is approrpriate for the fuels burned.
        /// </summary>
        public static bool? QualificationConsistentWithFuel
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Qualification_Consistent_with_Fuel")));
            }
            set
            {
                MpParameters.SetCheckParameter("Qualification_Consistent_with_Fuel", value);
            }
        }
        
        /// <summary>
        /// Indicates in QualificationTypeCode in Monitor Qualification record is approrpriate for non-load based units.
        /// </summary>
        public static bool? QualificationConsistentWithNonLoadBasedIndicator
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Qualification_Consistent_with_Non_Load_Based_Indicator")));
            }
            set
            {
                MpParameters.SetCheckParameter("Qualification_Consistent_with_Non_Load_Based_Indicator", value);
            }
        }
        
        /// <summary>
        /// Indicates in QualificationTypeCode in Monitor Qualification record is approrpriate for the program and reporting frequency.
        /// </summary>
        public static bool? QualificationConsistentWithProgramAndReportingFrequency
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Qualification_Consistent_with_Program_and_Reporting_Frequency")));
            }
            set
            {
                MpParameters.SetCheckParameter("Qualification_Consistent_with_Program_and_Reporting_Frequency", value);
            }
        }
        
        /// <summary>
        /// The last date that the monitor qualification record is active during an evaluation period.
        /// </summary>
        public static DateTime? QualificationEvaluationEndDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Qualification_Evaluation_End_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Qualification_Evaluation_End_Date", value);
            }
        }
        
        /// <summary>
        /// The first date that the monitor qualification record is active during an evaluation period.
        /// </summary>
        public static DateTime? QualificationEvaluationStartDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Qualification_Evaluation_Start_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Qualification_Evaluation_Start_Date", value);
            }
        }
        
        /// <summary>
        /// QualificationLEE Records at Location
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.CheckMp.Function.MonitorQualificationLEEParameter> QualificationleeRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("QualificationLEE_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.CheckMp.Function.MonitorQualificationLEEParameter>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("QualificationLEE_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("QualificationLEE_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains the Qualification Lee Test Type Code lookup table.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQualLeeTestTypeCdRow> QualificationLeeTestTypeCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Qualification_Lee_Test_Type_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwQualLeeTestTypeCdRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Qualification_Lee_Test_Type_Code_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Qualification_Lee_Test_Type_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Qualification LME Records at location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorQualificationLmeRow> QualificationlmeRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("QualificationLME_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorQualificationLmeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("QualificationLME_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("QualificationLME_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Qualification Percent Records at location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorQualificationPctRow> QualificationPercentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Qualification_Percent_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorQualificationPctRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Qualification_Percent_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Qualification_Percent_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Qualification Records at location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorQualificationRow> QualificationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Qualification_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorQualificationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Qualification_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Qualification_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The System Type required for the Monitor Qualification.
        /// </summary>
        public static string QualificationSystemType
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Qualification_System_Type")));
            }
            set
            {
                MpParameters.SetCheckParameter("Qualification_System_Type", value);
            }
        }
        
        /// <summary>
        /// A lookup table of Qualification Type Codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.QualTypeCodeRow> QualificationTypeCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Qualification_Type_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.QualTypeCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Qualification_Type_Code_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Qualification_Type_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the Qualification Type is valid.
        /// </summary>
        public static bool? QualificationTypeCodeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Qualification_Type_Code_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Qualification_Type_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// This determines if location must report range of operation.
        /// </summary>
        public static bool? RangeOfOperationRequired
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Range_of_Operation_Required")));
            }
            set
            {
                MpParameters.SetCheckParameter("Range_of_Operation_Required", value);
            }
        }
        
        /// <summary>
        /// This indicates whether or not the Rectangular Duct WAFBeginDate is Valid.
        /// </summary>
        public static bool? RectangularDuctWafEffectiveDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Rectangular_Duct_WAF_Effective_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Rectangular_Duct_WAF_Effective_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// This indicates whether or not the WAFBeginHour is valid.
        /// </summary>
        public static bool? RectangularDuctWafEffectiveHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Rectangular_Duct_WAF_Effective_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Rectangular_Duct_WAF_Effective_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// This indicates whether or not the Rectangular Duct WAFEndDate is Valid.
        /// </summary>
        public static bool? RectangularDuctWafEndDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Rectangular_Duct_WAF_End_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Rectangular_Duct_WAF_End_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// This indicates whether or not the Rectangular Duct WAFEndHour is Valid.
        /// </summary>
        public static bool? RectangularDuctWafEndHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Rectangular_Duct_WAF_End_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Rectangular_Duct_WAF_End_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// This indicates whether or not the Rectangular Duct WAF Number of Method 1 Traverse Points in WAF Test is valid.
        /// </summary>
        public static bool? RectangularDuctWafNumberOfMethod1TraversePointsInWafTestValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Rectangular_Duct_WAF_Number_of_Method_1_Traverse_Points_in_WAF_Test_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Rectangular_Duct_WAF_Number_of_Method_1_Traverse_Points_in_WAF_Test_Valid", value);
            }
        }
        
        /// <summary>
        /// Identifies the maximum value fieldname associated with a default minimum value.
        /// </summary>
        public static string RelatedMaximum
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Related_Maximum")));
            }
            set
            {
                MpParameters.SetCheckParameter("Related_Maximum", value);
            }
        }
        
        /// <summary>
        /// Indicates if there is a DAHS component reported for a system.
        /// </summary>
        public static bool? RequiredDahsReportedForSystem
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Required_DAHS_Reported_for_System")));
            }
            set
            {
                MpParameters.SetCheckParameter("Required_DAHS_Reported_for_System", value);
            }
        }
        
        /// <summary>
        /// Indicates if the required non-DAHS components were reported.
        /// </summary>
        public static bool? RequiredNonDahsComponentsReportedForSystem
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Required_Non_DAHS_Components_Reported_For_System")));
            }
            set
            {
                MpParameters.SetCheckParameter("Required_Non_DAHS_Components_Reported_For_System", value);
            }
        }
        
        /// <summary>
        /// Indicates if system requires a probe component.
        /// </summary>
        public static bool? RequiredProbe
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Required_Probe")));
            }
            set
            {
                MpParameters.SetCheckParameter("Required_Probe", value);
            }
        }
        
        /// <summary>
        /// Incidates if Component Type and Analyzer Range Code is consistent with Span Parameter and Scale for non Dual range spans.
        /// </summary>
        public static bool? RequiredSpanReportedForComponentTypeAndAnalyzerRange
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Required_Span_Reported_for_Component_Type_and_Analyzer_Range")));
            }
            set
            {
                MpParameters.SetCheckParameter("Required_Span_Reported_for_Component_Type_and_Analyzer_Range", value);
            }
        }
        
        /// <summary>
        /// A required system type for a monitor method that is either missing or duplicate.
        /// </summary>
        public static string RequiredSystemForMethod
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Required_System_For_Method")));
            }
            set
            {
                MpParameters.SetCheckParameter("Required_System_For_Method", value);
            }
        }
        
        /// <summary>
        /// Lookup table of sample acquistion method codes
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.AcquisitionMethodCodeRow> SampleAcquisitionMethodCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Sample_Acquisition_Method_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.AcquisitionMethodCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Sample_Acquisition_Method_Code_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Sample_Acquisition_Method_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the LME unit reports SO2.
        /// </summary>
        public static bool? So2LmeUnit
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("SO2_LME_Unit")));
            }
            set
            {
                MpParameters.SetCheckParameter("SO2_LME_Unit", value);
            }
        }
        
        /// <summary>
        /// Shows Active/Inactive Status for a Span
        /// </summary>
        public static bool? SpanActiveStatus
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Span_Active_Status")));
            }
            set
            {
                MpParameters.SetCheckParameter("Span_Active_Status", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Span Component Type Code reported is Valid.
        /// </summary>
        public static bool? SpanComponentTypeCodeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Span_Component_Type_Code_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Span_Component_Type_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether Span Dates and Hours are Consistent.
        /// </summary>
        public static bool? SpanDatesAndHoursConsistent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Span_Dates_and_Hours_Consistent")));
            }
            set
            {
                MpParameters.SetCheckParameter("Span_Dates_and_Hours_Consistent", value);
            }
        }
        
        /// <summary>
        /// Indicates whether Default High Range Value is Valid.
        /// </summary>
        public static bool? SpanDefaultHighRangeValueValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Span_Default_High_Range_Value_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Span_Default_High_Range_Value_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not Span End Date Valid.
        /// </summary>
        public static bool? SpanEndDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Span_End_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Span_End_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not Span End Hour Valid.
        /// </summary>
        public static bool? SpanEndHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Span_End_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Span_End_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// The first date that the span is active during an evaluation period.
        /// </summary>
        public static DateTime? SpanEvaluationBeginDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Span_Evaluation_Begin_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Span_Evaluation_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// The first hour that the span is active during an evaluation period.
        /// </summary>
        public static int? SpanEvaluationBeginHour
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("Span_Evaluation_Begin_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("Span_Evaluation_Begin_Hour", value);
            }
        }
        
        /// <summary>
        /// The last date that the span is active during an evaluation period.
        /// </summary>
        public static DateTime? SpanEvaluationEndDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Span_Evaluation_End_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Span_Evaluation_End_Date", value);
            }
        }
        
        /// <summary>
        /// The last hour that the span is active during an evaluation period.
        /// </summary>
        public static int? SpanEvaluationEndHour
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("Span_Evaluation_End_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("Span_Evaluation_End_Hour", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Full Scale Range Value reported is Valid.
        /// </summary>
        public static bool? SpanFullScaleRangeValueValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Span_Full_Scale_Range_Value_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Span_Full_Scale_Range_Value_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the MEC (Maximum Expected Concentration) is valid.
        /// </summary>
        public static bool? SpanMecValueValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Span_MEC_Value_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Span_MEC_Value_Valid", value);
            }
        }
        
        /// <summary>
        /// A lookup table of Span Method Codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.SpanMethodCodeRow> SpanMethodCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Span_Method_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.SpanMethodCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Span_Method_Code_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Span_Method_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the MPC (Maximum Potential Concentration) is valid.
        /// </summary>
        public static bool? SpanMpcValueValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Span_MPC_Value_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Span_MPC_Value_Valid", value);
            }
        }
        
        /// <summary>
        /// Span Records at location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.MonitorSpanRow> SpanRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Span_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.MonitorSpanRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Span_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Span_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Span Scale Code reported is Valid.
        /// </summary>
        public static bool? SpanScaleCodeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Span_Scale_Code_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Span_Scale_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Span Start Date is valid.
        /// </summary>
        public static bool? SpanStartDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Span_Start_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Span_Start_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Span Start Hour is Valid.
        /// </summary>
        public static bool? SpanStartHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Span_Start_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Span_Start_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not Span Value is Valid
        /// </summary>
        public static bool? SpanValueValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Span_Value_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Span_Value_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Stack Active Date is Valid.
        /// </summary>
        public static bool? StackActiveDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Stack_Active_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Stack_Active_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the location attributes for the current location should include stack information.
        /// </summary>
        public static bool? StackInformationRequired
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Stack_Information_Required")));
            }
            set
            {
                MpParameters.SetCheckParameter("Stack_Information_Required", value);
            }
        }
        
        /// <summary>
        /// Indicates if StackPipeID is valid.
        /// </summary>
        public static bool? StackPipeIdFormatValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Stack_Pipe_ID_Format_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Stack_Pipe_ID_Format_Valid", value);
            }
        }
        
        /// <summary>
        /// Stack/pipe records associated with facility.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwStackPipeRow> StackPipeRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Stack_Pipe_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwStackPipeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Stack_Pipe_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Stack_Pipe_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Stack Retire Date is Valid.
        /// </summary>
        public static bool? StackRetireDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Stack_Retire_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Stack_Retire_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Lookup table of substitute data approach codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.SubstituteDataCodeRow> SubstituteDataCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Substitute_Data_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.SubstituteDataCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Substitute_Data_Code_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Substitute_Data_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Shows Active/Inactive Status for a System
        /// </summary>
        public static bool? SystemActive
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("System_Active")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Active", value);
            }
        }
        
        /// <summary>
        /// A collection of records for all Analyzer Range records for components in the system with the associated component information.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwAnalyzerRangeRow> SystemAnalyzerRangeRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("System_Analyzer_Range_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwAnalyzerRangeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("System_Analyzer_Range_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("System_Analyzer_Range_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if component is active in a system during the evaluation period.
        /// </summary>
        public static bool? SystemComponentActive
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("System_Component_Active")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Component_Active", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the System Component Start Date and Start Hour are before the System Component End Date and End Hour.
        /// </summary>
        public static bool? SystemComponentDatesAndHoursConsistent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("System_Component_Dates_and_Hours_Consistent")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Component_Dates_and_Hours_Consistent", value);
            }
        }
        
        /// <summary>
        /// Indicates if the value reported for the field is valid.
        /// </summary>
        public static bool? SystemComponentEndDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("System_Component_End_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Component_End_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the value in the field is valid.
        /// </summary>
        public static bool? SystemComponentEndHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("System_Component_End_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Component_End_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// The first date that the system component is active during an evaluation period.
        /// </summary>
        public static DateTime? SystemComponentEvaluationBeginDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("System_Component_Evaluation_Begin_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Component_Evaluation_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// The first hour that the system component is active during an evaluation period.
        /// </summary>
        public static int? SystemComponentEvaluationBeginHour
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("System_Component_Evaluation_Begin_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Component_Evaluation_Begin_Hour", value);
            }
        }
        
        /// <summary>
        /// The last date that the system component is active during an evaluation period.
        /// </summary>
        public static DateTime? SystemComponentEvaluationEndDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("System_Component_Evaluation_End_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Component_Evaluation_End_Date", value);
            }
        }
        
        /// <summary>
        /// The last hour that the system component is active during an evaluation period.
        /// </summary>
        public static int? SystemComponentEvaluationEndHour
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("System_Component_Evaluation_End_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Component_Evaluation_End_Hour", value);
            }
        }
        
        /// <summary>
        /// The Monitor_System_Component records linked to the current component including the fields from the associated system record.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemComponentRow> SystemComponentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("System_Component_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemComponentRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("System_Component_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("System_Component_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if component type is appropriate for system.
        /// </summary>
        public static bool? SystemComponentRecordValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("System_Component_Record_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Component_Record_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the value in the System Component Start Date field is valid.
        /// </summary>
        public static bool? SystemComponentStartDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("System_Component_Start_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Component_Start_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the value in this field is valid.
        /// </summary>
        public static bool? SystemComponentStartHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("System_Component_Start_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Component_Start_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates ifsystem start date and hour is prior to end date and hour.
        /// </summary>
        public static bool? SystemDatesAndHoursConsistent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("System_Dates_and_Hours_Consistent")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Dates_and_Hours_Consistent", value);
            }
        }
        
        /// <summary>
        /// A lookup table of System Designation codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.SystemDesignationCodeRow> SystemDesignationCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("System_Designation_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.SystemDesignationCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("System_Designation_Code_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("System_Designation_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the System Parameter Code is valid.
        /// </summary>
        public static bool? SystemDesignationCodeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("System_Designation_Code_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Designation_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the System End Date is valid.
        /// </summary>
        public static bool? SystemEndDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("System_End_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_End_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the System End Hour is valid.
        /// </summary>
        public static bool? SystemEndHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("System_End_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_End_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// The first date that the monitor system is active during an evaluation period.
        /// </summary>
        public static DateTime? SystemEvaluationBeginDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("System_Evaluation_Begin_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Evaluation_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// The first hour that the monitor system is active during an evaluation period.
        /// </summary>
        public static int? SystemEvaluationBeginHour
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("System_Evaluation_Begin_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Evaluation_Begin_Hour", value);
            }
        }
        
        /// <summary>
        /// The last date that the monitor system is active during an evaluation period.
        /// </summary>
        public static DateTime? SystemEvaluationEndDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("System_Evaluation_End_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Evaluation_End_Date", value);
            }
        }
        
        /// <summary>
        /// The last hour that the monitor system is active during an evaluation period.
        /// </summary>
        public static int? SystemEvaluationEndHour
        {
            get
            {
                return ((int?)(MpParameters.GetCheckParameter("System_Evaluation_End_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Evaluation_End_Hour", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the System Parameter Code is valid.
        /// </summary>
        public static bool? SystemFuelCodeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("System_Fuel_Code_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Fuel_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// System Fuel Flow and associated system data for the current system.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpSystemFuelFlowRow> SystemFuelFlowRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("System_Fuel_Flow_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMpSystemFuelFlowRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("System_Fuel_Flow_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("System_Fuel_Flow_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The emissions parameter measured by the system.
        /// </summary>
        public static string SystemParameterCode
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("System_Parameter_Code")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Parameter_Code", value);
            }
        }
        
        /// <summary>
        /// Lookup table that stores system-wide values.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwSystemParameterRow> SystemParameterLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("System_Parameter_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwSystemParameterRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("System_Parameter_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("System_Parameter_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates if the system record is active and has a valid system type.
        /// </summary>
        public static bool? SystemRecordValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("System_Record_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Record_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the System Start Date is valid.
        /// </summary>
        public static bool? SystemStartDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("System_Start_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Start_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the System Start Hour is valid.
        /// </summary>
        public static bool? SystemStartHourValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("System_Start_Hour_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Start_Hour_Valid", value);
            }
        }
        
        /// <summary>
        /// All Monitor_System_Component records for the current system including the fields from the associated component record.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemComponentRow> SystemSystemComponentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("System_System_Component_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemComponentRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("System_System_Component_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("System_System_Component_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the System Type Code is valid.
        /// </summary>
        public static bool? SystemTypeCodeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("System_Type_Code_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Type_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// A lookup table of System Type codes and their associated Parameter codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.SystemTypeCodeRow> SystemTypeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("System_Type_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.SystemTypeCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("System_Type_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("System_Type_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Required component types in systems.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.SystemTypeToComponentTypeRow> SystemTypeToComponentTypeCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("System_Type_To_Component_Type_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.SystemTypeToComponentTypeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("System_Type_To_Component_Type_Cross_Check_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("System_Type_To_Component_Type_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Links system type to required formula parameters.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.SystemTypeToFormulaParameterRow> SystemTypeToFormulaParameterCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("System_Type_To_Formula_Parameter_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.SystemTypeToFormulaParameterRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("System_Type_To_Formula_Parameter_Cross_Check_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("System_Type_To_Formula_Parameter_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Links system type code to fuel group code.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.SystemTypeToFuelGroupRow> SystemTypeToFuelGroupCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("System_Type_To_Fuel_Group_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.SystemTypeToFuelGroupRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("System_Type_To_Fuel_Group_Cross_Check_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("System_Type_To_Fuel_Group_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Optional component types in system.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.SystemTypeToOptionalComponentTypeRow> SystemTypeToOptionalComponentTypeCrossCheckTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("System_Type_to_Optional_Component_Type_Cross_Check_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsAux.CrossCheck.Virtual.SystemTypeToOptionalComponentTypeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("System_Type_to_Optional_Component_Type_Cross_Check_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("System_Type_to_Optional_Component_Type_Cross_Check_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The unit fuel represented by the system fuel code in the monitoring system record.
        /// </summary>
        public static string SystemUnitFuel
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("System_Unit_Fuel")));
            }
            set
            {
                MpParameters.SetCheckParameter("System_Unit_Fuel", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Unit Capacity Begin Date is Valid.
        /// </summary>
        public static bool? UnitCapacityBeginDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Unit_Capacity_Begin_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Unit_Capacity_Begin_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Unit Capacity Start and End Dates are Consistent.
        /// </summary>
        public static bool? UnitCapacityDatesConsistent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Unit_Capacity_Dates_Consistent")));
            }
            set
            {
                MpParameters.SetCheckParameter("Unit_Capacity_Dates_Consistent", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Unit Capacity End Date reported is Valid.
        /// </summary>
        public static bool? UnitCapacityEndDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Unit_Capacity_End_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Unit_Capacity_End_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// The date on which the evaluation period begins for the Unit Capacity Record.
        /// </summary>
        public static DateTime? UnitCapacityEvaluationBeginDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Unit_Capacity_Evaluation_Begin_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Unit_Capacity_Evaluation_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// The date on which the evaluation period ends for the Unit Capacity Record.
        /// </summary>
        public static DateTime? UnitCapacityEvaluationEndDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("Unit_Capacity_Evaluation_End_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("Unit_Capacity_Evaluation_End_Date", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Unit Capacity Record is Active.
        /// </summary>
        public static bool? UnitCapacityRecordActive
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Unit_Capacity_Record_Active")));
            }
            set
            {
                MpParameters.SetCheckParameter("Unit_Capacity_Record_Active", value);
            }
        }
        
        /// <summary>
        /// List of all UNIT_CAPACITY records linked to the location (unit).
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.UnitCapacityRow> UnitCapacityRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Unit_Capacity_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.UnitCapacityRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Unit_Capacity_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Unit_Capacity_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether the Unit Fuel DemGCV reported is Valid.
        /// </summary>
        public static bool? UnitFuelDemonstrationGcvValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Unit_Fuel_Demonstration_GCV_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Unit_Fuel_Demonstration_GCV_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Unit Fuel DemSO2 reported is Valid.
        /// </summary>
        public static bool? UnitFuelDemonstrationSo2Valid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Unit_Fuel_Demonstration_So2_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Unit_Fuel_Demonstration_So2_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether the Ozone Season is consistent with Primary/Secondary Indicator reported.
        /// </summary>
        public static bool? UnitFuelOzoneSeasonIndicatorValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Unit_Fuel_Ozone_Season_Indicator_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Unit_Fuel_Ozone_Season_Indicator_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates if Unit Fuel Primary/Secondary Indicator Code is valid.
        /// </summary>
        public static bool? UnitFuelPrimarySecondaryIndicatorCodeValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Unit_Fuel_Primary_Secondary_Indicator_Code_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Unit_Fuel_Primary_Secondary_Indicator_Code_Valid", value);
            }
        }
        
        /// <summary>
        /// All monitor systems for a unit and all stack/pipes linked to the unit
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUnitMonitorSystemRow> UnitMonitorSystemRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Unit_Monitor_System_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUnitMonitorSystemRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Unit_Monitor_System_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Unit_Monitor_System_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Operating Status records which apply to the unit.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUnitOpStatusRow> UnitOperatingStatusRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Unit_Operating_Status_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUnitOpStatusRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Unit_Operating_Status_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Unit_Operating_Status_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Unit Program Exemption records which apply to the unit.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUnitProgramExemptionRow> UnitProgramExemptionRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Unit_Program_Exemption_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUnitProgramExemptionRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Unit_Program_Exemption_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Unit_Program_Exemption_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// A lookup table of Units of Measure Codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.UnitsOfMeasureCodeRow> UnitsOfMeasureCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Units_of_Measure_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.UnitsOfMeasureCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Units_of_Measure_Code_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Units_of_Measure_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The Unit Stack Configuration records for all of a facility's locations that were retrieved for the evaluation.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUnitStackConfigurationRow> UnitStackConfigurationRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Unit_Stack_Configuration_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUnitStackConfigurationRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Unit_Stack_Configuration_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Unit_Stack_Configuration_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Unit Stack Configuration End Date is Valid.
        /// </summary>
        public static bool? UnitStackEndDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Unit_Stack_End_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Unit_Stack_End_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the Unit Stack Configuration Start Date is Valid.
        /// </summary>
        public static bool? UnitStackStartDateValid
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("Unit_Stack_Start_Date_Valid")));
            }
            set
            {
                MpParameters.SetCheckParameter("Unit_Stack_Start_Date_Valid", value);
            }
        }
        
        /// <summary>
        /// A list of System, Component, and Formula IDs for the location that have been deleted from the MP, but have been reported in EM or QA data.
        /// </summary>
        public static string UnusedIds
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Unused_IDs")));
            }
            set
            {
                MpParameters.SetCheckParameter("Unused_IDs", value);
            }
        }
        
        /// <summary>
        /// All Used Identifier Records for the location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUsedIdentifierRow> UsedIdentifierRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("Used_Identifier_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwUsedIdentifierRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("Used_Identifier_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("Used_Identifier_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Contains a list of the valid locations to use in a response plugin.
        /// </summary>
        public static string ValidLocationTypes
        {
            get
            {
                return ((string)(MpParameters.GetCheckParameter("Valid_Location_Types")));
            }
            set
            {
                MpParameters.SetCheckParameter("Valid_Location_Types", value);
            }
        }
        
        /// <summary>
        /// Indicates whether or not the WAF is active during the Evaluation Period.
        /// </summary>
        public static bool? WafActiveStatus
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("WAF_Active_Status")));
            }
            set
            {
                MpParameters.SetCheckParameter("WAF_Active_Status", value);
            }
        }
        
        /// <summary>
        /// This indicates whether or not the WAF Dates and Hours are consistent.
        /// </summary>
        public static bool? WafDatesAndHoursConsistent
        {
            get
            {
                return ((bool?)(MpParameters.GetCheckParameter("WAF_Dates_and_Hours_Consistent")));
            }
            set
            {
                MpParameters.SetCheckParameter("WAF_Dates_and_Hours_Consistent", value);
            }
        }
        
        /// <summary>
        /// The first date that the WAF is active during an evaluation period.
        /// </summary>
        public static DateTime? WafEvaluationBeginDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("WAF_Evaluation_Begin_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("WAF_Evaluation_Begin_Date", value);
            }
        }
        
        /// <summary>
        /// The first hour that the WAF is active during an evaluation period.
        /// </summary>
        public static DateTime? WafEvaluationBeginHour
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("WAF_Evaluation_Begin_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("WAF_Evaluation_Begin_Hour", value);
            }
        }
        
        /// <summary>
        /// The last date that the WAF is active during an evaluation period.
        /// </summary>
        public static DateTime? WafEvaluationEndDate
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("WAF_Evaluation_End_Date")));
            }
            set
            {
                MpParameters.SetCheckParameter("WAF_Evaluation_End_Date", value);
            }
        }
        
        /// <summary>
        /// The last hour that the WAF is active during an evaluation period.
        /// </summary>
        public static DateTime? WafEvaluationEndHour
        {
            get
            {
                return ((DateTime?)(MpParameters.GetCheckParameter("WAF_Evaluation_End_Hour")));
            }
            set
            {
                MpParameters.SetCheckParameter("WAF_Evaluation_End_Hour", value);
            }
        }
        
        /// <summary>
        /// A list of WAF Method Codes.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.WafMethodCodeRow> WafMethodCodeLookupTable
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("WAF_Method_Code_Lookup_Table")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.Table.WafMethodCodeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("WAF_Method_Code_Lookup_Table", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("WAF_Method_Code_Lookup_Table", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// All WAF records for the location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwRectDuctWafRow> WafRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpParameters.GetCheckParameter("WAF_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwRectDuctWafRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpParameters.SetCheckParameter("WAF_Records", null);
                }
                else
                {
                    MpParameters.SetCheckParameter("WAF_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Gets the parameter value using the category property if it is not null, otherwise using the Process object if it is not null, and otherwise returning null.
        /// </summary>
        /// <param name="parameterId">The string id used to access the parameter in the check parameter collection.</param>
        /// <returns>Returns the requested check parameter as an object if it exists, and as a null if it does not.</returns>
        public static object GetCheckParameter(string parameterId)
        {
            cLegacyCheckParameter checkParameter;
            if (((MpParameters.Category == null) 
                        == false))
            {
                checkParameter = MpParameters.Category.GetCheckParameter(parameterId);
            }
            else
            {
                if (((MpParameters.Process == null) 
                            == false))
                {
                    checkParameter = MpParameters.Process.GetCheckParameter(parameterId);
                }
                else
                {
                    checkParameter = null;
                }
            }
            if ((checkParameter == null))
            {
                return null;
            }
            else
            {
                return checkParameter.ParameterValue;
            }
        }
        
        /// <summary>
        /// Sets the parameter value using the category property if it is not null, otherwise using the Process object if it is not null, and otherwise does nothing.
        /// </summary>
        /// <param name="parameterId">The string id used to access the parameter in the check parameter collection.</param>
        /// <param name="parameterValue">The value to which to set the parameter.</param>
        public static void SetCheckParameter(string parameterId, object parameterValue)
        {
            if (((MpParameters.Category == null) 
                        == false))
            {
                MpParameters.Category.SetCheckParameter(parameterId, parameterValue);
            }
            else
            {
                if (((MpParameters.Process == null) 
                            == false))
                {
                    MpParameters.Process.SetCheckParameter(parameterId, parameterValue);
                }
            }
        }
        
        /// <summary>
        /// Initializes the values in the check parameter object.
        /// </summary>
        public static void Init(cProcess process)
        {
            MpParameters._process = process;
            MpParameters.Category = null;
            MpParameters.RegisterParameters();
        }
        
        /// <summary>
        /// Registers each check parameter.
        /// </summary>
        public static void RegisterParameters()
        {
            if (((MpParameters.Process == null) 
                        || (MpParameters.Process.ProcessParameters == null)))
            {
                return;
            }
            Process.ProcessParameters.RegisterParameter(1202, "Abort_Location_Evaluation");
            Process.ProcessParameters.RegisterParameter(2915, "Affected_Unit");
            Process.ProcessParameters.RegisterParameter(556, "Analyzer_Range_Active");
            Process.ProcessParameters.RegisterParameter(453, "Analyzer_Range_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(514, "Analyzer_Range_Code_Valid");
            Process.ProcessParameters.RegisterParameter(520, "Analyzer_Range_Dates_and_Hours_Consistent");
            Process.ProcessParameters.RegisterParameter(518, "Analyzer_Range_End_Date_Valid");
            Process.ProcessParameters.RegisterParameter(519, "Analyzer_Range_End_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(568, "Analyzer_Range_Evaluation_Begin_Date");
            Process.ProcessParameters.RegisterParameter(569, "Analyzer_Range_Evaluation_Begin_Hour");
            Process.ProcessParameters.RegisterParameter(571, "Analyzer_Range_Evaluation_End_Date");
            Process.ProcessParameters.RegisterParameter(570, "Analyzer_Range_Evaluation_End_Hour");
            Process.ProcessParameters.RegisterParameter(1792, "Analyzer_Range_Records");
            Process.ProcessParameters.RegisterParameter(516, "Analyzer_Range_Start_Date_Valid");
            Process.ProcessParameters.RegisterParameter(517, "Analyzer_Range_Start_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(1021, "Appropriate_Method_For_Formula");
            Process.ProcessParameters.RegisterParameter(579, "Appropriate_System_or_Component_for_Formula");
            Process.ProcessParameters.RegisterParameter(2344, "Attribute_Evaluation_Begin_Date");
            Process.ProcessParameters.RegisterParameter(2346, "Attribute_Evaluation_End_Date");
            Process.ProcessParameters.RegisterParameter(440, "Bypass_Approach_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(1554, "Calculated_Average_Percent_Value");
            Process.ProcessParameters.RegisterParameter(3566, "Combined_Facility_Method_Records");
            Process.ProcessParameters.RegisterParameter(482, "Component_Active");
            Process.ProcessParameters.RegisterParameter(536, "Component_Analyzer_Range_Records");
            Process.ProcessParameters.RegisterParameter(503, "Component_Basis_Code_Valid");
            Process.ProcessParameters.RegisterParameter(501, "Component_Component_Type_Valid");
            Process.ProcessParameters.RegisterParameter(1200, "Component_Dates_and_Hours_Consistent");
            Process.ProcessParameters.RegisterParameter(524, "Component_Evaluation_Begin_Date");
            Process.ProcessParameters.RegisterParameter(525, "Component_Evaluation_Begin_Hour");
            Process.ProcessParameters.RegisterParameter(526, "Component_Evaluation_End_Date");
            Process.ProcessParameters.RegisterParameter(527, "Component_Evaluation_End_Hour");
            Process.ProcessParameters.RegisterParameter(1028, "Component_Parameter_Code");
            Process.ProcessParameters.RegisterParameter(539, "Component_Records");
            Process.ProcessParameters.RegisterParameter(1020, "Component_Type_And_Basis_To_Sample_Acquisition_Method_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(1026, "Component_Type_And_Span_Scale_To_Span_Method_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(446, "Component_Type_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(781, "Control_Active_Status");
            Process.ProcessParameters.RegisterParameter(811, "Control_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(782, "Control_Code_Valid");
            Process.ProcessParameters.RegisterParameter(795, "Control_Evaluation_End_Date");
            Process.ProcessParameters.RegisterParameter(794, "Control_Evaluation_Start_Date");
            Process.ProcessParameters.RegisterParameter(791, "Control_Install_Date_Consistent_With_Retire_Date");
            Process.ProcessParameters.RegisterParameter(785, "Control_Install_Date_Valid");
            Process.ProcessParameters.RegisterParameter(780, "Control_Parameter_Code_Valid");
            Process.ProcessParameters.RegisterParameter(673, "Control_Records");
            Process.ProcessParameters.RegisterParameter(786, "Control_Retire_Date_Valid");
            Process.ProcessParameters.RegisterParameter(1533, "Control_to_Unit_Type_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(3384, "CrossCheck_MatsSupplementalComplianceParameterToMethod");
            Process.ProcessParameters.RegisterParameter(3257, "CrossCheck_ProgramParameterToLocationType");
            Process.ProcessParameters.RegisterParameter(3258, "CrossCheck_ProgramParameterToMethodCode");
            Process.ProcessParameters.RegisterParameter(3259, "CrossCheck_ProgramParameterToMethodParameter");
            Process.ProcessParameters.RegisterParameter(3260, "CrossCheck_ProgramParameterToSeverity");
            Process.ProcessParameters.RegisterParameter(513, "Current_Analyzer_Range");
            Process.ProcessParameters.RegisterParameter(3374, "Current_Begin_Date_and_Hour");
            Process.ProcessParameters.RegisterParameter(3366, "Current_Begin_Date_And_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(3365, "Current_Begin_Date_Valid");
            Process.ProcessParameters.RegisterParameter(492, "Current_Component");
            Process.ProcessParameters.RegisterParameter(779, "Current_Control");
            Process.ProcessParameters.RegisterParameter(3376, "Current_Dates_And_Hours_Consistent");
            Process.ProcessParameters.RegisterParameter(326, "Current_Default");
            Process.ProcessParameters.RegisterParameter(3375, "Current_End_Date_and_Hour");
            Process.ProcessParameters.RegisterParameter(3370, "Current_End_Date_And_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(3367, "Current_End_Date_Valid");
            Process.ProcessParameters.RegisterParameter(349, "Current_Formula");
            Process.ProcessParameters.RegisterParameter(333, "Current_Fuel");
            Process.ProcessParameters.RegisterParameter(701, "Current_Fuel_Flow");
            Process.ProcessParameters.RegisterParameter(364, "Current_Load");
            Process.ProcessParameters.RegisterParameter(699, "Current_Location");
            Process.ProcessParameters.RegisterParameter(264, "Current_Location_Attribute");
            Process.ProcessParameters.RegisterParameter(290, "Current_Method");
            Process.ProcessParameters.RegisterParameter(3382, "Current_Method_Valid");
            Process.ProcessParameters.RegisterParameter(1501, "Current_Monitoring_Plan_Comment");
            Process.ProcessParameters.RegisterParameter(283, "Current_Monitoring_Plan_Configuration");
            Process.ProcessParameters.RegisterParameter(3380, "Current_Parameter_Valid");
            Process.ProcessParameters.RegisterParameter(307, "Current_Program");
            Process.ProcessParameters.RegisterParameter(847, "Current_Program_Active");
            Process.ProcessParameters.RegisterParameter(3251, "Current_Program_Parameter");
            Process.ProcessParameters.RegisterParameter(3252, "Current_Program_Parameter_Active");
            Process.ProcessParameters.RegisterParameter(1488, "Current_Qualification");
            Process.ProcessParameters.RegisterParameter(1541, "Current_Qualification_Active");
            Process.ProcessParameters.RegisterParameter(3378, "Current_Qualification_LEE");
            Process.ProcessParameters.RegisterParameter(1492, "Current_Qualification_LME");
            Process.ProcessParameters.RegisterParameter(1490, "Current_Qualification_Percent");
            Process.ProcessParameters.RegisterParameter(584, "Current_Span");
            Process.ProcessParameters.RegisterParameter(258, "Current_System");
            Process.ProcessParameters.RegisterParameter(480, "Current_System_Component");
            Process.ProcessParameters.RegisterParameter(2237, "Current_Unit");
            Process.ProcessParameters.RegisterParameter(834, "Current_Unit_Capacity");
            Process.ProcessParameters.RegisterParameter(731, "Current_Unit_Stack_Configuration");
            Process.ProcessParameters.RegisterParameter(1358, "Current_WAF");
            Process.ProcessParameters.RegisterParameter(332, "Default_Active_Status");
            Process.ProcessParameters.RegisterParameter(419, "Default_Dates_and_Hours_Consistent");
            Process.ProcessParameters.RegisterParameter(417, "Default_End_Date_Valid");
            Process.ProcessParameters.RegisterParameter(418, "Default_End_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(659, "Default_Evaluation_Begin_Date");
            Process.ProcessParameters.RegisterParameter(660, "Default_Evaluation_Begin_Hour");
            Process.ProcessParameters.RegisterParameter(661, "Default_Evaluation_End_Date");
            Process.ProcessParameters.RegisterParameter(662, "Default_Evaluation_End_Hour");
            Process.ProcessParameters.RegisterParameter(668, "Default_Fuel_Code_Valid");
            Process.ProcessParameters.RegisterParameter(1043, "Default_Parameter,_Boiler_Type,_And_Fuel_Type_To_Default_Value_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(658, "Default_Parameter_Code_Valid");
            Process.ProcessParameters.RegisterParameter(855, "Default_Parameter_List");
            Process.ProcessParameters.RegisterParameter(1038, "Default_Parameter_To_Purpose_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(1041, "Default_Parameter_To_Source_Of_Value_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(431, "Default_Purpose_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(666, "Default_Purpose_Code_Valid");
            Process.ProcessParameters.RegisterParameter(328, "Default_Records");
            Process.ProcessParameters.RegisterParameter(432, "Default_Source_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(667, "Default_Source_Code_Valid");
            Process.ProcessParameters.RegisterParameter(415, "Default_Start_Date_Valid");
            Process.ProcessParameters.RegisterParameter(416, "Default_Start_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(1401, "Default_Unit_Fuel");
            Process.ProcessParameters.RegisterParameter(664, "Default_Value_Valid");
            Process.ProcessParameters.RegisterParameter(2917, "ECMPS_MP_Begin_Date");
            Process.ProcessParameters.RegisterParameter(3104, "Emissions_File_Records");
            Process.ProcessParameters.RegisterParameter(1193, "Evaluate_Monitoring_Plan");
            Process.ProcessParameters.RegisterParameter(3386, "Evaluation_Begin_Date");
            Process.ProcessParameters.RegisterParameter(3388, "Evaluation_End_Date");
            Process.ProcessParameters.RegisterParameter(1884, "Facility_Load_Records");
            Process.ProcessParameters.RegisterParameter(1720, "Facility_Location_Attribute_Records");
            Process.ProcessParameters.RegisterParameter(3035, "Facility_Location_Records");
            Process.ProcessParameters.RegisterParameter(1022, "Facility_Method_Records");
            Process.ProcessParameters.RegisterParameter(376, "Facility_Qualification_Records");
            Process.ProcessParameters.RegisterParameter(1882, "Facility_System_Records");
            Process.ProcessParameters.RegisterParameter(1701, "Facility_Unit_Stack_Configuration_Records");
            Process.ProcessParameters.RegisterParameter(3089, "First_ECMPS_Reporting_Period");
            Process.ProcessParameters.RegisterParameter(603, "Flow_Span_Value_Valid");
            Process.ProcessParameters.RegisterParameter(278, "Flow_System_Active_Present");
            Process.ProcessParameters.RegisterParameter(347, "Formula_Active_Status");
            Process.ProcessParameters.RegisterParameter(436, "Formula_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(1025, "Formula_Code_To_F-factor_Parameter_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(582, "Formula_Code_Valid");
            Process.ProcessParameters.RegisterParameter(562, "Formula_Dates_and_Hours_Consistent");
            Process.ProcessParameters.RegisterParameter(560, "Formula_End_Date_Valid");
            Process.ProcessParameters.RegisterParameter(561, "Formula_End_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(547, "Formula_Evaluation_Begin_Date");
            Process.ProcessParameters.RegisterParameter(548, "Formula_Evaluation_Begin_Hour");
            Process.ProcessParameters.RegisterParameter(549, "Formula_Evaluation_End_Date");
            Process.ProcessParameters.RegisterParameter(550, "Formula_Evaluation_End_Hour");
            Process.ProcessParameters.RegisterParameter(1017, "Formula_Parameter_And_Component_Type_And_Basis_To_Formula_Code_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(303, "Formula_Parameter_List");
            Process.ProcessParameters.RegisterParameter(552, "Formula_Parameter_Valid");
            Process.ProcessParameters.RegisterParameter(348, "Formula_Records");
            Process.ProcessParameters.RegisterParameter(558, "Formula_Start_Date_Valid");
            Process.ProcessParameters.RegisterParameter(559, "Formula_Start_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(3390, "Formula_to_Required_Method_Crosscheck");
            Process.ProcessParameters.RegisterParameter(3391, "Formula_to_Required_Unit_Fuel_Crosscheck");
            Process.ProcessParameters.RegisterParameter(334, "Fuel_Active_Status");
            Process.ProcessParameters.RegisterParameter(769, "Fuel_Begin_Date_Valid");
            Process.ProcessParameters.RegisterParameter(430, "Fuel_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(1042, "Fuel_Code_To_Minimum_And_Maximum_Moisture_Default_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(336, "Fuel_Code_Valid");
            Process.ProcessParameters.RegisterParameter(771, "Fuel_Dates_Consistent");
            Process.ProcessParameters.RegisterParameter(1532, "Fuel_Demonstration_Method_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(770, "Fuel_End_Date_Valid");
            Process.ProcessParameters.RegisterParameter(788, "Fuel_Evaluation_Begin_Date");
            Process.ProcessParameters.RegisterParameter(789, "Fuel_Evaluation_End_Date");
            Process.ProcessParameters.RegisterParameter(705, "Fuel_Flow_Active_Status");
            Process.ProcessParameters.RegisterParameter(708, "Fuel_Flow_Dates_and_Hours_Consistent");
            Process.ProcessParameters.RegisterParameter(706, "Fuel_Flow_End_Date_Valid");
            Process.ProcessParameters.RegisterParameter(707, "Fuel_Flow_End_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(716, "Fuel_Flow_Evaluation_End_Date");
            Process.ProcessParameters.RegisterParameter(717, "Fuel_Flow_Evaluation_End_Hour");
            Process.ProcessParameters.RegisterParameter(713, "Fuel_Flow_Evaluation_Start_Date");
            Process.ProcessParameters.RegisterParameter(714, "Fuel_Flow_Evaluation_Start_Hour");
            Process.ProcessParameters.RegisterParameter(802, "Fuel_Flow_Maximum_Rate_Source_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(728, "Fuel_Flow_Records");
            Process.ProcessParameters.RegisterParameter(703, "Fuel_Flow_Start_Date_Valid");
            Process.ProcessParameters.RegisterParameter(704, "Fuel_Flow_Start_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(1531, "Fuel_Group");
            Process.ProcessParameters.RegisterParameter(1880, "Fuel_Indicator_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(3600, "Fuels_with_Incomplete_Defaults");
            Process.ProcessParameters.RegisterParameter(3599, "Fuels_with_Missing_Defaults");
            Process.ProcessParameters.RegisterParameter(971, "Incomplete_Components_for_System");
            Process.ProcessParameters.RegisterParameter(1383, "Incomplete_Default_for_Formula");
            Process.ProcessParameters.RegisterParameter(1391, "Incomplete_Default_for_Method");
            Process.ProcessParameters.RegisterParameter(1400, "Incomplete_Default_for_System");
            Process.ProcessParameters.RegisterParameter(3100, "Incomplete_Default_Fuel_for_Method");
            Process.ProcessParameters.RegisterParameter(1015, "Incomplete_Formula_for_Component");
            Process.ProcessParameters.RegisterParameter(989, "Incomplete_Fuel_System_For_Method");
            Process.ProcessParameters.RegisterParameter(996, "Incomplete_Nox_System_For_Method");
            Process.ProcessParameters.RegisterParameter(3063, "Incomplete_Qualification_for_Method");
            Process.ProcessParameters.RegisterParameter(4627, "Incomplete_System_for_Method");
            Process.ProcessParameters.RegisterParameter(1549, "Initial_Qualification");
            Process.ProcessParameters.RegisterParameter(1143, "Invalid_Maximum_Default");
            Process.ProcessParameters.RegisterParameter(1120, "Invalid_Method_Fuel");
            Process.ProcessParameters.RegisterParameter(629, "Invalid_Parameters_for_CEM_Method");
            Process.ProcessParameters.RegisterParameter(2366, "Invalid_Parameters_for_LME_Method");
            Process.ProcessParameters.RegisterParameter(3112, "Invalid_Unit_Type_for_Control");
            Process.ProcessParameters.RegisterParameter(743, "Load_Active_Status");
            Process.ProcessParameters.RegisterParameter(742, "Load_Dates_And_Hours_Consistent");
            Process.ProcessParameters.RegisterParameter(740, "Load_End_Date_Valid");
            Process.ProcessParameters.RegisterParameter(741, "Load_End_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(746, "Load_Evaluation_End_Date");
            Process.ProcessParameters.RegisterParameter(747, "Load_Evaluation_End_Hour");
            Process.ProcessParameters.RegisterParameter(744, "Load_Evaluation_Start_Date");
            Process.ProcessParameters.RegisterParameter(745, "Load_Evaluation_Start_Hour");
            Process.ProcessParameters.RegisterParameter(1355, "Load_Levels_Required");
            Process.ProcessParameters.RegisterParameter(365, "Load_Records");
            Process.ProcessParameters.RegisterParameter(738, "Load_Start_Date_Valid");
            Process.ProcessParameters.RegisterParameter(739, "Load_Start_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(277, "Location_Active");
            Process.ProcessParameters.RegisterParameter(475, "Location_Analyzer_Range_Records");
            Process.ProcessParameters.RegisterParameter(276, "Location_Attribute_End_Date_Valid");
            Process.ProcessParameters.RegisterParameter(700, "Location_Attribute_Records");
            Process.ProcessParameters.RegisterParameter(730, "Location_Attribute_Record_Valid");
            Process.ProcessParameters.RegisterParameter(275, "Location_Attribute_Start_Date_Valid");
            Process.ProcessParameters.RegisterParameter(803, "Location_Capacity_Records");
            Process.ProcessParameters.RegisterParameter(508, "Location_Control_Records");
            Process.ProcessParameters.RegisterParameter(390, "Location_Dates_Consistent");
            Process.ProcessParameters.RegisterParameter(399, "Location_Evaluation_Begin_Date");
            Process.ProcessParameters.RegisterParameter(400, "Location_Evaluation_End_Date");
            Process.ProcessParameters.RegisterParameter(319, "Location_Fuel_Records");
            Process.ProcessParameters.RegisterParameter(3256, "Location_Program_Parameter_Records");
            Process.ProcessParameters.RegisterParameter(301, "Location_Program_Records");
            Process.ProcessParameters.RegisterParameter(859, "Location_Reporting_Frequency_Records");
            Process.ProcessParameters.RegisterParameter(540, "Location_System_Component_Records");
            Process.ProcessParameters.RegisterParameter(695, "Location_System_Fuel_Flow_Records");
            Process.ProcessParameters.RegisterParameter(1380, "Location_Test_Records");
            Process.ProcessParameters.RegisterParameter(265, "Location_Type");
            Process.ProcessParameters.RegisterParameter(901, "Location_Type_Description");
            Process.ProcessParameters.RegisterParameter(510, "Location_Unit_Type_Records");
            Process.ProcessParameters.RegisterParameter(3385, "MATS_Combined_Method_Records_By_Location");
            Process.ProcessParameters.RegisterParameter(3372, "MATS_Evaluation_Begin_Date");
            Process.ProcessParameters.RegisterParameter(3383, "MATS_Method_Code_Lookup");
            Process.ProcessParameters.RegisterParameter(3381, "MATS_Method_Parameter_Code_Lookup");
            Process.ProcessParameters.RegisterParameter(3389, "MATS_MP_Supplemental_Compliance_Method_Records");
            Process.ProcessParameters.RegisterParameter(3320, "MATS_Required_Check");
            Process.ProcessParameters.RegisterParameter(3371, "MATS_Supplemental_Compliance_Method_Record");
            Process.ProcessParameters.RegisterParameter(1039, "Maximum_Default_Value");
            Process.ProcessParameters.RegisterParameter(3373, "Maximum_Future_Date");
            Process.ProcessParameters.RegisterParameter(753, "Maximum_Load_Units_Of_Measure_Valid");
            Process.ProcessParameters.RegisterParameter(1029, "Maximum_Span_Value");
            Process.ProcessParameters.RegisterParameter(299, "Method_Active");
            Process.ProcessParameters.RegisterParameter(504, "Method_Bypass_Approach_Code_Valid");
            Process.ProcessParameters.RegisterParameter(441, "Method_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(402, "Method_Dates_and_Hours_Consistent");
            Process.ProcessParameters.RegisterParameter(297, "Method_End_Date_Valid");
            Process.ProcessParameters.RegisterParameter(298, "Method_End_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(403, "Method_Evaluation_Begin_Date");
            Process.ProcessParameters.RegisterParameter(404, "Method_Evaluation_Begin_Hour");
            Process.ProcessParameters.RegisterParameter(405, "Method_Evaluation_End_Date");
            Process.ProcessParameters.RegisterParameter(406, "Method_Evaluation_End_Hour");
            Process.ProcessParameters.RegisterParameter(294, "Method_Method_Code_Valid");
            Process.ProcessParameters.RegisterParameter(3560, "Method_Parameter_Equivalent_Crosscheck");
            Process.ProcessParameters.RegisterParameter(762, "Method_Parameter_List");
            Process.ProcessParameters.RegisterParameter(906, "Method_Parameter_To_Maximum_Default_Parameter_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(291, "Method_Parameter_Valid");
            Process.ProcessParameters.RegisterParameter(340, "Method_Records");
            Process.ProcessParameters.RegisterParameter(295, "Method_Start_Date_Valid");
            Process.ProcessParameters.RegisterParameter(296, "Method_Start_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(292, "Method_Substitute_Data_Code_Valid");
            Process.ProcessParameters.RegisterParameter(1785, "Method_To_Substitute_Data_Code_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(858, "Method_to_System_Type_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(1040, "Minimum_Default_Value");
            Process.ProcessParameters.RegisterParameter(1030, "Minimum_Span_Value");
            Process.ProcessParameters.RegisterParameter(462, "Missing_Components_for_System");
            Process.ProcessParameters.RegisterParameter(1382, "Missing_Default_for_Formula");
            Process.ProcessParameters.RegisterParameter(1390, "Missing_Default_for_Method");
            Process.ProcessParameters.RegisterParameter(1399, "Missing_Default_for_System");
            Process.ProcessParameters.RegisterParameter(1859, "Missing_Default_For_System_And_Component");
            Process.ProcessParameters.RegisterParameter(3101, "Missing_Default_Fuel_for_Method");
            Process.ProcessParameters.RegisterParameter(813, "Missing_Formula_for_Component");
            Process.ProcessParameters.RegisterParameter(1518, "Missing_Formula_For_Method");
            Process.ProcessParameters.RegisterParameter(1141, "Missing_Formula_For_System");
            Process.ProcessParameters.RegisterParameter(854, "Missing_Fuel_System_For_Method");
            Process.ProcessParameters.RegisterParameter(1142, "Missing_Maximum_Default");
            Process.ProcessParameters.RegisterParameter(370, "Missing_Methods_for_NOX_NOXR_Method");
            Process.ProcessParameters.RegisterParameter(994, "Missing_Nox_System_For_Method");
            Process.ProcessParameters.RegisterParameter(3062, "Missing_Qualification_for_Method");
            Process.ProcessParameters.RegisterParameter(2842, "Moisture_Default_Parameter");
            Process.ProcessParameters.RegisterParameter(2210, "Moisture_Default_Required");
            Process.ProcessParameters.RegisterParameter(1024, "Moisture_Method_Required");
            Process.ProcessParameters.RegisterParameter(1502, "Monitoring_Plan_Comment_Records");
            Process.ProcessParameters.RegisterParameter(3175, "Monitoring_Plan_Op_Status_Records");
            Process.ProcessParameters.RegisterParameter(282, "Monitoring_Plan_Program_List");
            Process.ProcessParameters.RegisterParameter(2120, "Monitor_Plan_Comment_Begin_Date_Valid");
            Process.ProcessParameters.RegisterParameter(2121, "Monitor_Plan_Comment_End_Date_Valid");
            Process.ProcessParameters.RegisterParameter(1536, "Monitor_Qualification_Begin_Date_Valid");
            Process.ProcessParameters.RegisterParameter(1538, "Monitor_Qualification_Dates_Consistent");
            Process.ProcessParameters.RegisterParameter(1537, "Monitor_Qualification_End_Date_Valid");
            Process.ProcessParameters.RegisterParameter(1550, "Monitor_Qualification_Percent_Qualification_Year_Valid");
            Process.ProcessParameters.RegisterParameter(1552, "Monitor_Qualification_Percent_Yr1_Qualification_Data_Year_Valid");
            Process.ProcessParameters.RegisterParameter(1553, "Monitor_Qualification_Percent_Yr2_Qualification_Data_Year_Valid");
            Process.ProcessParameters.RegisterParameter(1555, "Monitor_Qualification_Percent_Yr3_Qualification_Data_Year_Valid");
            Process.ProcessParameters.RegisterParameter(1542, "Monitor_Qualification_Valid");
            Process.ProcessParameters.RegisterParameter(345, "Monitor_System_Records");
            Process.ProcessParameters.RegisterParameter(1037, "MPC_MEC");
            Process.ProcessParameters.RegisterParameter(3246, "MP_Locations");
            Process.ProcessParameters.RegisterParameter(2847, "MP_Method_Records");
            Process.ProcessParameters.RegisterParameter(3303, "MP_Unit_Stack_Configuration_Records");
            Process.ProcessParameters.RegisterParameter(322, "Non_Load_Based_Indicator");
            Process.ProcessParameters.RegisterParameter(693, "NOXG/NOXU_Defaults_Consistent");
            Process.ProcessParameters.RegisterParameter(2367, "NOX_LME_Unit");
            Process.ProcessParameters.RegisterParameter(1534, "NOX_MPC_to_Fuel_Category_and_Unit_Type");
            Process.ProcessParameters.RegisterParameter(997, "Nox_System_Type");
            Process.ProcessParameters.RegisterParameter(3606, "NSPS4T_Method_Parameter_Description");
            Process.ProcessParameters.RegisterParameter(1381, "O2_Component_Required");
            Process.ProcessParameters.RegisterParameter(3561, "Overlapping_Parameter_List");
            Process.ProcessParameters.RegisterParameter(3319, "Parameter_And_Method_And_Location_To_Formula_Crosscheck");
            Process.ProcessParameters.RegisterParameter(857, "Parameter_to_Method_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(765, "Parameter_Units_Of_Measure_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(2343, "Post2008_Flow_System_Present");
            Process.ProcessParameters.RegisterParameter(3593, "Program_Code_Table");
            Process.ProcessParameters.RegisterParameter(848, "Program_Evaluation_Begin_Date");
            Process.ProcessParameters.RegisterParameter(849, "Program_Evaluation_End_Date");
            Process.ProcessParameters.RegisterParameter(3594, "Program_is_Ozone_Season_List");
            Process.ProcessParameters.RegisterParameter(3255, "Program_Method_Parameter_Description");
            Process.ProcessParameters.RegisterParameter(3253, "Program_Parameter_Evaluation_Begin_Date");
            Process.ProcessParameters.RegisterParameter(3254, "Program_Parameter_Evaluation_End_Date");
            Process.ProcessParameters.RegisterParameter(1331, "QA_Supplemental_Data_Records");
            Process.ProcessParameters.RegisterParameter(1546, "Qualification_Consistent_with_Fuel");
            Process.ProcessParameters.RegisterParameter(1547, "Qualification_Consistent_with_Non_Load_Based_Indicator");
            Process.ProcessParameters.RegisterParameter(1545, "Qualification_Consistent_with_Program_and_Reporting_Frequency");
            Process.ProcessParameters.RegisterParameter(1540, "Qualification_Evaluation_End_Date");
            Process.ProcessParameters.RegisterParameter(1539, "Qualification_Evaluation_Start_Date");
            Process.ProcessParameters.RegisterParameter(3377, "QualificationLEE_Records");
            Process.ProcessParameters.RegisterParameter(3379, "Qualification_Lee_Test_Type_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(1506, "QualificationLME_Records");
            Process.ProcessParameters.RegisterParameter(1491, "Qualification_Percent_Records");
            Process.ProcessParameters.RegisterParameter(1489, "Qualification_Records");
            Process.ProcessParameters.RegisterParameter(1543, "Qualification_System_Type");
            Process.ProcessParameters.RegisterParameter(448, "Qualification_Type_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(1548, "Qualification_Type_Code_Valid");
            Process.ProcessParameters.RegisterParameter(1357, "Range_of_Operation_Required");
            Process.ProcessParameters.RegisterParameter(1363, "Rectangular_Duct_WAF_Effective_Date_Valid");
            Process.ProcessParameters.RegisterParameter(1364, "Rectangular_Duct_WAF_Effective_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(1365, "Rectangular_Duct_WAF_End_Date_Valid");
            Process.ProcessParameters.RegisterParameter(1366, "Rectangular_Duct_WAF_End_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(1370, "Rectangular_Duct_WAF_Number_of_Method_1_Traverse_Points_in_WAF_Test_Valid");
            Process.ProcessParameters.RegisterParameter(697, "Related_Maximum");
            Process.ProcessParameters.RegisterParameter(461, "Required_DAHS_Reported_for_System");
            Process.ProcessParameters.RegisterParameter(1130, "Required_Non_DAHS_Components_Reported_For_System");
            Process.ProcessParameters.RegisterParameter(1342, "Required_Probe");
            Process.ProcessParameters.RegisterParameter(532, "Required_Span_Reported_for_Component_Type_and_Analyzer_Range");
            Process.ProcessParameters.RegisterParameter(853, "Required_System_For_Method");
            Process.ProcessParameters.RegisterParameter(451, "Sample_Acquisition_Method_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(1544, "SO2_LME_Unit");
            Process.ProcessParameters.RegisterParameter(586, "Span_Active_Status");
            Process.ProcessParameters.RegisterParameter(607, "Span_Component_Type_Code_Valid");
            Process.ProcessParameters.RegisterParameter(601, "Span_Dates_and_Hours_Consistent");
            Process.ProcessParameters.RegisterParameter(602, "Span_Default_High_Range_Value_Valid");
            Process.ProcessParameters.RegisterParameter(595, "Span_End_Date_Valid");
            Process.ProcessParameters.RegisterParameter(596, "Span_End_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(597, "Span_Evaluation_Begin_Date");
            Process.ProcessParameters.RegisterParameter(599, "Span_Evaluation_Begin_Hour");
            Process.ProcessParameters.RegisterParameter(600, "Span_Evaluation_End_Date");
            Process.ProcessParameters.RegisterParameter(598, "Span_Evaluation_End_Hour");
            Process.ProcessParameters.RegisterParameter(592, "Span_Full_Scale_Range_Value_Valid");
            Process.ProcessParameters.RegisterParameter(587, "Span_MEC_Value_Valid");
            Process.ProcessParameters.RegisterParameter(442, "Span_Method_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(585, "Span_MPC_Value_Valid");
            Process.ProcessParameters.RegisterParameter(531, "Span_Records");
            Process.ProcessParameters.RegisterParameter(605, "Span_Scale_Code_Valid");
            Process.ProcessParameters.RegisterParameter(593, "Span_Start_Date_Valid");
            Process.ProcessParameters.RegisterParameter(594, "Span_Start_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(591, "Span_Value_Valid");
            Process.ProcessParameters.RegisterParameter(723, "Stack_Active_Date_Valid");
            Process.ProcessParameters.RegisterParameter(3304, "Stack_Information_Required");
            Process.ProcessParameters.RegisterParameter(2157, "Stack_Pipe_ID_Format_Valid");
            Process.ProcessParameters.RegisterParameter(383, "Stack_Pipe_Records");
            Process.ProcessParameters.RegisterParameter(724, "Stack_Retire_Date_Valid");
            Process.ProcessParameters.RegisterParameter(305, "Substitute_Data_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(2, "System_Active");
            Process.ProcessParameters.RegisterParameter(2355, "System_Analyzer_Range_Records");
            Process.ProcessParameters.RegisterParameter(565, "System_Component_Active");
            Process.ProcessParameters.RegisterParameter(489, "System_Component_Dates_and_Hours_Consistent");
            Process.ProcessParameters.RegisterParameter(487, "System_Component_End_Date_Valid");
            Process.ProcessParameters.RegisterParameter(488, "System_Component_End_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(814, "System_Component_Evaluation_Begin_Date");
            Process.ProcessParameters.RegisterParameter(815, "System_Component_Evaluation_Begin_Hour");
            Process.ProcessParameters.RegisterParameter(816, "System_Component_Evaluation_End_Date");
            Process.ProcessParameters.RegisterParameter(817, "System_Component_Evaluation_End_Hour");
            Process.ProcessParameters.RegisterParameter(459, "System_Component_Records");
            Process.ProcessParameters.RegisterParameter(1019, "System_Component_Record_Valid");
            Process.ProcessParameters.RegisterParameter(484, "System_Component_Start_Date_Valid");
            Process.ProcessParameters.RegisterParameter(486, "System_Component_Start_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(409, "System_Dates_and_Hours_Consistent");
            Process.ProcessParameters.RegisterParameter(427, "System_Designation_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(391, "System_Designation_Code_Valid");
            Process.ProcessParameters.RegisterParameter(395, "System_End_Date_Valid");
            Process.ProcessParameters.RegisterParameter(396, "System_End_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(410, "System_Evaluation_Begin_Date");
            Process.ProcessParameters.RegisterParameter(411, "System_Evaluation_Begin_Hour");
            Process.ProcessParameters.RegisterParameter(412, "System_Evaluation_End_Date");
            Process.ProcessParameters.RegisterParameter(413, "System_Evaluation_End_Hour");
            Process.ProcessParameters.RegisterParameter(420, "System_Fuel_Code_Valid");
            Process.ProcessParameters.RegisterParameter(465, "System_Fuel_Flow_Records");
            Process.ProcessParameters.RegisterParameter(1027, "System_Parameter_Code");
            Process.ProcessParameters.RegisterParameter(3220, "System_Parameter_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(2319, "System_Record_Valid");
            Process.ProcessParameters.RegisterParameter(393, "System_Start_Date_Valid");
            Process.ProcessParameters.RegisterParameter(394, "System_Start_Hour_Valid");
            Process.ProcessParameters.RegisterParameter(1635, "System_System_Component_Records");
            Process.ProcessParameters.RegisterParameter(392, "System_Type_Code_Valid");
            Process.ProcessParameters.RegisterParameter(426, "System_Type_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(970, "System_Type_To_Component_Type_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(1016, "System_Type_To_Formula_Parameter_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(956, "System_Type_To_Fuel_Group_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(1018, "System_Type_to_Optional_Component_Type_Cross_Check_Table");
            Process.ProcessParameters.RegisterParameter(1398, "System_Unit_Fuel");
            Process.ProcessParameters.RegisterParameter(837, "Unit_Capacity_Begin_Date_Valid");
            Process.ProcessParameters.RegisterParameter(839, "Unit_Capacity_Dates_Consistent");
            Process.ProcessParameters.RegisterParameter(838, "Unit_Capacity_End_Date_Valid");
            Process.ProcessParameters.RegisterParameter(841, "Unit_Capacity_Evaluation_Begin_Date");
            Process.ProcessParameters.RegisterParameter(842, "Unit_Capacity_Evaluation_End_Date");
            Process.ProcessParameters.RegisterParameter(840, "Unit_Capacity_Record_Active");
            Process.ProcessParameters.RegisterParameter(499, "Unit_Capacity_Records");
            Process.ProcessParameters.RegisterParameter(763, "Unit_Fuel_Demonstration_GCV_Valid");
            Process.ProcessParameters.RegisterParameter(768, "Unit_Fuel_Demonstration_So2_Valid");
            Process.ProcessParameters.RegisterParameter(776, "Unit_Fuel_Ozone_Season_Indicator_Valid");
            Process.ProcessParameters.RegisterParameter(808, "Unit_Fuel_Primary_Secondary_Indicator_Code_Valid");
            Process.ProcessParameters.RegisterParameter(3213, "Unit_Monitor_System_Records");
            Process.ProcessParameters.RegisterParameter(1203, "Unit_Operating_Status_Records");
            Process.ProcessParameters.RegisterParameter(1194, "Unit_Program_Exemption_Records");
            Process.ProcessParameters.RegisterParameter(435, "Units_of_Measure_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(384, "Unit_Stack_Configuration_Records");
            Process.ProcessParameters.RegisterParameter(733, "Unit_Stack_End_Date_Valid");
            Process.ProcessParameters.RegisterParameter(732, "Unit_Stack_Start_Date_Valid");
            Process.ProcessParameters.RegisterParameter(1385, "Unused_IDs");
            Process.ProcessParameters.RegisterParameter(1384, "Used_Identifier_Records");
            Process.ProcessParameters.RegisterParameter(3623, "Valid_Location_Types");
            Process.ProcessParameters.RegisterParameter(1373, "WAF_Active_Status");
            Process.ProcessParameters.RegisterParameter(1368, "WAF_Dates_and_Hours_Consistent");
            Process.ProcessParameters.RegisterParameter(1374, "WAF_Evaluation_Begin_Date");
            Process.ProcessParameters.RegisterParameter(1375, "WAF_Evaluation_Begin_Hour");
            Process.ProcessParameters.RegisterParameter(1376, "WAF_Evaluation_End_Date");
            Process.ProcessParameters.RegisterParameter(1377, "WAF_Evaluation_End_Hour");
            Process.ProcessParameters.RegisterParameter(1535, "WAF_Method_Code_Lookup_Table");
            Process.ProcessParameters.RegisterParameter(1530, "WAF_Records");
        }
    }
}
