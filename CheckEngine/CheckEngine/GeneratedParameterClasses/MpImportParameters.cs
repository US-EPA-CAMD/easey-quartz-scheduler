//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ECMPS.Checks.MpImport.Parameters
{
    using System;
    using System.Collections.Generic;
    using System.Data;
    using ECMPS.Checks.CheckEngine;
    using ECMPS.Checks.CheckEngine.SpecialParameterClasses;
    using ECMPS.Checks.TypeUtilities;
    
    
    /// Parameter class for the MpImport process
    public sealed class MpImportParameters
    {
        
        // Storage field for property 'Process'
        private static cProcess _process;
        
        // Storage field for property 'Category'
        private static cCategory _category;
        
        /// The process object for the current evaluation process.  Set by the actual process during initialization.
        public static cProcess Process
        {
            get
            {
                return _process;
            }
        }
        
        /// The current category object set at the beginning of the category's processing of checks and nulled at the end of the processing.
        public static cCategory Category
        {
            get
            {
                return _category;
            }
            set
            {
                _category = value;
            }
        }
        
        /// <summary>
        /// Component Records at location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwComponentRow> ComponentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpImportParameters.GetCheckParameter("Component_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwComponentRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpImportParameters.SetCheckParameter("Component_Records", null);
                }
                else
                {
                    MpImportParameters.SetCheckParameter("Component_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The current Analyzer Range record in the Workspace.
        /// </summary>
        public static ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpAnalyzerrangeRow CurrentWorkspaceAnalyzerRange
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpImportParameters.GetCheckParameter("Current_Workspace_Analyzer_Range")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpAnalyzerrangeRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_Analyzer_Range", null);
                }
                else
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_Analyzer_Range", value.SourceRow);
                }
            }
        }
        
        
        /// <summary>
        /// The current component in the Workspace tables (in the following tables):
        ///
        ///MP_COMPONENT
        /// </summary>
        public static ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpComponentRow CurrentWorkspaceComponent
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpImportParameters.GetCheckParameter("Current_Workspace_Component")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpComponentRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_Component", null);
                }
                else
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_Component", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current formula record and associated data in the workspace.
        /// </summary>
        public static ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpMonitoringformulaRow CurrentWorkspaceFormula
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpImportParameters.GetCheckParameter("Current_Workspace_Formula")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpMonitoringformulaRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_Formula", null);
                }
                else
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_Formula", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current monitor qualification record and associated data in the workspace.
        /// </summary>
        public static ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpMonitoringqualRow CurrentWorkspaceQualification
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpImportParameters.GetCheckParameter("Current_Workspace_Qualification")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpMonitoringqualRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_Qualification", null);
                }
                else
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_Qualification", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current monitor qualification LME record and associated data in the workspace.
        /// </summary>
        public static ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpMonitoringquallmeRow CurrentWorkspaceQualificationLme
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpImportParameters.GetCheckParameter("Current_Workspace_Qualification_LME")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpMonitoringquallmeRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_Qualification_LME", null);
                }
                else
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_Qualification_LME", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current span record in the Workspace table
        /// </summary>
        public static ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpMonitoringspanRow CurrentWorkspaceSpan
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpImportParameters.GetCheckParameter("Current_Workspace_Span")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpMonitoringspanRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_Span", null);
                }
                else
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_Span", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current stack in the Workspace tables (in the following tables):
        ///
        ///MP_StackPipe
        /// </summary>
        public static ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpStackpipeRow CurrentWorkspaceStackPipe
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpImportParameters.GetCheckParameter("Current_Workspace_Stack_Pipe")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpStackpipeRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_Stack_Pipe", null);
                }
                else
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_Stack_Pipe", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current system in the Workspace tables (in the following tables):
        ///
        ///MP_MonitoringSys
        /// </summary>
        public static ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpMonitoringsysRow CurrentWorkspaceSystem
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpImportParameters.GetCheckParameter("Current_Workspace_System")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpMonitoringsysRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_System", null);
                }
                else
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_System", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current system component in the Workspace tables (in the following tables):
        ///
        ///MP_MonitoringSysComponent
        /// </summary>
        public static ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpMonitoringsyscomponentRow CurrentWorkspaceSystemComponent
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpImportParameters.GetCheckParameter("Current_Workspace_System_Component")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpMonitoringsyscomponentRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_System_Component", null);
                }
                else
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_System_Component", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current record System Fuelflow record in the Workspace.
        /// </summary>
        public static ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpMonitoringsysfuelflowRow CurrentWorkspaceSystemFuelflow
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpImportParameters.GetCheckParameter("Current_Workspace_System_Fuelflow")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpMonitoringsysfuelflowRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_System_Fuelflow", null);
                }
                else
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_System_Fuelflow", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// The current unit in the Workspace tables (in the following tables):
        ///
        ///For MP Import:
        ///
        ///MP_MonitoringQualLME
        ///MP_MonitoringQualPCT
        ///MP_Unit
        ///MP_UnitCapacity
        ///MP_UnitControl
        ///MP_UnitFuel
        ///MP_UnitStackConfig
        ///
        ///For EM Import:
        ///
        /// </summary>
        public static ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpUnitRow CurrentWorkspaceUnit
        {
            get
            {
                System.Data.DataRowView sourceRow = ((System.Data.DataRowView)(MpImportParameters.GetCheckParameter("Current_Workspace_Unit")));
                if ((sourceRow == null))
                {
                    return null;
                }
                else
                {
                    return new ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpUnitRow(sourceRow);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_Unit", null);
                }
                else
                {
                    MpImportParameters.SetCheckParameter("Current_Workspace_Unit", value.SourceRow);
                }
            }
        }
        
        /// <summary>
        /// A list of fields reported in the span record not appropriate for the component type.
        /// </summary>
        public static string ExtraneousSpanFields
        {
            get
            {
                return ((string)(MpImportParameters.GetCheckParameter("Extraneous_Span_Fields")));
            }
            set
            {
                MpImportParameters.SetCheckParameter("Extraneous_Span_Fields", value);
            }
        }
        
        /// <summary>
        /// Formula records with formula info included
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorFormulaRow> FormulaRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpImportParameters.GetCheckParameter("Formula_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorFormulaRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpImportParameters.SetCheckParameter("Formula_Records", null);
                }
                else
                {
                    MpImportParameters.SetCheckParameter("Formula_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Components in System Component record but not in Component record during monitoring plan import.
        /// </summary>
        public static string MissingComponentIdForSystemComponent
        {
            get
            {
                return ((string)(MpImportParameters.GetCheckParameter("Missing_Component_ID_for_System_Component")));
            }
            set
            {
                MpImportParameters.SetCheckParameter("Missing_Component_ID_for_System_Component", value);
            }
        }
        
        /// <summary>
        /// System Records at location.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemRow> MonitorSystemRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpImportParameters.GetCheckParameter("Monitor_System_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.Ecmps.Dbo.View.VwMonitorSystemRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpImportParameters.SetCheckParameter("Monitor_System_Records", null);
                }
                else
                {
                    MpImportParameters.SetCheckParameter("Monitor_System_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The component records and associated data in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaComponentsRow> WorkspaceComponentRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpImportParameters.GetCheckParameter("Workspace_Component_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckQaComponentsRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpImportParameters.SetCheckParameter("Workspace_Component_Records", null);
                }
                else
                {
                    MpImportParameters.SetCheckParameter("Workspace_Component_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The MonitorQualLME records in the workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpMonitoringquallmeRow> WorkspaceQualificationLmeRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpImportParameters.GetCheckParameter("Workspace_Qualification_LME_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpMonitoringquallmeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpImportParameters.SetCheckParameter("Workspace_Qualification_LME_Records", null);
                }
                else
                {
                    MpImportParameters.SetCheckParameter("Workspace_Qualification_LME_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// The records in the Stack_Pipe table in the Workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpStackpipeRow> WorkspaceStackPipeRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpImportParameters.GetCheckParameter("Workspace_Stack_Pipe_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckMpStackpipeRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpImportParameters.SetCheckParameter("Workspace_Stack_Pipe_Records", null);
                }
                else
                {
                    MpImportParameters.SetCheckParameter("Workspace_Stack_Pipe_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Number of Units in the Workspace tables
        /// </summary>
        public static int? WorkspaceUnitCount
        {
            get
            {
                return ((int?)(MpImportParameters.GetCheckParameter("Workspace_Unit_Count")));
            }
            set
            {
                MpImportParameters.SetCheckParameter("Workspace_Unit_Count", value);
            }
        }
        
        /// <summary>
        /// The records in the Unit table in the Workspace.
        /// </summary>
        public static CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckEmLocationsRow> WorkspaceUnitRecords
        {
            get
            {
                System.Data.DataView sourceView = ((System.Data.DataView)(MpImportParameters.GetCheckParameter("Workspace_Unit_Records")));
                if ((sourceView == null))
                {
                    return null;
                }
                else
                {
                    return new CheckDataView<ECMPS.Checks.Data.EcmpsWs.Dbo.View.VwCheckEmLocationsRow>(sourceView);
                }
            }
            set
            {
                if ((value == null))
                {
                    MpImportParameters.SetCheckParameter("Workspace_Unit_Records", null);
                }
                else
                {
                    MpImportParameters.SetCheckParameter("Workspace_Unit_Records", value.SourceView);
                }
            }
        }
        
        /// <summary>
        /// Gets the parameter value using the category property if it is not null, otherwise using the Process object if it is not null, and otherwise returning null.
        /// </summary>
        /// <param name="parameterId">The string id used to access the parameter in the check parameter collection.</param>
        /// <returns>Returns the requested check parameter as an object if it exists, and as a null if it does not.</returns>
        public static object GetCheckParameter(string parameterId)
        {
            cLegacyCheckParameter checkParameter;
            if (((MpImportParameters.Category == null) 
                        == false))
            {
                checkParameter = MpImportParameters.Category.GetCheckParameter(parameterId);
            }
            else
            {
                if (((MpImportParameters.Process == null) 
                            == false))
                {
                    checkParameter = MpImportParameters.Process.GetCheckParameter(parameterId);
                }
                else
                {
                    checkParameter = null;
                }
            }
            if ((checkParameter == null))
            {
                return null;
            }
            else
            {
                return checkParameter.ParameterValue;
            }
        }
        
        /// <summary>
        /// Sets the parameter value using the category property if it is not null, otherwise using the Process object if it is not null, and otherwise does nothing.
        /// </summary>
        /// <param name="parameterId">The string id used to access the parameter in the check parameter collection.</param>
        /// <param name="parameterValue">The value to which to set the parameter.</param>
        public static void SetCheckParameter(string parameterId, object parameterValue)
        {
            if (((MpImportParameters.Category == null) 
                        == false))
            {
                MpImportParameters.Category.SetCheckParameter(parameterId, parameterValue);
            }
            else
            {
                if (((MpImportParameters.Process == null) 
                            == false))
                {
                    MpImportParameters.Process.SetCheckParameter(parameterId, parameterValue);
                }
            }
        }
        
        /// <summary>
        /// Initializes the values in the check parameter object.
        /// </summary>
        public static void Init(cProcess process)
        {
            MpImportParameters._process = process;
            MpImportParameters.Category = null;
            MpImportParameters.RegisterParameters();
        }
        
        /// <summary>
        /// Registers each check parameter.
        /// </summary>
        public static void RegisterParameters()
        {
            if (((MpImportParameters.Process == null) 
                        || (MpImportParameters.Process.ProcessParameters == null)))
            {
                return;
            }
            Process.ProcessParameters.RegisterParameter(539, "Component_Records");
            Process.ProcessParameters.RegisterParameter(1487, "Current_Workspace_Analyzer_Range");
        //  Process.ProcessParameters.RegisterParameter(3007, "Current_Workspace_Calibration_Standard");
            Process.ProcessParameters.RegisterParameter(1139, "Current_Workspace_Component");
            Process.ProcessParameters.RegisterParameter(1425, "Current_Workspace_Formula");
            Process.ProcessParameters.RegisterParameter(1428, "Current_Workspace_Qualification");
            Process.ProcessParameters.RegisterParameter(1429, "Current_Workspace_Qualification_LME");
            Process.ProcessParameters.RegisterParameter(1426, "Current_Workspace_Span");
            Process.ProcessParameters.RegisterParameter(1134, "Current_Workspace_Stack_Pipe");
            Process.ProcessParameters.RegisterParameter(1138, "Current_Workspace_System");
            Process.ProcessParameters.RegisterParameter(1140, "Current_Workspace_System_Component");
            Process.ProcessParameters.RegisterParameter(1486, "Current_Workspace_System_Fuelflow");
            Process.ProcessParameters.RegisterParameter(1133, "Current_Workspace_Unit");
            Process.ProcessParameters.RegisterParameter(1427, "Extraneous_Span_Fields");
            Process.ProcessParameters.RegisterParameter(348, "Formula_Records");
            Process.ProcessParameters.RegisterParameter(2354, "Missing_Component_ID_for_System_Component");
            Process.ProcessParameters.RegisterParameter(345, "Monitor_System_Records");
            Process.ProcessParameters.RegisterParameter(1424, "Workspace_Component_Records");
            Process.ProcessParameters.RegisterParameter(1430, "Workspace_Qualification_LME_Records");
            Process.ProcessParameters.RegisterParameter(1423, "Workspace_Stack_Pipe_Records");
            Process.ProcessParameters.RegisterParameter(1137, "Workspace_Unit_Count");
            Process.ProcessParameters.RegisterParameter(1422, "Workspace_Unit_Records");
        }
    }
}
